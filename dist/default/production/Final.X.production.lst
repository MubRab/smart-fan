

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Nov 17 22:00:28 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    20                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    21                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    24                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	text0,global,reloc=2,class=CODE,delta=1
    26                           	psect	text1,global,reloc=2,class=CODE,delta=1
    27                           	psect	text2,global,reloc=2,class=CODE,delta=1
    28                           	psect	text3,global,reloc=2,class=CODE,delta=1
    29                           	psect	text4,global,reloc=2,class=CODE,delta=1
    30                           	psect	text5,global,reloc=2,class=CODE,delta=1
    31                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text8,global,reloc=2,class=CODE,delta=1
    34                           	psect	text9,global,reloc=2,class=CODE,delta=1
    35                           	psect	text10,global,reloc=2,class=CODE,delta=1
    36                           	psect	text11,global,reloc=2,class=CODE,delta=1
    37                           	psect	text12,global,reloc=2,class=CODE,delta=1
    38                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text23,global,reloc=2,class=CODE,delta=1
    49                           	psect	text24,global,reloc=2,class=CODE,delta=1
    50                           	psect	text25,global,reloc=2,class=CODE,delta=1
    51                           	psect	text26,global,reloc=2,class=CODE,delta=1
    52                           	psect	text27,global,reloc=2,class=CODE,delta=1
    53                           	psect	text28,global,reloc=2,class=CODE,delta=1
    54                           	psect	text29,global,reloc=2,class=CODE,delta=1
    55                           	psect	text30,global,reloc=2,class=CODE,delta=1
    56                           	psect	text31,global,reloc=2,class=CODE,delta=1
    57                           	psect	text32,global,reloc=2,class=CODE,delta=1,inline
    58                           	psect	text33,global,reloc=2,class=CODE,delta=1
    59                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text35,global,reloc=2,class=CODE,delta=1
    61                           	psect	text36,global,reloc=2,class=CODE,delta=1
    62                           	psect	text37,global,reloc=2,class=CODE,delta=1
    63                           	psect	text38,global,reloc=2,class=CODE,delta=1
    64                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text40,global,reloc=2,class=CODE,delta=1
    66                           	psect	text41,global,reloc=2,class=CODE,delta=1
    67                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text44,global,reloc=2,class=CODE,delta=1
    70                           	psect	text45,global,reloc=2,class=CODE,delta=1
    71                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    72                           	psect	text47,global,reloc=2,class=CODE,delta=1
    73                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text63,global,reloc=2,class=CODE,delta=1
    89                           	psect	text64,global,reloc=2,class=CODE,delta=1
    90                           	psect	text65,global,reloc=2,class=CODE,delta=1
    91                           	psect	text66,global,reloc=2,class=CODE,delta=1
    92                           	psect	text67,global,reloc=2,class=CODE,delta=1
    93                           	psect	text68,global,reloc=2,class=CODE,delta=1
    94                           	psect	text69,global,reloc=2,class=CODE,delta=1
    95                           	psect	text70,global,reloc=2,class=CODE,delta=1
    96                           	psect	text71,global,reloc=2,class=CODE,delta=1
    97                           	psect	text72,global,reloc=2,class=CODE,delta=1
    98                           	psect	text73,global,reloc=2,class=CODE,delta=1
    99                           	psect	text74,global,reloc=2,class=CODE,delta=1
   100                           	psect	text75,global,reloc=2,class=CODE,delta=1
   101                           	psect	text76,global,reloc=2,class=CODE,delta=1
   102                           	psect	text77,global,reloc=2,class=CODE,delta=1
   103                           	psect	text78,global,reloc=2,class=CODE,delta=1
   104                           	psect	text79,global,reloc=2,class=CODE,delta=1
   105                           	psect	text80,global,reloc=2,class=CODE,delta=1
   106                           	psect	text81,global,reloc=2,class=CODE,delta=1
   107                           	psect	text82,global,reloc=2,class=CODE,delta=1
   108                           	psect	text83,global,reloc=2,class=CODE,delta=1
   109                           	psect	text84,global,reloc=2,class=CODE,delta=1
   110                           	psect	text85,global,reloc=2,class=CODE,delta=1
   111                           	psect	text86,global,reloc=2,class=CODE,delta=1
   112                           	psect	text87,global,reloc=2,class=CODE,delta=1
   113                           	psect	text88,global,reloc=2,class=CODE,delta=1
   114                           	psect	text89,global,reloc=2,class=CODE,delta=1
   115                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   117                           	psect	text92,global,reloc=2,class=CODE,delta=1
   118                           	psect	text93,global,reloc=2,class=CODE,delta=1
   119                           	psect	text94,global,reloc=2,class=CODE,delta=1
   120                           	psect	text95,global,reloc=2,class=CODE,delta=1
   121                           	psect	text96,global,reloc=2,class=CODE,delta=1
   122                           	psect	text97,global,reloc=2,class=CODE,delta=1
   123                           	psect	text98,global,reloc=2,class=CODE,delta=1
   124                           	psect	text99,global,reloc=2,class=CODE,delta=1
   125                           	psect	text100,global,reloc=2,class=CODE,delta=1
   126                           	psect	text101,global,reloc=2,class=CODE,delta=1
   127                           	psect	text102,global,reloc=2,class=CODE,delta=1
   128                           	psect	text103,global,reloc=2,class=CODE,delta=1
   129                           	psect	text104,global,reloc=2,class=CODE,delta=1
   130                           	psect	text105,global,reloc=2,class=CODE,delta=1
   131                           	psect	text106,global,reloc=2,class=CODE,delta=1
   132                           	psect	text107,global,reloc=2,class=CODE,delta=1
   133                           	psect	text108,global,reloc=2,class=CODE,delta=1
   134                           	psect	text109,global,reloc=2,class=CODE,delta=1
   135                           	psect	text110,global,reloc=2,class=CODE,delta=1
   136                           	psect	text111,global,reloc=2,class=CODE,delta=1
   137                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   138                           	psect	text112,global,reloc=2,class=CODE,delta=1
   139                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   140                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   141  0000                     
   142                           ; Version 2.05
   143                           ; Generated 20/12/2018 GMT
   144                           ; 
   145                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution.
   159                           ; 
   160                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   161                           ;        software without specific prior written permission.
   162                           ; 
   163                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   164                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   165                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   166                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   167                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   168                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   169                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   170                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   171                           ; 
   172                           ; 
   173                           ; Code-generator required, PIC18F45K22 Definitions
   174                           ; 
   175                           ; SFR Addresses
   176  0000                     
   177                           	psect	idataCOMRAM
   178  005B36                     __pidataCOMRAM:
   179                           	opt callstack 0
   180                           
   181                           ;initializer for _timeout
   182  005B36  03E8               	dw	1000
   183                           
   184                           ;initializer for __LCD_backlight
   185  005B38  08                 	db	8
   186                           
   187                           	psect	idataBANK0
   188  005B39                     __pidataBANK0:
   189                           	opt callstack 0
   190                           
   191                           ;initializer for _manualSpeed
   192  005B39  0001               	dw	1
   193                           
   194                           	psect	idataBANK1
   195  005B1E                     __pidataBANK1:
   196                           	opt callstack 0
   197                           
   198                           ;initializer for _stepperCW
   199  005B1E  01                 	db	1
   200                           
   201                           ;initializer for _A
   202                           ;main.c: 66: int timeout = 1000;;main.c: 67: void sendPulse1();;main.c: 68: void sendPul
      +                          se2();;main.c: 69: void sendPulse3();;main.c: 70: void dcMotor(int speeed);;main.c: 71: 
      +                          void _stepMotor_(int stepDirection);;main.c: 72: void _stepMotorReverse_(int stepDirecti
      +                          on);;main.c: 73: void initialiseTCP();;main.c: 75: bool isAuto = 0;;main.c: 76: bool isO
      +                          n = 0;;main.c: 77: unsigned int touchBytesAzo;;main.c: 78: bool azoTouchPollManual();;ma
      +                          in.c: 79: bool azoTouchPollAuto();;main.c: 80: void printOn();;main.c: 81: void printAut
      +                          o();
   203  005B1F  7F                 	db	127
   204  005B20  93                 	db	147
   205  005B21  3A                 	db	58
   206                           
   207                           	psect	idataBANK2
   208  0052CE                     __pidataBANK2:
   209                           	opt callstack 0
   210                           
   211                           ;initializer for printAuto@F6421
   212  0052CE  54                 	db	84
   213  0052CF  65                 	db	101
   214  0052D0  6D                 	db	109
   215  0052D1  70                 	db	112
   216  0052D2  65                 	db	101
   217  0052D3  72                 	db	114
   218  0052D4  61                 	db	97
   219  0052D5  74                 	db	116
   220  0052D6  75                 	db	117
   221  0052D7  72                 	db	114
   222  0052D8  65                 	db	101
   223  0052D9  20                 	db	32
   224  0052DA  DF                 	db	223
   225  0052DB  43                 	db	67
   226  0052DC  0A                 	db	10
   227  0052DD  00                 	db	0
   228                           
   229                           ;initializer for printAuto@F6439
   230  0052DE  44                 	db	68
   231  0052DF  69                 	db	105
   232  0052E0  73                 	db	115
   233  0052E1  74                 	db	116
   234  0052E2  61                 	db	97
   235  0052E3  6E                 	db	110
   236  0052E4  63                 	db	99
   237  0052E5  65                 	db	101
   238  0052E6  20                 	db	32
   239  0052E7  33                 	db	51
   240  0052E8  28                 	db	40
   241  0052E9  6D                 	db	109
   242  0052EA  29                 	db	41
   243  0052EB  0A                 	db	10
   244  0052EC  00                 	db	0
   245                           
   246                           ;initializer for printAuto@F6434
   247  0052ED  44                 	db	68
   248  0052EE  69                 	db	105
   249  0052EF  73                 	db	115
   250  0052F0  74                 	db	116
   251  0052F1  61                 	db	97
   252  0052F2  6E                 	db	110
   253  0052F3  63                 	db	99
   254  0052F4  65                 	db	101
   255  0052F5  20                 	db	32
   256  0052F6  32                 	db	50
   257  0052F7  28                 	db	40
   258  0052F8  6D                 	db	109
   259  0052F9  29                 	db	41
   260  0052FA  0A                 	db	10
   261  0052FB  00                 	db	0
   262                           
   263                           ;initializer for printAuto@F6430
   264  0052FC  44                 	db	68
   265  0052FD  69                 	db	105
   266  0052FE  73                 	db	115
   267  0052FF  74                 	db	116
   268  005300  61                 	db	97
   269  005301  6E                 	db	110
   270  005302  63                 	db	99
   271  005303  65                 	db	101
   272  005304  20                 	db	32
   273  005305  31                 	db	49
   274  005306  28                 	db	40
   275  005307  6D                 	db	109
   276  005308  29                 	db	41
   277  005309  0A                 	db	10
   278  00530A  00                 	db	0
   279                           
   280                           ;initializer for printAuto@F6413
   281  00530B  4C                 	db	76
   282  00530C  69                 	db	105
   283  00530D  67                 	db	103
   284  00530E  68                 	db	104
   285  00530F  74                 	db	116
   286  005310  20                 	db	32
   287  005311  28                 	db	40
   288  005312  4C                 	db	76
   289  005313  75                 	db	117
   290  005314  78                 	db	120
   291  005315  29                 	db	41
   292  005316  0A                 	db	10
   293  005317  00                 	db	0
   294                           
   295                           ;initializer for _C
   296                           ;main.c: 66: int timeout = 1000;;main.c: 67: void sendPulse1();;main.c: 68: void sendPul
      +                          se2();;main.c: 69: void sendPulse3();;main.c: 70: void dcMotor(int speeed);;main.c: 71: 
      +                          void _stepMotor_(int stepDirection);;main.c: 72: void _stepMotorReverse_(int stepDirecti
      +                          on);;main.c: 73: void initialiseTCP();;main.c: 75: bool isAuto = 0;;main.c: 76: bool isO
      +                          n = 0;;main.c: 77: unsigned int touchBytesAzo;;main.c: 78: bool azoTouchPollManual();;ma
      +                          in.c: 79: bool azoTouchPollAuto();;main.c: 80: void printOn();;main.c: 81: void printAut
      +                          o();
   297  005318  F6                 	db	246
   298  005319  B7                 	db	183
   299  00531A  33                 	db	51
   300                           
   301                           ;initializer for _B
   302                           ;main.c: 66: int timeout = 1000;;main.c: 67: void sendPulse1();;main.c: 68: void sendPul
      +                          se2();;main.c: 69: void sendPulse3();;main.c: 70: void dcMotor(int speeed);;main.c: 71: 
      +                          void _stepMotor_(int stepDirection);;main.c: 72: void _stepMotorReverse_(int stepDirecti
      +                          on);;main.c: 73: void initialiseTCP();;main.c: 75: bool isAuto = 0;;main.c: 76: bool isO
      +                          n = 0;;main.c: 77: unsigned int touchBytesAzo;;main.c: 78: bool azoTouchPollManual();;ma
      +                          in.c: 79: bool azoTouchPollAuto();;main.c: 80: void printOn();;main.c: 81: void printAut
      +                          o();
   303  00531B  1D                 	db	29
   304  00531C  76                 	db	118
   305  00531D  39                 	db	57
   306                           
   307                           	psect	mediumconst
   308  007E2A                     __pmediumconst:
   309                           	opt callstack 0
   310  007E2A  00                 	db	0
   311  007E2B                     __powers_:
   312                           	opt callstack 0
   313  007E2B  00                 	db	0
   314  007E2C  80                 	db	128
   315  007E2D  3F                 	db	63
   316  007E2E  00                 	db	0
   317  007E2F  20                 	db	32
   318  007E30  41                 	db	65
   319  007E31  00                 	db	0
   320  007E32  C8                 	db	200
   321  007E33  42                 	db	66
   322  007E34  00                 	db	0
   323  007E35  7A                 	db	122
   324  007E36  44                 	db	68
   325  007E37  40                 	db	64
   326  007E38  1C                 	db	28
   327  007E39  46                 	db	70
   328  007E3A  50                 	db	80
   329  007E3B  C3                 	db	195
   330  007E3C  47                 	db	71
   331  007E3D  24                 	db	36
   332  007E3E  74                 	db	116
   333  007E3F  49                 	db	73
   334  007E40  97                 	db	151
   335  007E41  18                 	db	24
   336  007E42  4B                 	db	75
   337  007E43  BC                 	db	188
   338  007E44  BE                 	db	190
   339  007E45  4C                 	db	76
   340  007E46  6B                 	db	107
   341  007E47  6E                 	db	110
   342  007E48  4E                 	db	78
   343  007E49  03                 	db	3
   344  007E4A  15                 	db	21
   345  007E4B  50                 	db	80
   346  007E4C  79                 	db	121
   347  007E4D  AD                 	db	173
   348  007E4E  60                 	db	96
   349  007E4F  F3                 	db	243
   350  007E50  49                 	db	73
   351  007E51  71                 	db	113
   352  007E52                     __end_of__powers_:
   353                           	opt callstack 0
   354  007E52                     __npowers_:
   355                           	opt callstack 0
   356  007E52  00                 	db	0
   357  007E53  80                 	db	128
   358  007E54  3F                 	db	63
   359  007E55  CD                 	db	205
   360  007E56  CC                 	db	204
   361  007E57  3D                 	db	61
   362  007E58  D7                 	db	215
   363  007E59  23                 	db	35
   364  007E5A  3C                 	db	60
   365  007E5B  12                 	db	18
   366  007E5C  83                 	db	131
   367  007E5D  3A                 	db	58
   368  007E5E  B7                 	db	183
   369  007E5F  D1                 	db	209
   370  007E60  38                 	db	56
   371  007E61  C6                 	db	198
   372  007E62  27                 	db	39
   373  007E63  37                 	db	55
   374  007E64  38                 	db	56
   375  007E65  86                 	db	134
   376  007E66  35                 	db	53
   377  007E67  C0                 	db	192
   378  007E68  D6                 	db	214
   379  007E69  33                 	db	51
   380  007E6A  CC                 	db	204
   381  007E6B  2B                 	db	43
   382  007E6C  32                 	db	50
   383  007E6D  70                 	db	112
   384  007E6E  89                 	db	137
   385  007E6F  30                 	db	48
   386  007E70  E7                 	db	231
   387  007E71  DB                 	db	219
   388  007E72  2E                 	db	46
   389  007E73  E5                 	db	229
   390  007E74  3C                 	db	60
   391  007E75  1E                 	db	30
   392  007E76  42                 	db	66
   393  007E77  A2                 	db	162
   394  007E78  0D                 	db	13
   395  007E79                     __end_of__npowers_:
   396                           	opt callstack 0
   397  007E79                     _dpowers:
   398                           	opt callstack 0
   399  007E79  0001               	dw	1
   400  007E7B  0000               	dw	0
   401  007E7D  000A               	dw	10
   402  007E7F  0000               	dw	0
   403  007E81  0064               	dw	100
   404  007E83  0000               	dw	0
   405  007E85  03E8               	dw	1000
   406  007E87  0000               	dw	0
   407  007E89  2710               	dw	10000
   408  007E8B  0000               	dw	0
   409  007E8D  86A0               	dw	34464
   410  007E8F  0001               	dw	1
   411  007E91  4240               	dw	16960
   412  007E93  000F               	dw	15
   413  007E95  9680               	dw	38528
   414  007E97  0098               	dw	152
   415  007E99  E100               	dw	57600
   416  007E9B  05F5               	dw	1525
   417  007E9D  CA00               	dw	51712
   418  007E9F  3B9A               	dw	15258
   419  007EA1                     __end_of_dpowers:
   420                           	opt callstack 0
   421  007EA1                     exp@coeff:
   422                           	opt callstack 0
   423  007EA1  00                 	db	0
   424  007EA2  80                 	db	128
   425  007EA3  3F                 	db	63
   426  007EA4  72                 	db	114
   427  007EA5  31                 	db	49
   428  007EA6  3F                 	db	63
   429  007EA7  FE                 	db	254
   430  007EA8  75                 	db	117
   431  007EA9  3E                 	db	62
   432  007EAA  58                 	db	88
   433  007EAB  63                 	db	99
   434  007EAC  3D                 	db	61
   435  007EAD  95                 	db	149
   436  007EAE  1D                 	db	29
   437  007EAF  3C                 	db	60
   438  007EB0  C5                 	db	197
   439  007EB1  AE                 	db	174
   440  007EB2  3A                 	db	58
   441  007EB3  79                 	db	121
   442  007EB4  21                 	db	33
   443  007EB5  39                 	db	57
   444  007EB6  94                 	db	148
   445  007EB7  80                 	db	128
   446  007EB8  37                 	db	55
   447  007EB9  93                 	db	147
   448  007EBA  A7                 	db	167
   449  007EBB  35                 	db	53
   450  007EBC  56                 	db	86
   451  007EBD  15                 	db	21
   452  007EBE  34                 	db	52
   453  007EBF                     __end_ofexp@coeff:
   454                           	opt callstack 0
   455  007EBF                     log@coeff:
   456                           	opt callstack 0
   457  007EBF  00                 	db	0
   458  007EC0  00                 	db	0
   459  007EC1  00                 	db	0
   460  007EC2  00                 	db	0
   461  007EC3  80                 	db	128
   462  007EC4  3F                 	db	63
   463  007EC5  F0                 	db	240
   464  007EC6  FF                 	db	255
   465  007EC7  BE                 	db	190
   466  007EC8  E2                 	db	226
   467  007EC9  A9                 	db	169
   468  007ECA  3E                 	db	62
   469  007ECB  83                 	db	131
   470  007ECC  76                 	db	118
   471  007ECD  BE                 	db	190
   472  007ECE  AE                 	db	174
   473  007ECF  2B                 	db	43
   474  007ED0  3E                 	db	62
   475  007ED1  3C                 	db	60
   476  007ED2  C3                 	db	195
   477  007ED3  BD                 	db	189
   478  007ED4  D2                 	db	210
   479  007ED5  13                 	db	19
   480  007ED6  3D                 	db	61
   481  007ED7  78                 	db	120
   482  007ED8  D3                 	db	211
   483  007ED9  BB                 	db	187
   484  007EDA                     __end_oflog@coeff:
   485                           	opt callstack 0
   486  007EDA                     STR_9:
   487  007EDA  53                 	db	83	;'S'
   488  007EDB  25                 	db	37
   489  007EDC  30                 	db	48	;'0'
   490  007EDD  34                 	db	52	;'4'
   491  007EDE  2E                 	db	46
   492  007EDF  31                 	db	49	;'1'
   493  007EE0  66                 	db	102	;'f'
   494  007EE1  25                 	db	37
   495  007EE2  30                 	db	48	;'0'
   496  007EE3  36                 	db	54	;'6'
   497  007EE4  2E                 	db	46
   498  007EE5  31                 	db	49	;'1'
   499  007EE6  66                 	db	102	;'f'
   500  007EE7  25                 	db	37
   501  007EE8  30                 	db	48	;'0'
   502  007EE9  35                 	db	53	;'5'
   503  007EEA  2E                 	db	46
   504  007EEB  33                 	db	51	;'3'
   505  007EEC  66                 	db	102	;'f'
   506  007EED  25                 	db	37
   507  007EEE  30                 	db	48	;'0'
   508  007EEF  35                 	db	53	;'5'
   509  007EF0  2E                 	db	46
   510  007EF1  33                 	db	51	;'3'
   511  007EF2  66                 	db	102	;'f'
   512  007EF3  25                 	db	37
   513  007EF4  30                 	db	48	;'0'
   514  007EF5  35                 	db	53	;'5'
   515  007EF6  2E                 	db	46
   516  007EF7  33                 	db	51	;'3'
   517  007EF8  66                 	db	102	;'f'
   518  007EF9  0D                 	db	13
   519  007EFA  0A                 	db	10
   520  007EFB  00                 	db	0
   521  007EFC                     STR_2:
   522  007EFC  54                 	db	84	;'T'
   523  007EFD  43                 	db	67	;'C'
   524  007EFE  50                 	db	80	;'P'
   525  007EFF  20                 	db	32
   526  007F00  53                 	db	83	;'S'
   527  007F01  65                 	db	101	;'e'
   528  007F02  72                 	db	114	;'r'
   529  007F03  76                 	db	118	;'v'
   530  007F04  65                 	db	101	;'e'
   531  007F05  72                 	db	114	;'r'
   532  007F06  20                 	db	32
   533  007F07  0A                 	db	10
   534  007F08  20                 	db	32
   535  007F09  20                 	db	32
   536  007F0A  31                 	db	49	;'1'
   537  007F0B  39                 	db	57	;'9'
   538  007F0C  32                 	db	50	;'2'
   539  007F0D  2E                 	db	46
   540  007F0E  31                 	db	49	;'1'
   541  007F0F  36                 	db	54	;'6'
   542  007F10  38                 	db	56	;'8'
   543  007F11  2E                 	db	46
   544  007F12  34                 	db	52	;'4'
   545  007F13  2E                 	db	46
   546  007F14  31                 	db	49	;'1'
   547  007F15  00                 	db	0
   548  007F16                     STR_7:
   549  007F16  41                 	db	65	;'A'
   550  007F17  54                 	db	84	;'T'
   551  007F18  2B                 	db	43
   552  007F19  43                 	db	67	;'C'
   553  007F1A  49                 	db	73	;'I'
   554  007F1B  50                 	db	80	;'P'
   555  007F1C  53                 	db	83	;'S'
   556  007F1D  45                 	db	69	;'E'
   557  007F1E  52                 	db	82	;'R'
   558  007F1F  56                 	db	86	;'V'
   559  007F20  45                 	db	69	;'E'
   560  007F21  52                 	db	82	;'R'
   561  007F22  3D                 	db	61	;'='
   562  007F23  31                 	db	49	;'1'
   563  007F24  2C                 	db	44
   564  007F25  32                 	db	50	;'2'
   565  007F26  32                 	db	50	;'2'
   566  007F27  32                 	db	50	;'2'
   567  007F28  0D                 	db	13
   568  007F29  0A                 	db	10
   569  007F2A  00                 	db	0
   570  007F2B                     STR_8:
   571  007F2B  41                 	db	65	;'A'
   572  007F2C  54                 	db	84	;'T'
   573  007F2D  2B                 	db	43
   574  007F2E  43                 	db	67	;'C'
   575  007F2F  49                 	db	73	;'I'
   576  007F30  50                 	db	80	;'P'
   577  007F31  53                 	db	83	;'S'
   578  007F32  45                 	db	69	;'E'
   579  007F33  4E                 	db	78	;'N'
   580  007F34  44                 	db	68	;'D'
   581  007F35  3D                 	db	61	;'='
   582  007F36  30                 	db	48	;'0'
   583  007F37  2C                 	db	44
   584  007F38  32                 	db	50	;'2'
   585  007F39  36                 	db	54	;'6'
   586  007F3A  0D                 	db	13
   587  007F3B  0A                 	db	10
   588  007F3C  00                 	db	0
   589  007F3D                     STR_28:
   590  007F3D  44                 	db	68	;'D'
   591  007F3E  65                 	db	101	;'e'
   592  007F3F  74                 	db	116	;'t'
   593  007F40  65                 	db	101	;'e'
   594  007F41  63                 	db	99	;'c'
   595  007F42  74                 	db	116	;'t'
   596  007F43  65                 	db	101	;'e'
   597  007F44  64                 	db	100	;'d'
   598  007F45  20                 	db	32
   599  007F46  0A                 	db	10
   600  007F47  20                 	db	32
   601  007F48  52                 	db	82	;'R'
   602  007F49  69                 	db	105	;'i'
   603  007F4A  67                 	db	103	;'g'
   604  007F4B  68                 	db	104	;'h'
   605  007F4C  74                 	db	116	;'t'
   606  007F4D  00                 	db	0
   607  007F4E                     STR_23:
   608  007F4E  44                 	db	68	;'D'
   609  007F4F  65                 	db	101	;'e'
   610  007F50  74                 	db	116	;'t'
   611  007F51  65                 	db	101	;'e'
   612  007F52  63                 	db	99	;'c'
   613  007F53  74                 	db	116	;'t'
   614  007F54  65                 	db	101	;'e'
   615  007F55  64                 	db	100	;'d'
   616  007F56  20                 	db	32
   617  007F57  0A                 	db	10
   618  007F58  20                 	db	32
   619  007F59  46                 	db	70	;'F'
   620  007F5A  72                 	db	114	;'r'
   621  007F5B  6F                 	db	111	;'o'
   622  007F5C  6E                 	db	110	;'n'
   623  007F5D  74                 	db	116	;'t'
   624  007F5E  00                 	db	0
   625  007F5F                     STR_25:
   626  007F5F  44                 	db	68	;'D'
   627  007F60  65                 	db	101	;'e'
   628  007F61  74                 	db	116	;'t'
   629  007F62  65                 	db	101	;'e'
   630  007F63  63                 	db	99	;'c'
   631  007F64  74                 	db	116	;'t'
   632  007F65  65                 	db	101	;'e'
   633  007F66  64                 	db	100	;'d'
   634  007F67  20                 	db	32
   635  007F68  0A                 	db	10
   636  007F69  20                 	db	32
   637  007F6A  4C                 	db	76	;'L'
   638  007F6B  65                 	db	101	;'e'
   639  007F6C  66                 	db	102	;'f'
   640  007F6D  74                 	db	116	;'t'
   641  007F6E  00                 	db	0
   642  007F6F                     STR_26:
   643  007F6F  44                 	db	68	;'D'
   644  007F70  69                 	db	105	;'i'
   645  007F71  73                 	db	115	;'s'
   646  007F72  74                 	db	116	;'t'
   647  007F73  61                 	db	97	;'a'
   648  007F74  6E                 	db	110	;'n'
   649  007F75  63                 	db	99	;'c'
   650  007F76  65                 	db	101	;'e'
   651  007F77  20                 	db	32
   652  007F78  54                 	db	84	;'T'
   653  007F79  68                 	db	104	;'h'
   654  007F7A  72                 	db	114	;'r'
   655  007F7B  65                 	db	101	;'e'
   656  007F7C  65                 	db	101	;'e'
   657  007F7D  00                 	db	0
   658  007F7E                     STR_3:
   659  007F7E  46                 	db	70	;'F'
   660  007F7F  61                 	db	97	;'a'
   661  007F80  6E                 	db	110	;'n'
   662  007F81  20                 	db	32
   663  007F82  6F                 	db	111	;'o'
   664  007F83  6E                 	db	110	;'n'
   665  007F84  20                 	db	32
   666  007F85  53                 	db	83	;'S'
   667  007F86  74                 	db	116	;'t'
   668  007F87  61                 	db	97	;'a'
   669  007F88  6E                 	db	110	;'n'
   670  007F89  64                 	db	100	;'d'
   671  007F8A  62                 	db	98	;'b'
   672  007F8B  79                 	db	121	;'y'
   673  007F8C  00                 	db	0
   674  007F8D                     STR_30:
   675  007F8D  41                 	db	65	;'A'
   676  007F8E  54                 	db	84	;'T'
   677  007F8F  2B                 	db	43
   678  007F90  43                 	db	67	;'C'
   679  007F91  49                 	db	73	;'I'
   680  007F92  50                 	db	80	;'P'
   681  007F93  4D                 	db	77	;'M'
   682  007F94  55                 	db	85	;'U'
   683  007F95  58                 	db	88	;'X'
   684  007F96  3D                 	db	61	;'='
   685  007F97  31                 	db	49	;'1'
   686  007F98  0D                 	db	13
   687  007F99  0A                 	db	10
   688  007F9A  00                 	db	0
   689  007F9B                     STR_1:
   690  007F9B  53                 	db	83	;'S'
   691  007F9C  79                 	db	121	;'y'
   692  007F9D  73                 	db	115	;'s'
   693  007F9E  74                 	db	116	;'t'
   694  007F9F  65                 	db	101	;'e'
   695  007FA0  6D                 	db	109	;'m'
   696  007FA1  20                 	db	32
   697  007FA2  53                 	db	83	;'S'
   698  007FA3  74                 	db	116	;'t'
   699  007FA4  61                 	db	97	;'a'
   700  007FA5  72                 	db	114	;'r'
   701  007FA6  74                 	db	116	;'t'
   702  007FA7  00                 	db	0
   703  007FA8                     STR_5:
   704  007FA8  4D                 	db	77	;'M'
   705  007FA9  61                 	db	97	;'a'
   706  007FAA  6E                 	db	110	;'n'
   707  007FAB  75                 	db	117	;'u'
   708  007FAC  61                 	db	97	;'a'
   709  007FAD  6C                 	db	108	;'l'
   710  007FAE  20                 	db	32
   711  007FAF  6D                 	db	109	;'m'
   712  007FB0  6F                 	db	111	;'o'
   713  007FB1  64                 	db	100	;'d'
   714  007FB2  65                 	db	101	;'e'
   715  007FB3  00                 	db	0
   716  007FB4                     STR_34:
   717  007FB4  41                 	db	65	;'A'
   718  007FB5  54                 	db	84	;'T'
   719  007FB6  2B                 	db	43
   720  007FB7  43                 	db	67	;'C'
   721  007FB8  49                 	db	73	;'I'
   722  007FB9  46                 	db	70	;'F'
   723  007FBA  53                 	db	83	;'S'
   724  007FBB  52                 	db	82	;'R'
   725  007FBC  0D                 	db	13
   726  007FBD  0A                 	db	10
   727  007FBE  00                 	db	0
   728  007FBF                     STR_6:
   729  007FBF  41                 	db	65	;'A'
   730  007FC0  75                 	db	117	;'u'
   731  007FC1  74                 	db	116	;'t'
   732  007FC2  6F                 	db	111	;'o'
   733  007FC3  20                 	db	32
   734  007FC4  6D                 	db	109	;'m'
   735  007FC5  6F                 	db	111	;'o'
   736  007FC6  64                 	db	100	;'d'
   737  007FC7  65                 	db	101	;'e'
   738  007FC8  00                 	db	0
   739  007FC9                     STR_12:
   740  007FC9  53                 	db	83	;'S'
   741  007FCA  70                 	db	112	;'p'
   742  007FCB  65                 	db	101	;'e'
   743  007FCC  65                 	db	101	;'e'
   744  007FCD  64                 	db	100	;'d'
   745  007FCE  20                 	db	32
   746  007FCF  31                 	db	49	;'1'
   747  007FD0  00                 	db	0
   748  007FD1                     STR_13:
   749  007FD1  53                 	db	83	;'S'
   750  007FD2  70                 	db	112	;'p'
   751  007FD3  65                 	db	101	;'e'
   752  007FD4  65                 	db	101	;'e'
   753  007FD5  64                 	db	100	;'d'
   754  007FD6  20                 	db	32
   755  007FD7  32                 	db	50	;'2'
   756  007FD8  00                 	db	0
   757  007FD9                     STR_14:
   758  007FD9  53                 	db	83	;'S'
   759  007FDA  70                 	db	112	;'p'
   760  007FDB  65                 	db	101	;'e'
   761  007FDC  65                 	db	101	;'e'
   762  007FDD  64                 	db	100	;'d'
   763  007FDE  20                 	db	32
   764  007FDF  33                 	db	51	;'3'
   765  007FE0  00                 	db	0
   766  007FE1                     STR_15:
   767  007FE1  53                 	db	83	;'S'
   768  007FE2  70                 	db	112	;'p'
   769  007FE3  65                 	db	101	;'e'
   770  007FE4  65                 	db	101	;'e'
   771  007FE5  64                 	db	100	;'d'
   772  007FE6  20                 	db	32
   773  007FE7  34                 	db	52	;'4'
   774  007FE8  00                 	db	0
   775  007FE9                     STR_4:
   776  007FE9  46                 	db	70	;'F'
   777  007FEA  61                 	db	97	;'a'
   778  007FEB  6E                 	db	110	;'n'
   779  007FEC  20                 	db	32
   780  007FED  4F                 	db	79	;'O'
   781  007FEE  6E                 	db	110	;'n'
   782  007FEF  00                 	db	0
   783  007FF0                     STR_29:
   784  007FF0  41                 	db	65	;'A'
   785  007FF1  54                 	db	84	;'T'
   786  007FF2  0D                 	db	13
   787  007FF3  0A                 	db	10
   788  007FF4  00                 	db	0
   789  007FF5                     STR_16:
   790  007FF5  25                 	db	37
   791  007FF6  2E                 	db	46
   792  007FF7  31                 	db	49	;'1'
   793  007FF8  66                 	db	102	;'f'
   794  007FF9  00                 	db	0
   795  007FFA                     STR_22:
   796  007FFA  25                 	db	37
   797  007FFB  2E                 	db	46
   798  007FFC  33                 	db	51	;'3'
   799  007FFD  66                 	db	102	;'f'
   800  007FFE  00                 	db	0
   801  0000                     
   802                           ; #config settings
   803  007FFF  00                 	db	0	; dummy byte at the end
   804  0000                     
   805                           	psect	nvBANK1
   806  00017F                     __pnvBANK1:
   807                           	opt callstack 0
   808  00017F                     _TMR3_InterruptHandler:
   809                           	opt callstack 0
   810  00017F                     	ds	2
   811  000181                     _timer3ReloadVal:
   812                           	opt callstack 0
   813  000181                     	ds	2
   814  000183                     _eusart1TxBufferRemaining:
   815                           	opt callstack 0
   816  000183                     	ds	1
   817                           
   818                           	psect	nvBANK2
   819  00028F                     __pnvBANK2:
   820                           	opt callstack 0
   821  00028F                     _EUSART1_ErrorHandler:
   822                           	opt callstack 0
   823  00028F                     	ds	2
   824  000291                     _EUSART1_OverrunErrorHandler:
   825                           	opt callstack 0
   826  000291                     	ds	2
   827  000293                     _EUSART1_FramingErrorHandler:
   828                           	opt callstack 0
   829  000293                     	ds	2
   830  000295                     _EUSART1_RxDefaultInterruptHandler:
   831                           	opt callstack 0
   832  000295                     	ds	2
   833  000297                     _EUSART1_TxDefaultInterruptHandler:
   834                           	opt callstack 0
   835  000297                     	ds	2
   836  0000                     _CCPR5H	set	3926
   837  0000                     _CCPR5L	set	3925
   838  0000                     _CCP5CON	set	3924
   839  0000                     _CCPTMRS1bits	set	3912
   840  0000                     _CCPR4H	set	3929
   841  0000                     _CCPR4L	set	3928
   842  0000                     _CCP4CON	set	3927
   843  0000                     _ANSELA	set	3896
   844  0000                     _ANSELE	set	3900
   845  0000                     _ANSELB	set	3897
   846  0000                     _ANSELC	set	3898
   847  0000                     _ANSELD	set	3899
   848  0000                     _TMR3	set	4018
   849  0000                     _TMR1	set	4046
   850  0000                     _T3GCONbits	set	4020
   851  0000                     _T3CONbits	set	4017
   852  0000                     _T3CON	set	4017
   853  0000                     _TMR3L	set	4018
   854  0000                     _TMR3H	set	4019
   855  0000                     _T3GCON	set	4020
   856  0000                     _SSP1CON2	set	4037
   857  0000                     _SSP2STATbits	set	3949
   858  0000                     _LATBbits	set	3978
   859  0000                     _PORTBbits	set	3969
   860  0000                     _T2CONbits	set	4026
   861  0000                     _T2CON	set	4026
   862  0000                     _TMR2	set	4028
   863  0000                     _PR2	set	4027
   864  0000                     _SSP2BUF	set	3951
   865  0000                     _SSP2CON2bits	set	3947
   866  0000                     _SSP2CON1bits	set	3948
   867  0000                     _SSP2ADD	set	3950
   868  0000                     _SSP2CON3	set	3945
   869  0000                     _SSP2CON1	set	3948
   870  0000                     _SSP2STAT	set	3949
   871  0000                     _SSP1BUF	set	4041
   872  0000                     _SSP1CON2bits	set	4037
   873  0000                     _SSP1CON1bits	set	4038
   874  0000                     _SSP1ADD	set	4040
   875  0000                     _SSP1CON3	set	4043
   876  0000                     _SSP1CON1	set	4038
   877  0000                     _SSP1STAT	set	4039
   878  0000                     _INTCON2bits	set	4081
   879  0000                     _WPUB	set	3937
   880  0000                     _TRISD	set	3989
   881  0000                     _TRISC	set	3988
   882  0000                     _TRISB	set	3987
   883  0000                     _TRISA	set	3986
   884  0000                     _TRISE	set	3990
   885  0000                     _LATC	set	3979
   886  0000                     _LATB	set	3978
   887  0000                     _LATA	set	3977
   888  0000                     _LATD	set	3980
   889  0000                     _LATE	set	3981
   890  0000                     _OSCTUNE	set	3995
   891  0000                     _OSCCON2	set	4050
   892  0000                     _OSCCON	set	4051
   893  0000                     _PIR3bits	set	4004
   894  0000                     _PIE3bits	set	4003
   895  0000                     _PIR1bits	set	3998
   896  0000                     _PIR2bits	set	4001
   897  0000                     _PIE2bits	set	4000
   898  0000                     _INTCONbits	set	4082
   899  0000                     _RCONbits	set	4048
   900  0000                     _LATAbits	set	3977
   901  0000                     _RCREG1	set	4014
   902  0000                     _RCSTA1bits	set	4011
   903  0000                     _TXREG1	set	4013
   904  0000                     _TXSTA1bits	set	4012
   905  0000                     _SPBRGH1	set	4016
   906  0000                     _SPBRG1	set	4015
   907  0000                     _TXSTA1	set	4012
   908  0000                     _RCSTA1	set	4011
   909  0000                     _BAUDCON1	set	4024
   910  0000                     _PIE1bits	set	3997
   911  0000                     _LATDbits	set	3980
   912  0000                     _ADCON0bits	set	4034
   913  0000                     _ADRESH	set	4036
   914  0000                     _ADRESL	set	4035
   915  0000                     _ADCON2	set	4032
   916  0000                     _ADCON1	set	4033
   917  0000                     _ADCON0	set	4034
   918  0000                     _ACKEN1	set	32300
   919  0000                     _ACKDT1	set	32301
   920  0000                     _RCEN1	set	32299
   921  0000                     _TMR1IF	set	31984
   922  0000                     _TMR1ON	set	32360
   923                           
   924                           	psect	cinit
   925  0048A2                     __pcinit:
   926                           	opt callstack 0
   927  0048A2                     start_initialization:
   928                           	opt callstack 0
   929  0048A2                     __initialization:
   930                           	opt callstack 0
   931                           
   932                           ; Initialize objects allocated to BANK2 (80 bytes)
   933                           ; load TBLPTR registers with __pidataBANK2
   934  0048A2  0ECE               	movlw	low __pidataBANK2
   935  0048A4  6EF6               	movwf	tblptrl,c
   936  0048A6  0E52               	movlw	high __pidataBANK2
   937  0048A8  6EF7               	movwf	tblptrh,c
   938  0048AA  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   939  0048AC  6EF8               	movwf	tblptru,c
   940  0048AE  EE02  F000         	lfsr	0,__pdataBANK2
   941  0048B2  EE10 F050          	lfsr	1,80
   942  0048B6                     copy_data0:
   943  0048B6  0009               	tblrd		*+
   944  0048B8  CFF5 FFEE          	movff	tablat,postinc0
   945  0048BC  50E5               	movf	postdec1,w,c
   946  0048BE  50E1               	movf	fsr1l,w,c
   947  0048C0  E1FA               	bnz	copy_data0
   948                           
   949                           ; Initialize objects allocated to BANK1 (4 bytes)
   950                           ; load TBLPTR registers with __pidataBANK1
   951  0048C2  0E1E               	movlw	low __pidataBANK1
   952  0048C4  6EF6               	movwf	tblptrl,c
   953  0048C6  0E5B               	movlw	high __pidataBANK1
   954  0048C8  6EF7               	movwf	tblptrh,c
   955  0048CA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   956  0048CC  6EF8               	movwf	tblptru,c
   957  0048CE  EE01  F084         	lfsr	0,__pdataBANK1
   958  0048D2  EE10 F004          	lfsr	1,4
   959  0048D6                     copy_data1:
   960  0048D6  0009               	tblrd		*+
   961  0048D8  CFF5 FFEE          	movff	tablat,postinc0
   962  0048DC  50E5               	movf	postdec1,w,c
   963  0048DE  50E1               	movf	fsr1l,w,c
   964  0048E0  E1FA               	bnz	copy_data1
   965                           
   966                           ; Initialize objects allocated to BANK0 (2 bytes)
   967                           ; load TBLPTR registers with __pidataBANK0
   968  0048E2  0E39               	movlw	low __pidataBANK0
   969  0048E4  6EF6               	movwf	tblptrl,c
   970  0048E6  0E5B               	movlw	high __pidataBANK0
   971  0048E8  6EF7               	movwf	tblptrh,c
   972  0048EA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   973  0048EC  6EF8               	movwf	tblptru,c
   974  0048EE  0009               	tblrd		*+	;fetch initializer
   975  0048F0  CFF5 F0FE          	movff	tablat,__pdataBANK0
   976  0048F4  0009               	tblrd		*+	;fetch initializer
   977  0048F6  CFF5 F0FF          	movff	tablat,__pdataBANK0+1
   978                           
   979                           ; Initialize objects allocated to COMRAM (3 bytes)
   980                           ; load TBLPTR registers with __pidataCOMRAM
   981  0048FA  0E36               	movlw	low __pidataCOMRAM
   982  0048FC  6EF6               	movwf	tblptrl,c
   983  0048FE  0E5B               	movlw	high __pidataCOMRAM
   984  004900  6EF7               	movwf	tblptrh,c
   985  004902  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   986  004904  6EF8               	movwf	tblptru,c
   987  004906  0009               	tblrd		*+	;fetch initializer
   988  004908  CFF5 F042          	movff	tablat,__pdataCOMRAM
   989  00490C  0009               	tblrd		*+	;fetch initializer
   990  00490E  CFF5 F043          	movff	tablat,__pdataCOMRAM+1
   991  004912  0009               	tblrd		*+	;fetch initializer
   992  004914  CFF5 F044          	movff	tablat,__pdataCOMRAM+2
   993                           
   994                           ; Clear objects allocated to BANK2 (63 bytes)
   995  004918  EE02  F050         	lfsr	0,__pbssBANK2
   996  00491C  0E3F               	movlw	63
   997  00491E                     clear_0:
   998  00491E  6AEE               	clrf	postinc0,c
   999  004920  06E8               	decf	wreg,f,c
  1000  004922  E1FD               	bnz	clear_0
  1001                           
  1002                           ; Clear objects allocated to BANK1 (101 bytes)
  1003  004924  EE01  F000         	lfsr	0,__pbssBANK1
  1004  004928  0E65               	movlw	101
  1005  00492A                     clear_1:
  1006  00492A  6AEE               	clrf	postinc0,c
  1007  00492C  06E8               	decf	wreg,f,c
  1008  00492E  E1FD               	bnz	clear_1
  1009                           
  1010                           ; Clear objects allocated to BANK0 (35 bytes)
  1011  004930  EE00  F0DB         	lfsr	0,__pbssBANK0
  1012  004934  0E23               	movlw	35
  1013  004936                     clear_2:
  1014  004936  6AEE               	clrf	postinc0,c
  1015  004938  06E8               	decf	wreg,f,c
  1016  00493A  E1FD               	bnz	clear_2
  1017                           
  1018                           ; Clear objects allocated to COMRAM (22 bytes)
  1019  00493C  EE00  F02C         	lfsr	0,__pbssCOMRAM
  1020  004940  0E16               	movlw	22
  1021  004942                     clear_3:
  1022  004942  6AEE               	clrf	postinc0,c
  1023  004944  06E8               	decf	wreg,f,c
  1024  004946  E1FD               	bnz	clear_3
  1025  004948                     end_of_initialization:
  1026                           	opt callstack 0
  1027  004948                     __end_of__initialization:
  1028                           	opt callstack 0
  1029  004948  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1030  00494A  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1031  00494C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1032  00494E  6EF8               	movwf	tblptru,c
  1033  004950  0100               	movlb	0
  1034  004952  EF61  F018         	goto	_main	;jump to C main() function
  1035                           
  1036                           	psect	bssCOMRAM
  1037  00002C                     __pbssCOMRAM:
  1038                           	opt callstack 0
  1039  00002C                     _eusart1RxBuffer:
  1040                           	opt callstack 0
  1041  00002C                     	ds	8
  1042  000034                     _step:
  1043                           	opt callstack 0
  1044  000034                     	ds	2
  1045  000036                     _unitTestCounter:
  1046                           	opt callstack 0
  1047  000036                     	ds	2
  1048  000038                     __LCD_cols:
  1049                           	opt callstack 0
  1050  000038                     	ds	1
  1051  000039                     __LCD_address:
  1052                           	opt callstack 0
  1053  000039                     	ds	1
  1054  00003A                     _eusart1RxTail:
  1055                           	opt callstack 0
  1056  00003A                     	ds	1
  1057  00003B                     _eusart1RxHead:
  1058                           	opt callstack 0
  1059  00003B                     	ds	1
  1060  00003C                     _eusart1TxTail:
  1061                           	opt callstack 0
  1062  00003C                     	ds	1
  1063  00003D                     _eusart1TxHead:
  1064                           	opt callstack 0
  1065  00003D                     	ds	1
  1066  00003E                     I2C2_ISR@i2c_address:
  1067                           	opt callstack 0
  1068  00003E                     	ds	2
  1069  000040                     I2C1_ISR@i2c_address:
  1070                           	opt callstack 0
  1071  000040                     	ds	2
  1072                           
  1073                           	psect	dataCOMRAM
  1074  000042                     __pdataCOMRAM:
  1075                           	opt callstack 0
  1076  000042                     _timeout:
  1077                           	opt callstack 0
  1078  000042                     	ds	2
  1079  000044                     __LCD_backlight:
  1080                           	opt callstack 0
  1081  000044                     	ds	1
  1082                           
  1083                           	psect	bssBANK0
  1084  0000DB                     __pbssBANK0:
  1085                           	opt callstack 0
  1086  0000DB                     _guiDistanceR:
  1087                           	opt callstack 0
  1088  0000DB                     	ds	3
  1089  0000DE                     _guiDistanceC:
  1090                           	opt callstack 0
  1091  0000DE                     	ds	3
  1092  0000E1                     _guiDistanceL:
  1093                           	opt callstack 0
  1094  0000E1                     	ds	3
  1095  0000E4                     _guiLux:
  1096                           	opt callstack 0
  1097  0000E4                     	ds	3
  1098  0000E7                     _guiTemp:
  1099                           	opt callstack 0
  1100  0000E7                     	ds	3
  1101  0000EA                     _touchBytesAzo:
  1102                           	opt callstack 0
  1103  0000EA                     	ds	2
  1104  0000EC                     _isOn:
  1105                           	opt callstack 0
  1106  0000EC                     	ds	1
  1107  0000ED                     _isAuto:
  1108                           	opt callstack 0
  1109  0000ED                     	ds	1
  1110  0000EE                     I2C2_ISR@i2c_10bit_address_restart:
  1111                           	opt callstack 0
  1112  0000EE                     	ds	1
  1113  0000EF                     I2C2_ISR@i2c_bytes_left:
  1114                           	opt callstack 0
  1115  0000EF                     	ds	1
  1116  0000F0                     _i2c2_trb_count:
  1117                           	opt callstack 0
  1118  0000F0                     	ds	1
  1119  0000F1                     _i2c2_state:
  1120                           	opt callstack 0
  1121  0000F1                     	ds	1
  1122  0000F2                     I2C1_ISR@i2c_10bit_address_restart:
  1123                           	opt callstack 0
  1124  0000F2                     	ds	1
  1125  0000F3                     I2C1_ISR@i2c_bytes_left:
  1126                           	opt callstack 0
  1127  0000F3                     	ds	1
  1128  0000F4                     _i2c1_trb_count:
  1129                           	opt callstack 0
  1130  0000F4                     	ds	1
  1131  0000F5                     _i2c1_state:
  1132                           	opt callstack 0
  1133  0000F5                     	ds	1
  1134  0000F6                     _commandReceive4:
  1135                           	opt callstack 0
  1136  0000F6                     	ds	1
  1137  0000F7                     _commandReceive3:
  1138                           	opt callstack 0
  1139  0000F7                     	ds	1
  1140  0000F8                     _commandReceive2:
  1141                           	opt callstack 0
  1142  0000F8                     	ds	1
  1143  0000F9                     _commandReceive:
  1144                           	opt callstack 0
  1145  0000F9                     	ds	1
  1146  0000FA                     _serverSetup:
  1147                           	opt callstack 0
  1148  0000FA                     	ds	1
  1149  0000FB                     _muxSetup:
  1150                           	opt callstack 0
  1151  0000FB                     	ds	1
  1152  0000FC                     _atCheck:
  1153                           	opt callstack 0
  1154  0000FC                     	ds	1
  1155  0000FD                     _eusart1RxCount:
  1156                           	opt callstack 0
  1157  0000FD                     	ds	1
  1158                           
  1159                           	psect	dataBANK0
  1160  0000FE                     __pdataBANK0:
  1161                           	opt callstack 0
  1162  0000FE                     _manualSpeed:
  1163                           	opt callstack 0
  1164  0000FE                     	ds	2
  1165                           
  1166                           	psect	bssBANK1
  1167  000100                     __pbssBANK1:
  1168                           	opt callstack 0
  1169  000100                     _eusart1RxStatusBuffer:
  1170                           	opt callstack 0
  1171  000100                     	ds	8
  1172  000108                     _i2c2_object:
  1173                           	opt callstack 0
  1174  000108                     	ds	7
  1175  00010F                     _i2c1_object:
  1176                           	opt callstack 0
  1177  00010F                     	ds	7
  1178  000116                     _temperatureVal:
  1179                           	opt callstack 0
  1180  000116                     	ds	6
  1181  00011C                     _luxVal:
  1182                           	opt callstack 0
  1183  00011C                     	ds	6
  1184  000122                     _distance:
  1185                           	opt callstack 0
  1186  000122                     	ds	3
  1187  000125                     _finalLux:
  1188                           	opt callstack 0
  1189  000125                     	ds	3
  1190  000128                     _resistorVal:
  1191                           	opt callstack 0
  1192  000128                     	ds	3
  1193  00012B                     _voltageVal:
  1194                           	opt callstack 0
  1195  00012B                     	ds	3
  1196  00012E                     _adcValLight:
  1197                           	opt callstack 0
  1198  00012E                     	ds	3
  1199  000131                     _errno:
  1200                           	opt callstack 0
  1201  000131                     	ds	2
  1202  000133                     _tmr3Counter:
  1203                           	opt callstack 0
  1204  000133                     	ds	2
  1205  000135                     _time:
  1206                           	opt callstack 0
  1207  000135                     	ds	2
  1208  000137                     _stepperPosition:
  1209                           	opt callstack 0
  1210  000137                     	ds	2
  1211  000139                     I2C2_ISR@pi2c_buf_ptr:
  1212                           	opt callstack 0
  1213  000139                     	ds	2
  1214  00013B                     _p_i2c2_current:
  1215                           	opt callstack 0
  1216  00013B                     	ds	2
  1217  00013D                     _p_i2c2_trb_current:
  1218                           	opt callstack 0
  1219  00013D                     	ds	2
  1220  00013F                     I2C1_ISR@pi2c_buf_ptr:
  1221                           	opt callstack 0
  1222  00013F                     	ds	2
  1223  000141                     _p_i2c1_current:
  1224                           	opt callstack 0
  1225  000141                     	ds	2
  1226  000143                     _p_i2c1_trb_current:
  1227                           	opt callstack 0
  1228  000143                     	ds	2
  1229  000145                     _ipSetFlag:
  1230                           	opt callstack 0
  1231  000145                     	ds	2
  1232  000147                     __LCD_rows:
  1233                           	opt callstack 0
  1234  000147                     	ds	1
  1235  000148                     _checkTCP:
  1236                           	opt callstack 0
  1237  000148                     	ds	1
  1238  000149                     _autoMode:
  1239                           	opt callstack 0
  1240  000149                     	ds	1
  1241  00014A                     _sensorsRead:
  1242                           	opt callstack 0
  1243  00014A                     	ds	1
  1244  00014B                     _eusart1RxLastError:
  1245                           	opt callstack 0
  1246  00014B                     	ds	1
  1247  00014C                     I2C2_MasterWrite@trBlock:
  1248                           	opt callstack 0
  1249  00014C                     	ds	5
  1250  000151                     _i2c2_tr_queue:
  1251                           	opt callstack 0
  1252  000151                     	ds	5
  1253  000156                     I2C1_MasterRead@trBlock:
  1254                           	opt callstack 0
  1255  000156                     	ds	5
  1256  00015B                     I2C1_MasterWrite@trBlock:
  1257                           	opt callstack 0
  1258  00015B                     	ds	5
  1259  000160                     _i2c1_tr_queue:
  1260                           	opt callstack 0
  1261  000160                     	ds	5
  1262                           
  1263                           	psect	dataBANK1
  1264  000184                     __pdataBANK1:
  1265                           	opt callstack 0
  1266  000184                     _stepperCW:
  1267                           	opt callstack 0
  1268  000184                     	ds	1
  1269  000185                     _A:
  1270                           	opt callstack 0
  1271  000185                     	ds	3
  1272                           
  1273                           	psect	bssBANK2
  1274  000250                     __pbssBANK2:
  1275                           	opt callstack 0
  1276  000250                     _val:
  1277                           	opt callstack 0
  1278  000250                     	ds	30
  1279  00026E                     _valTemp:
  1280                           	opt callstack 0
  1281  00026E                     	ds	10
  1282  000278                     _eusart1TxBuffer:
  1283                           	opt callstack 0
  1284  000278                     	ds	8
  1285  000280                     _valDistance:
  1286                           	opt callstack 0
  1287  000280                     	ds	10
  1288  00028A                     I2C2_MasterRead@trBlock:
  1289                           	opt callstack 0
  1290  00028A                     	ds	5
  1291                           
  1292                           	psect	dataBANK2
  1293  000200                     __pdataBANK2:
  1294                           	opt callstack 0
  1295  000200                     printAuto@F6421:
  1296                           	opt callstack 0
  1297  000200                     	ds	16
  1298  000210                     printAuto@F6439:
  1299                           	opt callstack 0
  1300  000210                     	ds	15
  1301  00021F                     printAuto@F6434:
  1302                           	opt callstack 0
  1303  00021F                     	ds	15
  1304  00022E                     printAuto@F6430:
  1305                           	opt callstack 0
  1306  00022E                     	ds	15
  1307  00023D                     printAuto@F6413:
  1308                           	opt callstack 0
  1309  00023D                     	ds	13
  1310  00024A                     _C:
  1311                           	opt callstack 0
  1312  00024A                     	ds	3
  1313  00024D                     _B:
  1314                           	opt callstack 0
  1315  00024D                     	ds	3
  1316                           
  1317                           	psect	cstackBANK3
  1318  000300                     __pcstackBANK3:
  1319                           	opt callstack 0
  1320  000300                     printAuto@strTemp:
  1321                           	opt callstack 0
  1322                           
  1323                           ; 16 bytes @ 0x0
  1324  000300                     	ds	16
  1325  000310                     printAuto@str:
  1326                           	opt callstack 0
  1327                           
  1328                           ; 15 bytes @ 0x10
  1329  000310                     	ds	15
  1330  00031F                     printAuto@str_2667:
  1331                           	opt callstack 0
  1332                           
  1333                           ; 15 bytes @ 0x1F
  1334  00031F                     	ds	15
  1335  00032E                     printAuto@str_2672:
  1336                           	opt callstack 0
  1337                           
  1338                           ; 15 bytes @ 0x2E
  1339  00032E                     	ds	15
  1340  00033D                     printAuto@strLux:
  1341                           	opt callstack 0
  1342                           
  1343                           ; 13 bytes @ 0x3D
  1344  00033D                     	ds	13
  1345  00034A                     printAuto@val:
  1346                           	opt callstack 0
  1347                           
  1348                           ; 30 bytes @ 0x4A
  1349  00034A                     	ds	30
  1350  000368                     printAuto@tempLux:
  1351                           	opt callstack 0
  1352                           
  1353                           ; 3 bytes @ 0x68
  1354  000368                     	ds	3
  1355  00036B                     printAuto@adcValTemp:
  1356                           	opt callstack 0
  1357                           
  1358                           ; 3 bytes @ 0x6B
  1359  00036B                     	ds	3
  1360  00036E                     _printAuto$3994:
  1361                           	opt callstack 0
  1362                           
  1363                           ; 3 bytes @ 0x6E
  1364  00036E                     	ds	3
  1365  000371                     _printAuto$3995:
  1366                           	opt callstack 0
  1367                           
  1368                           ; 3 bytes @ 0x71
  1369  000371                     	ds	3
  1370  000374                     _printAuto$3996:
  1371                           	opt callstack 0
  1372                           
  1373                           ; 3 bytes @ 0x74
  1374  000374                     	ds	3
  1375  000377                     _printAuto$3997:
  1376                           	opt callstack 0
  1377                           
  1378                           ; 3 bytes @ 0x77
  1379  000377                     	ds	3
  1380  00037A                     _printAuto$3998:
  1381                           	opt callstack 0
  1382                           
  1383                           ; 3 bytes @ 0x7A
  1384  00037A                     	ds	3
  1385  00037D                     _printAuto$3999:
  1386                           	opt callstack 0
  1387                           
  1388                           ; 3 bytes @ 0x7D
  1389  00037D                     	ds	3
  1390  000380                     printAuto@valTemp:
  1391                           	opt callstack 0
  1392                           
  1393                           ; 3 bytes @ 0x80
  1394  000380                     	ds	3
  1395  000383                     _printAuto$4000:
  1396                           	opt callstack 0
  1397                           
  1398                           ; 3 bytes @ 0x83
  1399  000383                     	ds	3
  1400  000386                     printAuto@v_o1:
  1401                           	opt callstack 0
  1402                           
  1403                           ; 3 bytes @ 0x86
  1404  000386                     	ds	3
  1405  000389                     printAuto@R1:
  1406                           	opt callstack 0
  1407                           
  1408                           ; 3 bytes @ 0x89
  1409  000389                     	ds	3
  1410  00038C                     printAuto@nearFan:
  1411                           	opt callstack 0
  1412                           
  1413                           ; 1 bytes @ 0x8C
  1414  00038C                     	ds	1
  1415  00038D                     _printAuto$3993:
  1416                           	opt callstack 0
  1417                           
  1418                           ; 2 bytes @ 0x8D
  1419  00038D                     	ds	2
  1420  00038F                     printAuto@finalTemperature:
  1421                           	opt callstack 0
  1422                           
  1423                           ; 3 bytes @ 0x8F
  1424  00038F                     	ds	3
  1425                           
  1426                           	psect	cstackBANK1
  1427  000165                     __pcstackBANK1:
  1428                           	opt callstack 0
  1429  000165                     printf@ap:
  1430                           	opt callstack 0
  1431                           
  1432                           ; 2 bytes @ 0x0
  1433  000165                     	ds	2
  1434  000167                     printf@pb:
  1435                           	opt callstack 0
  1436                           
  1437                           ; 4 bytes @ 0x2
  1438  000167                     	ds	4
  1439  00016B                     sendData@temp:
  1440                           	opt callstack 0
  1441                           
  1442                           ; 3 bytes @ 0x6
  1443  00016B                     	ds	3
  1444  00016E                     sendData@lux:
  1445                           	opt callstack 0
  1446                           
  1447                           ; 2 bytes @ 0x9
  1448  00016E                     	ds	2
  1449  000170                     sendData@distanceC:
  1450                           	opt callstack 0
  1451                           
  1452                           ; 3 bytes @ 0xB
  1453  000170                     	ds	3
  1454  000173                     sendData@distanceL:
  1455                           	opt callstack 0
  1456                           
  1457                           ; 3 bytes @ 0xE
  1458  000173                     	ds	3
  1459  000176                     sendData@distanceR:
  1460                           	opt callstack 0
  1461                           
  1462                           ; 3 bytes @ 0x11
  1463  000176                     	ds	3
  1464  000179                     ??_printAuto:
  1465                           
  1466                           ; 1 bytes @ 0x14
  1467  000179                     	ds	2
  1468  00017B                     ??_main:
  1469                           
  1470                           ; 1 bytes @ 0x16
  1471  00017B                     	ds	2
  1472  00017D                     _main$3992:
  1473                           	opt callstack 0
  1474                           
  1475                           ; 2 bytes @ 0x18
  1476  00017D                     	ds	2
  1477                           
  1478                           	psect	cstackBANK0
  1479  000060                     __pcstackBANK0:
  1480                           	opt callstack 0
  1481  000060                     ?___ftadd:
  1482                           	opt callstack 0
  1483  000060                     LCD_send_string@str:
  1484                           	opt callstack 0
  1485  000060                     ___ftadd@f1:
  1486                           	opt callstack 0
  1487                           
  1488                           ; 3 bytes @ 0x0
  1489  000060                     	ds	2
  1490  000062                     LCD_send_string@line:
  1491                           	opt callstack 0
  1492                           
  1493                           ; 1 bytes @ 0x2
  1494  000062                     	ds	1
  1495  000063                     ??_LCD_send_string:
  1496  000063                     ___ftadd@f2:
  1497                           	opt callstack 0
  1498                           
  1499                           ; 3 bytes @ 0x3
  1500  000063                     	ds	3
  1501  000066                     ??___ftadd:
  1502  000066                     LCD_send_string@col:
  1503                           	opt callstack 0
  1504                           
  1505                           ; 1 bytes @ 0x6
  1506  000066                     	ds	1
  1507  000067                     LCD_send_string@delay:
  1508                           	opt callstack 0
  1509                           
  1510                           ; 2 bytes @ 0x7
  1511  000067                     	ds	2
  1512  000069                     LCD_send_string@prefix:
  1513                           	opt callstack 0
  1514  000069                     ___ftadd@sign:
  1515                           	opt callstack 0
  1516                           
  1517                           ; 1 bytes @ 0x9
  1518  000069                     	ds	1
  1519  00006A                     ___ftadd@exp2:
  1520                           	opt callstack 0
  1521  00006A                     LCD_send_string@i:
  1522                           	opt callstack 0
  1523                           
  1524                           ; 2 bytes @ 0xA
  1525  00006A                     	ds	1
  1526  00006B                     ___ftadd@exp1:
  1527                           	opt callstack 0
  1528                           
  1529                           ; 1 bytes @ 0xB
  1530  00006B                     	ds	1
  1531  00006C                     ??_azoTouchPollManual:
  1532  00006C                     ??_azoTouchPollAuto:
  1533  00006C                     ?___ftsub:
  1534                           	opt callstack 0
  1535  00006C                     ___ftsub@f1:
  1536                           	opt callstack 0
  1537                           
  1538                           ; 3 bytes @ 0xC
  1539  00006C                     	ds	2
  1540  00006E                     azoTouchPollManual@i:
  1541                           	opt callstack 0
  1542                           
  1543                           ; 2 bytes @ 0xE
  1544  00006E                     	ds	1
  1545  00006F                     ___ftsub@f2:
  1546                           	opt callstack 0
  1547                           
  1548                           ; 3 bytes @ 0xF
  1549  00006F                     	ds	1
  1550  000070                     azoTouchPollManual@i_2622:
  1551                           	opt callstack 0
  1552                           
  1553                           ; 2 bytes @ 0x10
  1554  000070                     	ds	2
  1555  000072                     ??_printOn:
  1556  000072                     ?___ftdiv:
  1557                           	opt callstack 0
  1558  000072                     ___ftdiv@f1:
  1559                           	opt callstack 0
  1560                           
  1561                           ; 3 bytes @ 0x12
  1562  000072                     	ds	3
  1563  000075                     ___ftdiv@f2:
  1564                           	opt callstack 0
  1565                           
  1566                           ; 3 bytes @ 0x15
  1567  000075                     	ds	3
  1568  000078                     ??___ftdiv:
  1569                           
  1570                           ; 1 bytes @ 0x18
  1571  000078                     	ds	3
  1572  00007B                     ___ftdiv@cntr:
  1573                           	opt callstack 0
  1574                           
  1575                           ; 1 bytes @ 0x1B
  1576  00007B                     	ds	1
  1577  00007C                     ___ftdiv@f3:
  1578                           	opt callstack 0
  1579                           
  1580                           ; 3 bytes @ 0x1C
  1581  00007C                     	ds	3
  1582  00007F                     ___ftdiv@exp:
  1583                           	opt callstack 0
  1584                           
  1585                           ; 1 bytes @ 0x1F
  1586  00007F                     	ds	1
  1587  000080                     ___ftdiv@sign:
  1588                           	opt callstack 0
  1589                           
  1590                           ; 1 bytes @ 0x20
  1591  000080                     	ds	1
  1592  000081                     ?___ftmul:
  1593                           	opt callstack 0
  1594  000081                     ___ftmul@f1:
  1595                           	opt callstack 0
  1596                           
  1597                           ; 3 bytes @ 0x21
  1598  000081                     	ds	3
  1599  000084                     ___ftmul@f2:
  1600                           	opt callstack 0
  1601                           
  1602                           ; 3 bytes @ 0x24
  1603  000084                     	ds	3
  1604  000087                     ??___ftmul:
  1605                           
  1606                           ; 1 bytes @ 0x27
  1607  000087                     	ds	3
  1608  00008A                     ___ftmul@exp:
  1609                           	opt callstack 0
  1610                           
  1611                           ; 1 bytes @ 0x2A
  1612  00008A                     	ds	1
  1613  00008B                     ___ftmul@f3_as_product:
  1614                           	opt callstack 0
  1615                           
  1616                           ; 3 bytes @ 0x2B
  1617  00008B                     	ds	3
  1618  00008E                     ___ftmul@cntr:
  1619                           	opt callstack 0
  1620                           
  1621                           ; 1 bytes @ 0x2E
  1622  00008E                     	ds	1
  1623  00008F                     ___ftmul@sign:
  1624                           	opt callstack 0
  1625                           
  1626                           ; 1 bytes @ 0x2F
  1627  00008F                     	ds	1
  1628  000090                     ?_eval_poly:
  1629                           	opt callstack 0
  1630  000090                     ?_fround:
  1631                           	opt callstack 0
  1632  000090                     ?_scale:
  1633                           	opt callstack 0
  1634  000090                     eval_poly@x:
  1635                           	opt callstack 0
  1636                           
  1637                           ; 3 bytes @ 0x30
  1638  000090                     	ds	3
  1639  000093                     eval_poly@d:
  1640                           	opt callstack 0
  1641  000093                     _fround$4002:
  1642                           	opt callstack 0
  1643  000093                     _scale$4003:
  1644                           	opt callstack 0
  1645                           
  1646                           ; 3 bytes @ 0x33
  1647  000093                     	ds	2
  1648  000095                     eval_poly@n:
  1649                           	opt callstack 0
  1650                           
  1651                           ; 2 bytes @ 0x35
  1652  000095                     	ds	1
  1653  000096                     scale@scl:
  1654                           	opt callstack 0
  1655  000096                     _fround$4001:
  1656                           	opt callstack 0
  1657                           
  1658                           ; 3 bytes @ 0x36
  1659  000096                     	ds	1
  1660  000097                     ??_eval_poly:
  1661  000097                     ?___fttol:
  1662                           	opt callstack 0
  1663  000097                     ___fttol@f1:
  1664                           	opt callstack 0
  1665                           
  1666                           ; 3 bytes @ 0x37
  1667  000097                     	ds	2
  1668  000099                     fround@prec:
  1669                           	opt callstack 0
  1670  000099                     eval_poly@res:
  1671                           	opt callstack 0
  1672                           
  1673                           ; 3 bytes @ 0x39
  1674  000099                     	ds	2
  1675  00009B                     ??___fttol:
  1676                           
  1677                           ; 1 bytes @ 0x3B
  1678  00009B                     	ds	1
  1679  00009C                     ?_log:
  1680                           	opt callstack 0
  1681  00009C                     ?_ldexp:
  1682                           	opt callstack 0
  1683  00009C                     log@x:
  1684                           	opt callstack 0
  1685  00009C                     ldexp@value:
  1686                           	opt callstack 0
  1687                           
  1688                           ; 3 bytes @ 0x3C
  1689  00009C                     	ds	3
  1690  00009F                     log@exponent:
  1691                           	opt callstack 0
  1692  00009F                     ldexp@newexp:
  1693                           	opt callstack 0
  1694                           
  1695                           ; 2 bytes @ 0x3F
  1696  00009F                     	ds	1
  1697  0000A0                     ___fttol@sign1:
  1698                           	opt callstack 0
  1699                           
  1700                           ; 1 bytes @ 0x40
  1701  0000A0                     	ds	1
  1702  0000A1                     ??_ldexp:
  1703  0000A1                     ___fttol@lval:
  1704                           	opt callstack 0
  1705                           
  1706                           ; 4 bytes @ 0x41
  1707  0000A1                     	ds	4
  1708  0000A5                     ___fttol@exp1:
  1709                           	opt callstack 0
  1710                           
  1711                           ; 1 bytes @ 0x45
  1712  0000A5                     	ds	1
  1713  0000A6                     ?__doprnt:
  1714                           	opt callstack 0
  1715  0000A6                     ?___altoft:
  1716                           	opt callstack 0
  1717  0000A6                     __doprnt@pb:
  1718                           	opt callstack 0
  1719  0000A6                     ___altoft@c:
  1720                           	opt callstack 0
  1721                           
  1722                           ; 4 bytes @ 0x46
  1723  0000A6                     	ds	2
  1724  0000A8                     __doprnt@f:
  1725                           	opt callstack 0
  1726                           
  1727                           ; 2 bytes @ 0x48
  1728  0000A8                     	ds	2
  1729  0000AA                     ??___altoft:
  1730  0000AA                     __doprnt@ap:
  1731                           	opt callstack 0
  1732                           
  1733                           ; 2 bytes @ 0x4A
  1734  0000AA                     	ds	2
  1735  0000AC                     ??__doprnt:
  1736                           
  1737                           ; 1 bytes @ 0x4C
  1738  0000AC                     	ds	2
  1739  0000AE                     ___altoft@exp:
  1740                           	opt callstack 0
  1741                           
  1742                           ; 1 bytes @ 0x4E
  1743  0000AE                     	ds	1
  1744  0000AF                     ___altoft@sign:
  1745                           	opt callstack 0
  1746                           
  1747                           ; 1 bytes @ 0x4F
  1748  0000AF                     	ds	1
  1749  0000B0                     ?_floor:
  1750                           	opt callstack 0
  1751  0000B0                     floor@x:
  1752                           	opt callstack 0
  1753                           
  1754                           ; 3 bytes @ 0x50
  1755  0000B0                     	ds	2
  1756  0000B2                     __doprnt$4004:
  1757                           	opt callstack 0
  1758                           
  1759                           ; 3 bytes @ 0x52
  1760  0000B2                     	ds	1
  1761  0000B3                     floor@i:
  1762                           	opt callstack 0
  1763                           
  1764                           ; 3 bytes @ 0x53
  1765  0000B3                     	ds	2
  1766  0000B5                     __doprnt@val:
  1767                           	opt callstack 0
  1768                           
  1769                           ; 4 bytes @ 0x55
  1770  0000B5                     	ds	1
  1771  0000B6                     floor@expon:
  1772                           	opt callstack 0
  1773                           
  1774                           ; 2 bytes @ 0x56
  1775  0000B6                     	ds	2
  1776  0000B8                     ?_exp:
  1777                           	opt callstack 0
  1778  0000B8                     exp@x:
  1779                           	opt callstack 0
  1780                           
  1781                           ; 3 bytes @ 0x58
  1782  0000B8                     	ds	1
  1783  0000B9                     __doprnt@eexp:
  1784                           	opt callstack 0
  1785                           
  1786                           ; 2 bytes @ 0x59
  1787  0000B9                     	ds	2
  1788  0000BB                     __doprnt@flag:
  1789                           	opt callstack 0
  1790  0000BB                     _exp$4008:
  1791                           	opt callstack 0
  1792                           
  1793                           ; 3 bytes @ 0x5B
  1794  0000BB                     	ds	2
  1795  0000BD                     __doprnt@tmpval:
  1796                           	opt callstack 0
  1797                           
  1798                           ; 4 bytes @ 0x5D
  1799  0000BD                     	ds	1
  1800  0000BE                     exp@exponent:
  1801                           	opt callstack 0
  1802                           
  1803                           ; 2 bytes @ 0x5E
  1804  0000BE                     	ds	2
  1805  0000C0                     exp@sign:
  1806                           	opt callstack 0
  1807                           
  1808                           ; 1 bytes @ 0x60
  1809  0000C0                     	ds	1
  1810  0000C1                     ?_pow:
  1811                           	opt callstack 0
  1812  0000C1                     __doprnt@width:
  1813                           	opt callstack 0
  1814  0000C1                     pow@x:
  1815                           	opt callstack 0
  1816                           
  1817                           ; 3 bytes @ 0x61
  1818  0000C1                     	ds	2
  1819  0000C3                     __doprnt@fval:
  1820                           	opt callstack 0
  1821                           
  1822                           ; 3 bytes @ 0x63
  1823  0000C3                     	ds	1
  1824  0000C4                     pow@y:
  1825                           	opt callstack 0
  1826                           
  1827                           ; 3 bytes @ 0x64
  1828  0000C4                     	ds	2
  1829  0000C6                     __doprnt@prec:
  1830                           	opt callstack 0
  1831                           
  1832                           ; 2 bytes @ 0x66
  1833  0000C6                     	ds	1
  1834  0000C7                     _pow$4006:
  1835                           	opt callstack 0
  1836                           
  1837                           ; 3 bytes @ 0x67
  1838  0000C7                     	ds	1
  1839  0000C8                     __doprnt@c:
  1840                           	opt callstack 0
  1841                           
  1842                           ; 1 bytes @ 0x68
  1843  0000C8                     	ds	1
  1844  0000C9                     ?_printf:
  1845                           	opt callstack 0
  1846  0000C9                     ?_sprintf:
  1847                           	opt callstack 0
  1848  0000C9                     printf@f:
  1849                           	opt callstack 0
  1850  0000C9                     sprintf@wh:
  1851                           	opt callstack 0
  1852                           
  1853                           ; 2 bytes @ 0x69
  1854  0000C9                     	ds	1
  1855  0000CA                     _pow$4007:
  1856                           	opt callstack 0
  1857                           
  1858                           ; 3 bytes @ 0x6A
  1859  0000CA                     	ds	1
  1860  0000CB                     sprintf@f:
  1861                           	opt callstack 0
  1862                           
  1863                           ; 2 bytes @ 0x6B
  1864  0000CB                     	ds	2
  1865  0000CD                     pow@sign:
  1866                           	opt callstack 0
  1867                           
  1868                           ; 1 bytes @ 0x6D
  1869  0000CD                     	ds	1
  1870  0000CE                     pow@yi:
  1871                           	opt callstack 0
  1872                           
  1873                           ; 4 bytes @ 0x6E
  1874  0000CE                     	ds	2
  1875  0000D0                     sprintf@ap:
  1876                           	opt callstack 0
  1877                           
  1878                           ; 2 bytes @ 0x70
  1879  0000D0                     	ds	2
  1880  0000D2                     sprintf@pb:
  1881                           	opt callstack 0
  1882                           
  1883                           ; 4 bytes @ 0x72
  1884  0000D2                     	ds	7
  1885  0000D9                     ??_initialiseTCP:
  1886  0000D9                     ??_sendData:
  1887                           
  1888                           ; 1 bytes @ 0x79
  1889  0000D9                     	ds	2
  1890                           
  1891                           	psect	cstackCOMRAM
  1892  000001                     __pcstackCOMRAM:
  1893                           	opt callstack 0
  1894  000001                     ??_I2C1_Stop:
  1895  000001                     ??_I2C2_Stop:
  1896  000001                     __step_@stepDirection:
  1897                           	opt callstack 0
  1898  000001                     __stepReverse_@stepDirection:
  1899                           	opt callstack 0
  1900  000001                     TMR3_WriteTimer@timerVal:
  1901                           	opt callstack 0
  1902  000001                     i2PWM5_LoadDutyValue@dutyValue:
  1903                           	opt callstack 0
  1904                           
  1905                           ; 2 bytes @ 0x0
  1906  000001                     	ds	2
  1907  000003                     ??i2_PWM5_LoadDutyValue:
  1908  000003                     I2C1_Stop@completion_code:
  1909                           	opt callstack 0
  1910  000003                     I2C2_Stop@completion_code:
  1911                           	opt callstack 0
  1912                           
  1913                           ; 1 bytes @ 0x2
  1914  000003                     	ds	1
  1915  000004                     ??_I2C1_ISR:
  1916  000004                     ??_I2C2_ISR:
  1917                           
  1918                           ; 1 bytes @ 0x3
  1919  000004                     	ds	1
  1920  000005                     ??_EUSART1_RxDataHandler:
  1921                           
  1922                           ; 1 bytes @ 0x4
  1923  000005                     	ds	1
  1924  000006                     EUSART1_RxDataHandler@i:
  1925                           	opt callstack 0
  1926                           
  1927                           ; 2 bytes @ 0x5
  1928  000006                     	ds	2
  1929  000008                     EUSART1_RxDataHandler@i_530:
  1930                           	opt callstack 0
  1931                           
  1932                           ; 2 bytes @ 0x7
  1933  000008                     	ds	2
  1934  00000A                     EUSART1_RxDataHandler@i_531:
  1935                           	opt callstack 0
  1936                           
  1937                           ; 2 bytes @ 0x9
  1938  00000A                     	ds	2
  1939  00000C                     EUSART1_RxDataHandler@i_532:
  1940                           	opt callstack 0
  1941                           
  1942                           ; 2 bytes @ 0xB
  1943  00000C                     	ds	2
  1944  00000E                     EUSART1_RxDataHandler@i_534:
  1945                           	opt callstack 0
  1946                           
  1947                           ; 2 bytes @ 0xD
  1948  00000E                     	ds	2
  1949  000010                     EUSART1_RxDataHandler@i_535:
  1950                           	opt callstack 0
  1951                           
  1952                           ; 2 bytes @ 0xF
  1953  000010                     	ds	2
  1954  000012                     EUSART1_RxDataHandler@i_536:
  1955                           	opt callstack 0
  1956                           
  1957                           ; 2 bytes @ 0x11
  1958  000012                     	ds	2
  1959  000014                     EUSART1_RxDataHandler@i_537:
  1960                           	opt callstack 0
  1961                           
  1962                           ; 2 bytes @ 0x13
  1963  000014                     	ds	2
  1964  000016                     ??_INTERRUPT_InterruptManager:
  1965                           
  1966                           ; 1 bytes @ 0x15
  1967  000016                     	ds	4
  1968  00001A                     ??_isdigit:
  1969  00001A                     ??_I2C_wait:
  1970  00001A                     ?_i2cRead:
  1971                           	opt callstack 0
  1972  00001A                     ?_ADC_GetConversion:
  1973                           	opt callstack 0
  1974  00001A                     ?_EUSART1_GetUnitTestCounter:
  1975                           	opt callstack 0
  1976  00001A                     ?___awmod:
  1977                           	opt callstack 0
  1978  00001A                     ?___lwmod:
  1979                           	opt callstack 0
  1980  00001A                     ?___ftpack:
  1981                           	opt callstack 0
  1982  00001A                     ?_frexp:
  1983                           	opt callstack 0
  1984  00001A                     ?___ftneg:
  1985                           	opt callstack 0
  1986  00001A                     ?__tdiv_to_l_:
  1987                           	opt callstack 0
  1988  00001A                     ?__div_to_l_:
  1989                           	opt callstack 0
  1990  00001A                     ?___lldiv:
  1991                           	opt callstack 0
  1992  00001A                     ?___llmod:
  1993                           	opt callstack 0
  1994  00001A                     EUSART1_Write@txData:
  1995                           	opt callstack 0
  1996  00001A                     EUSART1_SetFramingErrorHandler@interruptHandler:
  1997                           	opt callstack 0
  1998  00001A                     EUSART1_SetOverrunErrorHandler@interruptHandler:
  1999                           	opt callstack 0
  2000  00001A                     EUSART1_SetErrorHandler@interruptHandler:
  2001                           	opt callstack 0
  2002  00001A                     EUSART1_SetTxInterruptHandler@interruptHandler:
  2003                           	opt callstack 0
  2004  00001A                     EUSART1_SetRxInterruptHandler@interruptHandler:
  2005                           	opt callstack 0
  2006  00001A                     PWM5_LoadDutyValue@dutyValue:
  2007                           	opt callstack 0
  2008  00001A                     i2cRead@i2cAddress:
  2009                           	opt callstack 0
  2010  00001A                     __stepMotor_@stepDirection:
  2011                           	opt callstack 0
  2012  00001A                     __stepMotorReverse_@stepDirection:
  2013                           	opt callstack 0
  2014  00001A                     TMR3_SetInterruptHandler@InterruptHandler:
  2015                           	opt callstack 0
  2016  00001A                     ___awmod@dividend:
  2017                           	opt callstack 0
  2018  00001A                     ___lwmod@dividend:
  2019                           	opt callstack 0
  2020  00001A                     strcat@to:
  2021                           	opt callstack 0
  2022  00001A                     __div_to_l_@f1:
  2023                           	opt callstack 0
  2024  00001A                     ___ftpack@arg:
  2025                           	opt callstack 0
  2026  00001A                     __tdiv_to_l_@f1:
  2027                           	opt callstack 0
  2028  00001A                     ___ftge@ff1:
  2029                           	opt callstack 0
  2030  00001A                     ___ftneg@f1:
  2031                           	opt callstack 0
  2032  00001A                     frexp@value:
  2033                           	opt callstack 0
  2034  00001A                     ___lldiv@dividend:
  2035                           	opt callstack 0
  2036  00001A                     ___llmod@dividend:
  2037                           	opt callstack 0
  2038                           
  2039                           ; 4 bytes @ 0x19
  2040  00001A                     	ds	1
  2041  00001B                     putch@txData:
  2042                           	opt callstack 0
  2043  00001B                     I2C_write@data:
  2044                           	opt callstack 0
  2045  00001B                     _isdigit$3515:
  2046                           	opt callstack 0
  2047                           
  2048                           ; 1 bytes @ 0x1A
  2049  00001B                     	ds	1
  2050  00001C                     ??_PWM5_LoadDutyValue:
  2051  00001C                     ??_ADC_GetConversion:
  2052  00001C                     I2C_select@mode:
  2053                           	opt callstack 0
  2054  00001C                     isdigit@c:
  2055                           	opt callstack 0
  2056  00001C                     i2cRead@registerAdress:
  2057                           	opt callstack 0
  2058  00001C                     ___awmod@divisor:
  2059                           	opt callstack 0
  2060  00001C                     ___lwmod@divisor:
  2061                           	opt callstack 0
  2062  00001C                     strcat@from:
  2063                           	opt callstack 0
  2064                           
  2065                           ; 2 bytes @ 0x1B
  2066  00001C                     	ds	1
  2067  00001D                     I2C_select@address:
  2068                           	opt callstack 0
  2069  00001D                     ___ftpack@exp:
  2070                           	opt callstack 0
  2071  00001D                     frexp@eptr:
  2072                           	opt callstack 0
  2073  00001D                     __div_to_l_@f2:
  2074                           	opt callstack 0
  2075  00001D                     __tdiv_to_l_@f2:
  2076                           	opt callstack 0
  2077  00001D                     ___ftge@ff2:
  2078                           	opt callstack 0
  2079                           
  2080                           ; 3 bytes @ 0x1C
  2081  00001D                     	ds	1
  2082  00001E                     ADC_GetConversion@channel:
  2083                           	opt callstack 0
  2084  00001E                     LCD_backlight@on:
  2085                           	opt callstack 0
  2086  00001E                     LCD_send_cmd@command:
  2087                           	opt callstack 0
  2088  00001E                     LCD_send_data@data:
  2089                           	opt callstack 0
  2090  00001E                     ___awmod@counter:
  2091                           	opt callstack 0
  2092  00001E                     ___ftpack@sign:
  2093                           	opt callstack 0
  2094  00001E                     ___lwmod@counter:
  2095                           	opt callstack 0
  2096  00001E                     dcMotor@speeed:
  2097                           	opt callstack 0
  2098  00001E                     strcat@cp:
  2099                           	opt callstack 0
  2100  00001E                     ___lldiv@divisor:
  2101                           	opt callstack 0
  2102  00001E                     ___llmod@divisor:
  2103                           	opt callstack 0
  2104                           
  2105                           ; 4 bytes @ 0x1D
  2106  00001E                     	ds	1
  2107  00001F                     ??___ftpack:
  2108  00001F                     ??_frexp:
  2109  00001F                     ?___lwdiv:
  2110                           	opt callstack 0
  2111  00001F                     LCD_send_cmd@nibble_lower:
  2112                           	opt callstack 0
  2113  00001F                     LCD_send_data@nibble_lower:
  2114                           	opt callstack 0
  2115  00001F                     ___awmod@sign:
  2116                           	opt callstack 0
  2117  00001F                     _LCD_backlight$2792:
  2118                           	opt callstack 0
  2119  00001F                     ___lwdiv@dividend:
  2120                           	opt callstack 0
  2121                           
  2122                           ; 2 bytes @ 0x1E
  2123  00001F                     	ds	1
  2124  000020                     ??__tdiv_to_l_:
  2125  000020                     ??___ftge:
  2126  000020                     ?___awdiv:
  2127                           	opt callstack 0
  2128  000020                     LCD_send_cmd@nibble_upper:
  2129                           	opt callstack 0
  2130  000020                     LCD_send_data@nibble_upper:
  2131                           	opt callstack 0
  2132  000020                     ___awdiv@dividend:
  2133                           	opt callstack 0
  2134  000020                     __div_to_l_@quot:
  2135                           	opt callstack 0
  2136                           
  2137                           ; 4 bytes @ 0x1F
  2138  000020                     	ds	1
  2139  000021                     ??_LCD_clear:
  2140  000021                     LCD_init@cols:
  2141                           	opt callstack 0
  2142  000021                     LCD_select_line@line:
  2143                           	opt callstack 0
  2144  000021                     ___lwdiv@divisor:
  2145                           	opt callstack 0
  2146                           
  2147                           ; 2 bytes @ 0x20
  2148  000021                     	ds	1
  2149  000022                     ?___awtoft:
  2150                           	opt callstack 0
  2151  000022                     ?___lltoft:
  2152                           	opt callstack 0
  2153  000022                     ?___lwtoft:
  2154                           	opt callstack 0
  2155  000022                     LCD_init@rows:
  2156                           	opt callstack 0
  2157  000022                     ___llmod@counter:
  2158                           	opt callstack 0
  2159  000022                     ___awdiv@divisor:
  2160                           	opt callstack 0
  2161  000022                     ___awtoft@c:
  2162                           	opt callstack 0
  2163  000022                     ___lwtoft@c:
  2164                           	opt callstack 0
  2165  000022                     ___lldiv@quotient:
  2166                           	opt callstack 0
  2167  000022                     ___lltoft@c:
  2168                           	opt callstack 0
  2169                           
  2170                           ; 4 bytes @ 0x21
  2171  000022                     	ds	1
  2172  000023                     ??_LCD_init:
  2173  000023                     ___lwdiv@counter:
  2174                           	opt callstack 0
  2175  000023                     __tdiv_to_l_@quot:
  2176                           	opt callstack 0
  2177                           
  2178                           ; 4 bytes @ 0x22
  2179  000023                     	ds	1
  2180  000024                     ___awdiv@counter:
  2181                           	opt callstack 0
  2182  000024                     __div_to_l_@cntr:
  2183                           	opt callstack 0
  2184  000024                     ___lwdiv@quotient:
  2185                           	opt callstack 0
  2186                           
  2187                           ; 2 bytes @ 0x23
  2188  000024                     	ds	1
  2189  000025                     LCD_init@address:
  2190                           	opt callstack 0
  2191  000025                     ___awdiv@sign:
  2192                           	opt callstack 0
  2193  000025                     ___awtoft@sign:
  2194                           	opt callstack 0
  2195  000025                     __div_to_l_@exp1:
  2196                           	opt callstack 0
  2197                           
  2198                           ; 1 bytes @ 0x24
  2199  000025                     	ds	1
  2200  000026                     ??___lltoft:
  2201  000026                     ?___wmul:
  2202                           	opt callstack 0
  2203  000026                     ___lldiv@counter:
  2204                           	opt callstack 0
  2205  000026                     ___wmul@multiplier:
  2206                           	opt callstack 0
  2207  000026                     ___awdiv@quotient:
  2208                           	opt callstack 0
  2209                           
  2210                           ; 2 bytes @ 0x25
  2211  000026                     	ds	1
  2212  000027                     __tdiv_to_l_@cntr:
  2213                           	opt callstack 0
  2214                           
  2215                           ; 1 bytes @ 0x26
  2216  000027                     	ds	1
  2217  000028                     __tdiv_to_l_@exp1:
  2218                           	opt callstack 0
  2219  000028                     ___wmul@multiplicand:
  2220                           	opt callstack 0
  2221                           
  2222                           ; 2 bytes @ 0x27
  2223  000028                     	ds	2
  2224  00002A                     ___lltoft@exp:
  2225                           	opt callstack 0
  2226  00002A                     ___wmul@product:
  2227                           	opt callstack 0
  2228                           
  2229                           ; 2 bytes @ 0x29
  2230  00002A                     	ds	2
  2231  00002C                     
  2232                           ; 1 bytes @ 0x2B
  2233 ;;
  2234 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2235 ;;
  2236 ;; *************** function _main *****************
  2237 ;; Defined at:
  2238 ;;		line 114 in file "main.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;		None
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;		None
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2252 ;;      Params:         0       0       0       0       0       0       0
  2253 ;;      Locals:         0       0       2       0       0       0       0
  2254 ;;      Temps:          0       0       2       0       0       0       0
  2255 ;;      Totals:         0       0       4       0       0       0       0
  2256 ;;Total ram usage:        4 bytes
  2257 ;; Hardware stack levels required when called:   13
  2258 ;; This function calls:
  2259 ;;		_ADC_Initialize
  2260 ;;		_EUSART1_GetSensorsBool
  2261 ;;		_I2C2_Initialize
  2262 ;;		_LCD_backlight
  2263 ;;		_LCD_clear
  2264 ;;		_LCD_init
  2265 ;;		_LCD_send_string
  2266 ;;		_PWM5_LoadDutyValue
  2267 ;;		_SYSTEM_Initialize
  2268 ;;		_TMR3_StopTimer
  2269 ;;		___fttol
  2270 ;;		_dcMotor
  2271 ;;		_i2cRead
  2272 ;;		_initialiseTCP
  2273 ;;		_printAuto
  2274 ;;		_printOn
  2275 ;;		_printf
  2276 ;;		_sendData
  2277 ;; This function is called by:
  2278 ;;		Startup code after reset
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text0
  2283  0030C2                     __ptext0:
  2284                           	opt callstack 0
  2285  0030C2                     _main:
  2286                           	opt callstack 18
  2287                           
  2288                           ;main.c: 117: SYSTEM_Initialize();
  2289                           
  2290                           ;incstack = 0
  2291  0030C2  EC2E  F02C         	call	_SYSTEM_Initialize	;wreg free
  2292                           
  2293                           ;main.c: 119: ADC_Initialize();
  2294  0030C6  EC01  F02D         	call	_ADC_Initialize	;wreg free
  2295                           
  2296                           ;main.c: 120: I2C2_Initialize();
  2297  0030CA  EC9A  F02B         	call	_I2C2_Initialize	;wreg free
  2298                           
  2299                           ;main.c: 122: PWM5_LoadDutyValue(1023);
  2300  0030CE  0E03               	movlw	3
  2301  0030D0  6E1B               	movwf	PWM5_LoadDutyValue@dutyValue+1,c
  2302  0030D2  681A               	setf	PWM5_LoadDutyValue@dutyValue,c
  2303  0030D4  ECCE  F02B         	call	_PWM5_LoadDutyValue	;wreg free
  2304                           
  2305                           ;main.c: 123: TMR3_StopTimer();
  2306  0030D8  EC93  F02D         	call	_TMR3_StopTimer	;wreg free
  2307                           
  2308                           ;main.c: 125: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2309  0030DC  0E0B               	movlw	11
  2310  0030DE  0101               	movlb	1	; () banked
  2311  0030E0  6F7C               	movwf	(??_main+1)& (0+255),b
  2312  0030E2  0E26               	movlw	38
  2313  0030E4  6F7B               	movwf	??_main& (0+255),b
  2314  0030E6  0E5D               	movlw	93
  2315  0030E8                     u13927:
  2316  0030E8  2EE8               	decfsz	wreg,f,c
  2317  0030EA  D7FE               	bra	u13927
  2318  0030EC  2F7B               	decfsz	??_main& (0+255),f,b
  2319  0030EE  D7FC               	bra	u13927
  2320  0030F0  2F7C               	decfsz	(??_main+1)& (0+255),f,b
  2321  0030F2  D7FA               	bra	u13927
  2322  0030F4  D000               	nop2	
  2323                           
  2324                           ;main.c: 126: LCD_init(0x27, 16, 2);
  2325  0030F6  0E10               	movlw	16
  2326  0030F8  6E21               	movwf	LCD_init@cols,c
  2327  0030FA  0E02               	movlw	2
  2328  0030FC  6E22               	movwf	LCD_init@rows,c
  2329  0030FE  0E27               	movlw	39
  2330  003100  EC04  F028         	call	_LCD_init
  2331                           
  2332                           ;main.c: 127: LCD_backlight(1);
  2333  003104  0E01               	movlw	1
  2334  003106  EC7F  F02B         	call	_LCD_backlight
  2335                           
  2336                           ;main.c: 128: LCD_clear();
  2337  00310A  EC7E  F02C         	call	_LCD_clear	;wreg free
  2338                           
  2339                           ;main.c: 129: LCD_send_string("System Start", 1);
  2340  00310E  0E9B               	movlw	low STR_1
  2341  003110  0100               	movlb	0	; () banked
  2342  003112  6F60               	movwf	LCD_send_string@str& (0+255),b
  2343  003114  0E7F               	movlw	high STR_1
  2344  003116  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2345  003118  0E01               	movlw	1
  2346  00311A  6F62               	movwf	LCD_send_string@line& (0+255),b
  2347  00311C  EC20  F013         	call	_LCD_send_string	;wreg free
  2348                           
  2349                           ;main.c: 130: _delay((unsigned long)((5000)*(8000000/4000.0)));
  2350  003120  0E33               	movlw	51
  2351  003122  0101               	movlb	1	; () banked
  2352  003124  6F7C               	movwf	(??_main+1)& (0+255),b
  2353  003126  0EBB               	movlw	187
  2354  003128  6F7B               	movwf	??_main& (0+255),b
  2355  00312A  0EDF               	movlw	223
  2356  00312C                     u13937:
  2357  00312C  2EE8               	decfsz	wreg,f,c
  2358  00312E  D7FE               	bra	u13937
  2359  003130  2F7B               	decfsz	??_main& (0+255),f,b
  2360  003132  D7FC               	bra	u13937
  2361  003134  2F7C               	decfsz	(??_main+1)& (0+255),f,b
  2362  003136  D7FA               	bra	u13937
  2363  003138  D000               	nop2	
  2364                           
  2365                           ;main.c: 137: (INTCONbits.GIE = 1);
  2366  00313A  8EF2               	bsf	4082,7,c	;volatile
  2367                           
  2368                           ;main.c: 143: (INTCONbits.PEIE = 1);
  2369  00313C  8CF2               	bsf	4082,6,c	;volatile
  2370                           
  2371                           ;main.c: 150: initialiseTCP();
  2372  00313E  EC20  F01F         	call	_initialiseTCP	;wreg free
  2373                           
  2374                           ;main.c: 151: checkTCP = 0;
  2375  003142  0E00               	movlw	0
  2376  003144  0101               	movlb	1	; () banked
  2377  003146  6F48               	movwf	_checkTCP& (0+255),b
  2378                           
  2379                           ; BSR set to: 1
  2380                           ;main.c: 153: LCD_clear();
  2381  003148  EC7E  F02C         	call	_LCD_clear	;wreg free
  2382                           
  2383                           ;main.c: 154: LCD_send_string("TCP Server \n  192.168.4.1", 1);
  2384  00314C  0EFC               	movlw	low STR_2
  2385  00314E  0100               	movlb	0	; () banked
  2386  003150  6F60               	movwf	LCD_send_string@str& (0+255),b
  2387  003152  0E7E               	movlw	high STR_2
  2388  003154  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2389  003156  0E01               	movlw	1
  2390  003158  6F62               	movwf	LCD_send_string@line& (0+255),b
  2391  00315A  EC20  F013         	call	_LCD_send_string	;wreg free
  2392                           
  2393                           ;main.c: 155: _delay((unsigned long)((2500)*(8000000/4000.0)));
  2394  00315E  0E1A               	movlw	26
  2395  003160  0101               	movlb	1	; () banked
  2396  003162  6F7C               	movwf	(??_main+1)& (0+255),b
  2397  003164  0E5E               	movlw	94
  2398  003166  6F7B               	movwf	??_main& (0+255),b
  2399  003168  0E6E               	movlw	110
  2400  00316A                     u13947:
  2401  00316A  2EE8               	decfsz	wreg,f,c
  2402  00316C  D7FE               	bra	u13947
  2403  00316E  2F7B               	decfsz	??_main& (0+255),f,b
  2404  003170  D7FC               	bra	u13947
  2405  003172  2F7C               	decfsz	(??_main+1)& (0+255),f,b
  2406  003174  D7FA               	bra	u13947
  2407  003176  F000               	nop	
  2408  003178                     l11743:
  2409                           
  2410                           ;main.c: 158: {;main.c: 159: if (!isOn) {
  2411  003178  0100               	movlb	0	; () banked
  2412  00317A  51EC               	movf	_isOn& (0+255),w,b
  2413  00317C  A4D8               	btfss	status,2,c
  2414  00317E  D051               	goto	l11765
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;main.c: 160: LCD_clear();
  2418  003180  EC7E  F02C         	call	_LCD_clear	;wreg free
  2419                           
  2420                           ;main.c: 161: LCD_send_string("Fan on Standby", 1);
  2421  003184  0E7E               	movlw	low STR_3
  2422  003186  0100               	movlb	0	; () banked
  2423  003188  6F60               	movwf	LCD_send_string@str& (0+255),b
  2424  00318A  0E7F               	movlw	high STR_3
  2425  00318C  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2426  00318E  0E01               	movlw	1
  2427  003190  6F62               	movwf	LCD_send_string@line& (0+255),b
  2428  003192  EC20  F013         	call	_LCD_send_string	;wreg free
  2429                           
  2430                           ;main.c: 162: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2431  003196  0E0B               	movlw	11
  2432  003198  0101               	movlb	1	; () banked
  2433  00319A  6F7C               	movwf	(??_main+1)& (0+255),b
  2434  00319C  0E26               	movlw	38
  2435  00319E  6F7B               	movwf	??_main& (0+255),b
  2436  0031A0  0E5D               	movlw	93
  2437  0031A2                     u13957:
  2438  0031A2  2EE8               	decfsz	wreg,f,c
  2439  0031A4  D7FE               	bra	u13957
  2440  0031A6  2F7B               	decfsz	??_main& (0+255),f,b
  2441  0031A8  D7FC               	bra	u13957
  2442  0031AA  2F7C               	decfsz	(??_main+1)& (0+255),f,b
  2443  0031AC  D7FA               	bra	u13957
  2444  0031AE  D000               	nop2	
  2445                           
  2446                           ;main.c: 163: touchBytesAzo = i2cRead(0xC8, 0x03);
  2447  0031B0  0E00               	movlw	0
  2448  0031B2  6E1B               	movwf	i2cRead@i2cAddress+1,c
  2449  0031B4  0EC8               	movlw	200
  2450  0031B6  6E1A               	movwf	i2cRead@i2cAddress,c
  2451  0031B8  0E00               	movlw	0
  2452  0031BA  6E1D               	movwf	i2cRead@registerAdress+1,c
  2453  0031BC  0E03               	movlw	3
  2454  0031BE  6E1C               	movwf	i2cRead@registerAdress,c
  2455  0031C0  EC12  F023         	call	_i2cRead	;wreg free
  2456  0031C4  C01A  F0EA         	movff	?_i2cRead,_touchBytesAzo
  2457  0031C8  C01B  F0EB         	movff	?_i2cRead+1,_touchBytesAzo+1
  2458                           
  2459                           ;main.c: 164: if (touchBytesAzo == 7)
  2460  0031CC  0E07               	movlw	7
  2461  0031CE  0100               	movlb	0	; () banked
  2462  0031D0  19EA               	xorwf	_touchBytesAzo& (0+255),w,b
  2463  0031D2  11EB               	iorwf	(_touchBytesAzo+1)& (0+255),w,b
  2464  0031D4  A4D8               	btfss	status,2,c
  2465  0031D6  D025               	goto	l11765
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;main.c: 165: {;main.c: 166: isOn = 1;
  2469  0031D8  0E01               	movlw	1
  2470  0031DA  6FEC               	movwf	_isOn& (0+255),b
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 167: LCD_clear();
  2474  0031DC  EC7E  F02C         	call	_LCD_clear	;wreg free
  2475                           
  2476                           ;main.c: 168: manualSpeed = 1;
  2477  0031E0  0E00               	movlw	0
  2478  0031E2  0100               	movlb	0	; () banked
  2479  0031E4  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
  2480  0031E6  0E01               	movlw	1
  2481  0031E8  6FFE               	movwf	_manualSpeed& (0+255),b
  2482                           
  2483                           ;main.c: 169: dcMotor(manualSpeed);
  2484  0031EA  C0FE  F01E         	movff	_manualSpeed,dcMotor@speeed
  2485  0031EE  C0FF  F01F         	movff	_manualSpeed+1,dcMotor@speeed+1
  2486  0031F2  EC90  F028         	call	_dcMotor	;wreg free
  2487                           
  2488                           ;main.c: 170: LCD_send_string("Fan On", 1);
  2489  0031F6  0EE9               	movlw	low STR_4
  2490  0031F8  0100               	movlb	0	; () banked
  2491  0031FA  6F60               	movwf	LCD_send_string@str& (0+255),b
  2492  0031FC  0E7F               	movlw	high STR_4
  2493  0031FE  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2494  003200  0E01               	movlw	1
  2495  003202  6F62               	movwf	LCD_send_string@line& (0+255),b
  2496  003204  EC20  F013         	call	_LCD_send_string	;wreg free
  2497                           
  2498                           ;main.c: 171: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2499  003208  0E0B               	movlw	11
  2500  00320A  0101               	movlb	1	; () banked
  2501  00320C  6F7C               	movwf	(??_main+1)& (0+255),b
  2502  00320E  0E26               	movlw	38
  2503  003210  6F7B               	movwf	??_main& (0+255),b
  2504  003212  0E5D               	movlw	93
  2505  003214                     u13967:
  2506  003214  2EE8               	decfsz	wreg,f,c
  2507  003216  D7FE               	bra	u13967
  2508  003218  2F7B               	decfsz	??_main& (0+255),f,b
  2509  00321A  D7FC               	bra	u13967
  2510  00321C  2F7C               	decfsz	(??_main+1)& (0+255),f,b
  2511  00321E  D7FA               	bra	u13967
  2512  003220  D000               	nop2	
  2513  003222                     l11765:
  2514                           
  2515                           ;main.c: 172: };main.c: 174: };main.c: 176: if (!isAuto && isOn) {
  2516  003222  0100               	movlb	0	; () banked
  2517  003224  51ED               	movf	_isAuto& (0+255),w,b
  2518  003226  A4D8               	btfss	status,2,c
  2519  003228  D01E               	goto	l11777
  2520                           
  2521                           ; BSR set to: 0
  2522  00322A  51EC               	movf	_isOn& (0+255),w,b
  2523  00322C  B4D8               	btfsc	status,2,c
  2524  00322E  D01B               	goto	l11777
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 180: LCD_clear();
  2528  003230  EC7E  F02C         	call	_LCD_clear	;wreg free
  2529                           
  2530                           ;main.c: 181: LCD_send_string("Manual mode", 1);
  2531  003234  0EA8               	movlw	low STR_5
  2532  003236  0100               	movlb	0	; () banked
  2533  003238  6F60               	movwf	LCD_send_string@str& (0+255),b
  2534  00323A  0E7F               	movlw	high STR_5
  2535  00323C  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2536  00323E  0E01               	movlw	1
  2537  003240  6F62               	movwf	LCD_send_string@line& (0+255),b
  2538  003242  EC20  F013         	call	_LCD_send_string	;wreg free
  2539                           
  2540                           ;main.c: 182: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2541  003246  0E0B               	movlw	11
  2542  003248  0101               	movlb	1	; () banked
  2543  00324A  6F7C               	movwf	(??_main+1)& (0+255),b
  2544  00324C  0E26               	movlw	38
  2545  00324E  6F7B               	movwf	??_main& (0+255),b
  2546  003250  0E5D               	movlw	93
  2547  003252                     u13977:
  2548  003252  2EE8               	decfsz	wreg,f,c
  2549  003254  D7FE               	bra	u13977
  2550  003256  2F7B               	decfsz	??_main& (0+255),f,b
  2551  003258  D7FC               	bra	u13977
  2552  00325A  2F7C               	decfsz	(??_main+1)& (0+255),f,b
  2553  00325C  D7FA               	bra	u13977
  2554  00325E  D000               	nop2	
  2555                           
  2556                           ;main.c: 184: printOn();
  2557  003260  ECAB  F024         	call	_printOn	;wreg free
  2558                           
  2559                           ;main.c: 187: } else if (isAuto && isOn) {
  2560  003264  D020               	goto	l11789
  2561  003266                     l11777:
  2562                           
  2563                           ; BSR set to: 0
  2564  003266  51ED               	movf	_isAuto& (0+255),w,b
  2565  003268  B4D8               	btfsc	status,2,c
  2566  00326A  D01D               	goto	l11789
  2567                           
  2568                           ; BSR set to: 0
  2569  00326C  51EC               	movf	_isOn& (0+255),w,b
  2570  00326E  B4D8               	btfsc	status,2,c
  2571  003270  D01A               	goto	l11789
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 190: LCD_clear();
  2575  003272  EC7E  F02C         	call	_LCD_clear	;wreg free
  2576                           
  2577                           ;main.c: 191: LCD_send_string("Auto mode", 1);
  2578  003276  0EBF               	movlw	low STR_6
  2579  003278  0100               	movlb	0	; () banked
  2580  00327A  6F60               	movwf	LCD_send_string@str& (0+255),b
  2581  00327C  0E7F               	movlw	high STR_6
  2582  00327E  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2583  003280  0E01               	movlw	1
  2584  003282  6F62               	movwf	LCD_send_string@line& (0+255),b
  2585  003284  EC20  F013         	call	_LCD_send_string	;wreg free
  2586                           
  2587                           ;main.c: 192: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2588  003288  0E0B               	movlw	11
  2589  00328A  0101               	movlb	1	; () banked
  2590  00328C  6F7C               	movwf	(??_main+1)& (0+255),b
  2591  00328E  0E26               	movlw	38
  2592  003290  6F7B               	movwf	??_main& (0+255),b
  2593  003292  0E5D               	movlw	93
  2594  003294                     u13987:
  2595  003294  2EE8               	decfsz	wreg,f,c
  2596  003296  D7FE               	bra	u13987
  2597  003298  2F7B               	decfsz	??_main& (0+255),f,b
  2598  00329A  D7FC               	bra	u13987
  2599  00329C  2F7C               	decfsz	(??_main+1)& (0+255),f,b
  2600  00329E  D7FA               	bra	u13987
  2601  0032A0  D000               	nop2	
  2602                           
  2603                           ;main.c: 194: printAuto();
  2604  0032A2  EC54  F000         	call	_printAuto	;wreg free
  2605  0032A6                     l11789:
  2606                           
  2607                           ;main.c: 195: };main.c: 198: if (checkTCP) {
  2608  0032A6  0101               	movlb	1	; () banked
  2609  0032A8  5148               	movf	_checkTCP& (0+255),w,b
  2610  0032AA  B4D8               	btfsc	status,2,c
  2611  0032AC  D00A               	goto	l11795
  2612                           
  2613                           ; BSR set to: 1
  2614                           ;main.c: 199: printf("AT+CIPSERVER=1,222\r\n");
  2615  0032AE  0E16               	movlw	low STR_7
  2616  0032B0  0100               	movlb	0	; () banked
  2617  0032B2  6FC9               	movwf	printf@f& (0+255),b
  2618  0032B4  0E7F               	movlw	high STR_7
  2619  0032B6  6FCA               	movwf	(printf@f+1)& (0+255),b
  2620  0032B8  EC2A  F02B         	call	_printf	;wreg free
  2621                           
  2622                           ;main.c: 200: checkTCP = 0;
  2623  0032BC  0E00               	movlw	0
  2624  0032BE  0101               	movlb	1	; () banked
  2625  0032C0  6F48               	movwf	_checkTCP& (0+255),b
  2626  0032C2                     l11795:
  2627                           
  2628                           ; BSR set to: 1
  2629                           ;main.c: 201: };main.c: 203: if (EUSART1_GetSensorsBool())
  2630  0032C2  EC83  F02D         	call	_EUSART1_GetSensorsBool	;wreg free
  2631  0032C6  0900               	iorlw	0
  2632  0032C8  B4D8               	btfsc	status,2,c
  2633  0032CA  D756               	goto	l11743
  2634                           
  2635                           ;main.c: 204: {;main.c: 205: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  2636  0032CC  C0E4  F097         	movff	_guiLux,___fttol@f1
  2637  0032D0  C0E5  F098         	movff	_guiLux+1,___fttol@f1+1
  2638  0032D4  C0E6  F099         	movff	_guiLux+2,___fttol@f1+2
  2639  0032D8  EC7D  F023         	call	___fttol	;wreg free
  2640  0032DC  C097  F17D         	movff	?___fttol,_main$3992
  2641  0032E0  C098  F17E         	movff	?___fttol+1,_main$3992+1
  2642                           
  2643                           ;main.c: 204: {;main.c: 205: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  2644  0032E4  C0E7  F16B         	movff	_guiTemp,sendData@temp
  2645  0032E8  C0E8  F16C         	movff	_guiTemp+1,sendData@temp+1
  2646  0032EC  C0E9  F16D         	movff	_guiTemp+2,sendData@temp+2
  2647  0032F0  C17D  F16E         	movff	_main$3992,sendData@lux
  2648  0032F4  C17E  F16F         	movff	_main$3992+1,sendData@lux+1
  2649  0032F8  C0DE  F170         	movff	_guiDistanceC,sendData@distanceC
  2650  0032FC  C0DF  F171         	movff	_guiDistanceC+1,sendData@distanceC+1
  2651  003300  C0E0  F172         	movff	_guiDistanceC+2,sendData@distanceC+2
  2652  003304  C0E1  F173         	movff	_guiDistanceL,sendData@distanceL
  2653  003308  C0E2  F174         	movff	_guiDistanceL+1,sendData@distanceL+1
  2654  00330C  C0E3  F175         	movff	_guiDistanceL+2,sendData@distanceL+2
  2655  003310  C0DB  F176         	movff	_guiDistanceR,sendData@distanceR
  2656  003314  C0DC  F177         	movff	_guiDistanceR+1,sendData@distanceR+1
  2657  003318  C0DD  F178         	movff	_guiDistanceR+2,sendData@distanceR+2
  2658  00331C  ECEB  F026         	call	_sendData	;wreg free
  2659  003320  D72B               	goto	l11743
  2660  003322                     __end_of_main:
  2661                           	opt callstack 0
  2662                           
  2663 ;; *************** function _printOn *****************
  2664 ;; Defined at:
  2665 ;;		line 308 in file "main.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;		None
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2679 ;;      Params:         0       0       0       0       0       0       0
  2680 ;;      Locals:         0       0       0       0       0       0       0
  2681 ;;      Temps:          0       2       0       0       0       0       0
  2682 ;;      Totals:         0       2       0       0       0       0       0
  2683 ;;Total ram usage:        2 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:   12
  2686 ;; This function calls:
  2687 ;;		_LCD_clear
  2688 ;;		_LCD_send_string
  2689 ;;		_azoTouchPollManual
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text1
  2696  004956                     __ptext1:
  2697                           	opt callstack 0
  2698  004956                     _printOn:
  2699                           	opt callstack 18
  2700                           
  2701                           ;main.c: 310: if (!azoTouchPollManual())
  2702                           
  2703                           ;incstack = 0
  2704  004956  EC6F  F01E         	call	_azoTouchPollManual	;wreg free
  2705  00495A  0900               	iorlw	0
  2706  00495C  B4D8               	btfsc	status,2,c
  2707  00495E  0012               	return	
  2708                           
  2709                           ;main.c: 314: if (manualSpeed == 1) {
  2710  004960  0100               	movlb	0	; () banked
  2711  004962  05FE               	decf	_manualSpeed& (0+255),w,b
  2712  004964  11FF               	iorwf	(_manualSpeed+1)& (0+255),w,b
  2713  004966  A4D8               	btfss	status,2,c
  2714  004968  D019               	goto	l11333
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;main.c: 315: LCD_clear();
  2718  00496A  EC7E  F02C         	call	_LCD_clear	;wreg free
  2719                           
  2720                           ;main.c: 316: LCD_send_string("Speed 1", 1);
  2721  00496E  0EC9               	movlw	low STR_12
  2722  004970  0100               	movlb	0	; () banked
  2723  004972  6F60               	movwf	LCD_send_string@str& (0+255),b
  2724  004974  0E7F               	movlw	high STR_12
  2725  004976  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2726  004978  0E01               	movlw	1
  2727  00497A  6F62               	movwf	LCD_send_string@line& (0+255),b
  2728  00497C  EC20  F013         	call	_LCD_send_string	;wreg free
  2729  004980                     l11331:
  2730                           
  2731                           ;main.c: 317: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2732  004980  0E0B               	movlw	11
  2733  004982  0100               	movlb	0	; () banked
  2734  004984  6F73               	movwf	(??_printOn+1)& (0+255),b
  2735  004986  0E26               	movlw	38
  2736  004988  6F72               	movwf	??_printOn& (0+255),b
  2737  00498A  0E5D               	movlw	93
  2738  00498C                     u13997:
  2739  00498C  2EE8               	decfsz	wreg,f,c
  2740  00498E  D7FE               	bra	u13997
  2741  004990  2F72               	decfsz	??_printOn& (0+255),f,b
  2742  004992  D7FC               	bra	u13997
  2743  004994  2F73               	decfsz	(??_printOn+1)& (0+255),f,b
  2744  004996  D7FA               	bra	u13997
  2745  004998  D000               	nop2	
  2746                           
  2747                           ;main.c: 318: } else if (manualSpeed == 2) {
  2748  00499A  D033               	goto	l1112
  2749  00499C                     l11333:
  2750                           
  2751                           ; BSR set to: 0
  2752  00499C  0E02               	movlw	2
  2753  00499E  19FE               	xorwf	_manualSpeed& (0+255),w,b
  2754  0049A0  11FF               	iorwf	(_manualSpeed+1)& (0+255),w,b
  2755  0049A2  A4D8               	btfss	status,2,c
  2756  0049A4  D00C               	goto	l11341
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;main.c: 319: LCD_clear();
  2760  0049A6  EC7E  F02C         	call	_LCD_clear	;wreg free
  2761                           
  2762                           ;main.c: 320: LCD_send_string("Speed 2", 1);
  2763  0049AA  0ED1               	movlw	low STR_13
  2764  0049AC  0100               	movlb	0	; () banked
  2765  0049AE  6F60               	movwf	LCD_send_string@str& (0+255),b
  2766  0049B0  0E7F               	movlw	high STR_13
  2767  0049B2  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2768  0049B4  0E01               	movlw	1
  2769  0049B6  6F62               	movwf	LCD_send_string@line& (0+255),b
  2770  0049B8  EC20  F013         	call	_LCD_send_string	;wreg free
  2771  0049BC  D7E1               	goto	l11331
  2772  0049BE                     l11341:
  2773                           
  2774                           ; BSR set to: 0
  2775  0049BE  0E03               	movlw	3
  2776  0049C0  19FE               	xorwf	_manualSpeed& (0+255),w,b
  2777  0049C2  11FF               	iorwf	(_manualSpeed+1)& (0+255),w,b
  2778  0049C4  A4D8               	btfss	status,2,c
  2779  0049C6  D00C               	goto	l11349
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 323: LCD_clear();
  2783  0049C8  EC7E  F02C         	call	_LCD_clear	;wreg free
  2784                           
  2785                           ;main.c: 324: LCD_send_string("Speed 3", 1);
  2786  0049CC  0ED9               	movlw	low STR_14
  2787  0049CE  0100               	movlb	0	; () banked
  2788  0049D0  6F60               	movwf	LCD_send_string@str& (0+255),b
  2789  0049D2  0E7F               	movlw	high STR_14
  2790  0049D4  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2791  0049D6  0E01               	movlw	1
  2792  0049D8  6F62               	movwf	LCD_send_string@line& (0+255),b
  2793  0049DA  EC20  F013         	call	_LCD_send_string	;wreg free
  2794  0049DE  D7D0               	goto	l11331
  2795  0049E0                     l11349:
  2796                           
  2797                           ; BSR set to: 0
  2798  0049E0  0E04               	movlw	4
  2799  0049E2  19FE               	xorwf	_manualSpeed& (0+255),w,b
  2800  0049E4  11FF               	iorwf	(_manualSpeed+1)& (0+255),w,b
  2801  0049E6  A4D8               	btfss	status,2,c
  2802  0049E8  D00C               	goto	l1112
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;main.c: 327: LCD_clear();
  2806  0049EA  EC7E  F02C         	call	_LCD_clear	;wreg free
  2807                           
  2808                           ;main.c: 328: LCD_send_string("Speed 4", 1);
  2809  0049EE  0EE1               	movlw	low STR_15
  2810  0049F0  0100               	movlb	0	; () banked
  2811  0049F2  6F60               	movwf	LCD_send_string@str& (0+255),b
  2812  0049F4  0E7F               	movlw	high STR_15
  2813  0049F6  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2814  0049F8  0E01               	movlw	1
  2815  0049FA  6F62               	movwf	LCD_send_string@line& (0+255),b
  2816  0049FC  EC20  F013         	call	_LCD_send_string	;wreg free
  2817  004A00  D7BF               	goto	l11331
  2818  004A02                     l1112:
  2819                           
  2820                           ;main.c: 330: };main.c: 332: if (!azoTouchPollManual())
  2821                           
  2822                           ; BSR set to: 0
  2823  004A02  EC6F  F01E         	call	_azoTouchPollManual	;wreg free
  2824  004A06  0012               	return		;funcret
  2825  004A08                     __end_of_printOn:
  2826                           	opt callstack 0
  2827                           
  2828 ;; *************** function _azoTouchPollManual *****************
  2829 ;; Defined at:
  2830 ;;		line 242 in file "main.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;		None
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  i               2   16[BANK0 ] int 
  2835 ;;  i               2   14[BANK0 ] int 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      unsigned char 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2845 ;;      Params:         0       0       0       0       0       0       0
  2846 ;;      Locals:         0       4       0       0       0       0       0
  2847 ;;      Temps:          0       2       0       0       0       0       0
  2848 ;;      Totals:         0       6       0       0       0       0       0
  2849 ;;Total ram usage:        6 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:   11
  2852 ;; This function calls:
  2853 ;;		_LCD_clear
  2854 ;;		_LCD_send_string
  2855 ;;		__stepMotorReverse_
  2856 ;;		__stepMotor_
  2857 ;;		_dcMotor
  2858 ;;		_i2cRead
  2859 ;; This function is called by:
  2860 ;;		_printOn
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text2
  2865  003CDE                     __ptext2:
  2866                           	opt callstack 0
  2867  003CDE                     _azoTouchPollManual:
  2868                           	opt callstack 18
  2869                           
  2870                           ;main.c: 244: touchBytesAzo = i2cRead(0xC8, 0x03);
  2871                           
  2872                           ;incstack = 0
  2873  003CDE  0E00               	movlw	0
  2874  003CE0  6E1B               	movwf	i2cRead@i2cAddress+1,c
  2875  003CE2  0EC8               	movlw	200
  2876  003CE4  6E1A               	movwf	i2cRead@i2cAddress,c
  2877  003CE6  0E00               	movlw	0
  2878  003CE8  6E1D               	movwf	i2cRead@registerAdress+1,c
  2879  003CEA  0E03               	movlw	3
  2880  003CEC  6E1C               	movwf	i2cRead@registerAdress,c
  2881  003CEE  EC12  F023         	call	_i2cRead	;wreg free
  2882  003CF2  C01A  F0EA         	movff	?_i2cRead,_touchBytesAzo
  2883  003CF6  C01B  F0EB         	movff	?_i2cRead+1,_touchBytesAzo+1
  2884                           
  2885                           ;main.c: 246: if (touchBytesAzo == 7)
  2886  003CFA  0E07               	movlw	7
  2887  003CFC  0100               	movlb	0	; () banked
  2888  003CFE  19EA               	xorwf	_touchBytesAzo& (0+255),w,b
  2889  003D00  11EB               	iorwf	(_touchBytesAzo+1)& (0+255),w,b
  2890  003D02  A4D8               	btfss	status,2,c
  2891  003D04  D004               	goto	l11039
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;main.c: 247: {;main.c: 248: isOn = 0;
  2895  003D06  0E00               	movlw	0
  2896  003D08  6FEC               	movwf	_isOn& (0+255),b
  2897  003D0A                     l11033:
  2898                           
  2899                           ;main.c: 249: return 0;
  2900  003D0A  0E00               	movlw	0
  2901  003D0C  0012               	return	
  2902  003D0E                     l11039:
  2903                           
  2904                           ; BSR set to: 0
  2905  003D0E  0E03               	movlw	3
  2906  003D10  19EA               	xorwf	_touchBytesAzo& (0+255),w,b
  2907  003D12  11EB               	iorwf	(_touchBytesAzo+1)& (0+255),w,b
  2908  003D14  A4D8               	btfss	status,2,c
  2909  003D16  D01B               	goto	l11055
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;main.c: 251: isAuto = 1;
  2913  003D18  0E01               	movlw	1
  2914  003D1A  6FED               	movwf	_isAuto& (0+255),b
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;main.c: 252: LCD_clear();
  2918  003D1C  EC7E  F02C         	call	_LCD_clear	;wreg free
  2919                           
  2920                           ;main.c: 253: LCD_send_string("Auto mode", 1);
  2921  003D20  0EBF               	movlw	low STR_6
  2922  003D22  0100               	movlb	0	; () banked
  2923  003D24  6F60               	movwf	LCD_send_string@str& (0+255),b
  2924  003D26  0E7F               	movlw	high STR_6
  2925  003D28  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  2926  003D2A  0E01               	movlw	1
  2927  003D2C  6F62               	movwf	LCD_send_string@line& (0+255),b
  2928  003D2E  EC20  F013         	call	_LCD_send_string	;wreg free
  2929                           
  2930                           ;main.c: 254: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2931  003D32  0E0B               	movlw	11
  2932  003D34  0100               	movlb	0	; () banked
  2933  003D36  6F6D               	movwf	(??_azoTouchPollManual+1)& (0+255),b
  2934  003D38  0E26               	movlw	38
  2935  003D3A  6F6C               	movwf	??_azoTouchPollManual& (0+255),b
  2936  003D3C  0E5D               	movlw	93
  2937  003D3E                     u14007:
  2938  003D3E  2EE8               	decfsz	wreg,f,c
  2939  003D40  D7FE               	bra	u14007
  2940  003D42  2F6C               	decfsz	??_azoTouchPollManual& (0+255),f,b
  2941  003D44  D7FC               	bra	u14007
  2942  003D46  2F6D               	decfsz	(??_azoTouchPollManual+1)& (0+255),f,b
  2943  003D48  D7FA               	bra	u14007
  2944  003D4A  D000               	nop2	
  2945  003D4C  D7DE               	goto	l11033
  2946  003D4E                     l11055:
  2947                           
  2948                           ; BSR set to: 0
  2949  003D4E  0E05               	movlw	5
  2950  003D50  19EA               	xorwf	_touchBytesAzo& (0+255),w,b
  2951  003D52  11EB               	iorwf	(_touchBytesAzo+1)& (0+255),w,b
  2952  003D54  A4D8               	btfss	status,2,c
  2953  003D56  D015               	goto	l11065
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;main.c: 257: manualSpeed += 1;
  2957  003D58  4BFE               	infsnz	_manualSpeed& (0+255),f,b
  2958  003D5A  2BFF               	incf	(_manualSpeed+1)& (0+255),f,b
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;main.c: 258: if (manualSpeed>4)
  2962  003D5C  BFFF               	btfsc	(_manualSpeed+1)& (0+255),7,b
  2963  003D5E  D00A               	goto	l11063
  2964  003D60  51FF               	movf	(_manualSpeed+1)& (0+255),w,b
  2965  003D62  E104               	bnz	u13120
  2966  003D64  0E05               	movlw	5
  2967  003D66  5DFE               	subwf	_manualSpeed& (0+255),w,b
  2968  003D68  A0D8               	btfss	status,0,c
  2969  003D6A  D004               	goto	l11063
  2970  003D6C                     u13120:
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;main.c: 259: manualSpeed = 1;
  2974  003D6C  0E00               	movlw	0
  2975  003D6E  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
  2976  003D70  0E01               	movlw	1
  2977  003D72  6FFE               	movwf	_manualSpeed& (0+255),b
  2978  003D74                     l11063:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;main.c: 260: dcMotor(manualSpeed);
  2982  003D74  C0FE  F01E         	movff	_manualSpeed,dcMotor@speeed
  2983  003D78  C0FF  F01F         	movff	_manualSpeed+1,dcMotor@speeed+1
  2984  003D7C  EC90  F028         	call	_dcMotor	;wreg free
  2985                           
  2986                           ;main.c: 261: } else if ( touchBytesAzo == 9 ) {
  2987  003D80  D05D               	goto	l1089
  2988  003D82                     l11065:
  2989                           
  2990                           ; BSR set to: 0
  2991  003D82  0E09               	movlw	9
  2992  003D84  19EA               	xorwf	_touchBytesAzo& (0+255),w,b
  2993  003D86  11EB               	iorwf	(_touchBytesAzo+1)& (0+255),w,b
  2994  003D88  A4D8               	btfss	status,2,c
  2995  003D8A  D058               	goto	l1089
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;main.c: 263: if (stepperCW) {
  2999  003D8C  0101               	movlb	1	; () banked
  3000  003D8E  5184               	movf	_stepperCW& (0+255),w,b
  3001  003D90  B4D8               	btfsc	status,2,c
  3002  003D92  D029               	goto	l11089
  3003                           
  3004                           ; BSR set to: 1
  3005                           ;main.c: 264: for(int i =0;i<6;i++)
  3006  003D94  0E00               	movlw	0
  3007  003D96  0100               	movlb	0	; () banked
  3008  003D98  6F6F               	movwf	(azoTouchPollManual@i+1)& (0+255),b
  3009  003D9A  0E00               	movlw	0
  3010  003D9C  6F6E               	movwf	azoTouchPollManual@i& (0+255),b
  3011  003D9E                     l11075:
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;main.c: 265: {;main.c: 266: _delay((unsigned long)((50)*(8000000/4000.0)));
  3015  003D9E  0E82               	movlw	130
  3016  003DA0  0100               	movlb	0	; () banked
  3017  003DA2  6F6C               	movwf	??_azoTouchPollManual& (0+255),b
  3018  003DA4  0EDD               	movlw	221
  3019  003DA6                     u14017:
  3020  003DA6  2EE8               	decfsz	wreg,f,c
  3021  003DA8  D7FE               	bra	u14017
  3022  003DAA  2F6C               	decfsz	??_azoTouchPollManual& (0+255),f,b
  3023  003DAC  D7FC               	bra	u14017
  3024  003DAE  D000               	nop2	
  3025                           
  3026                           ;main.c: 267: _stepMotor_(0);
  3027  003DB0  0E00               	movlw	0
  3028  003DB2  6E1B               	movwf	__stepMotor_@stepDirection+1,c
  3029  003DB4  0E00               	movlw	0
  3030  003DB6  6E1A               	movwf	__stepMotor_@stepDirection,c
  3031  003DB8  ECE8  F028         	call	__stepMotor_	;wreg free
  3032  003DBC  0100               	movlb	0	; () banked
  3033  003DBE  4B6E               	infsnz	azoTouchPollManual@i& (0+255),f,b
  3034  003DC0  2B6F               	incf	(azoTouchPollManual@i+1)& (0+255),f,b
  3035                           
  3036                           ; BSR set to: 0
  3037  003DC2  BF6F               	btfsc	(azoTouchPollManual@i+1)& (0+255),7,b
  3038  003DC4  D7EC               	goto	l11075
  3039  003DC6  516F               	movf	(azoTouchPollManual@i+1)& (0+255),w,b
  3040  003DC8  E104               	bnz	u13150
  3041  003DCA  0E06               	movlw	6
  3042  003DCC  5D6E               	subwf	azoTouchPollManual@i& (0+255),w,b
  3043  003DCE  A0D8               	btfss	status,0,c
  3044  003DD0  D7E6               	goto	l11075
  3045  003DD2                     u13150:
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;main.c: 268: };main.c: 270: stepperPosition++;
  3049  003DD2  0101               	movlb	1	; () banked
  3050  003DD4  4B37               	infsnz	_stepperPosition& (0+255),f,b
  3051  003DD6  2B38               	incf	(_stepperPosition+1)& (0+255),f,b
  3052                           
  3053                           ; BSR set to: 1
  3054                           ;main.c: 271: if (stepperPosition == 2) {
  3055  003DD8  0E02               	movlw	2
  3056  003DDA  1937               	xorwf	_stepperPosition& (0+255),w,b
  3057  003DDC  1138               	iorwf	(_stepperPosition+1)& (0+255),w,b
  3058  003DDE  A4D8               	btfss	status,2,c
  3059  003DE0  D02D               	goto	l1089
  3060                           
  3061                           ; BSR set to: 1
  3062                           ;main.c: 272: stepperCW = 0;
  3063  003DE2  0E00               	movlw	0
  3064  003DE4  D02A               	goto	L1
  3065  003DE6                     l11089:
  3066                           
  3067                           ; BSR set to: 1
  3068                           ;main.c: 275: for(int i =0;i<6;i++)
  3069  003DE6  0E00               	movlw	0
  3070  003DE8  0100               	movlb	0	; () banked
  3071  003DEA  6F71               	movwf	(azoTouchPollManual@i_2622+1)& (0+255),b
  3072  003DEC  0E00               	movlw	0
  3073  003DEE  6F70               	movwf	azoTouchPollManual@i_2622& (0+255),b
  3074  003DF0                     l11095:
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;main.c: 276: {;main.c: 277: _delay((unsigned long)((50)*(8000000/4000.0)));
  3078  003DF0  0E82               	movlw	130
  3079  003DF2  0100               	movlb	0	; () banked
  3080  003DF4  6F6C               	movwf	??_azoTouchPollManual& (0+255),b
  3081  003DF6  0EDD               	movlw	221
  3082  003DF8                     u14027:
  3083  003DF8  2EE8               	decfsz	wreg,f,c
  3084  003DFA  D7FE               	bra	u14027
  3085  003DFC  2F6C               	decfsz	??_azoTouchPollManual& (0+255),f,b
  3086  003DFE  D7FC               	bra	u14027
  3087  003E00  D000               	nop2	
  3088                           
  3089                           ;main.c: 278: _stepMotorReverse_(0);
  3090  003E02  0E00               	movlw	0
  3091  003E04  6E1B               	movwf	__stepMotorReverse_@stepDirection+1,c
  3092  003E06  0E00               	movlw	0
  3093  003E08  6E1A               	movwf	__stepMotorReverse_@stepDirection,c
  3094  003E0A  EC64  F028         	call	__stepMotorReverse_	;wreg free
  3095  003E0E  0100               	movlb	0	; () banked
  3096  003E10  4B70               	infsnz	azoTouchPollManual@i_2622& (0+255),f,b
  3097  003E12  2B71               	incf	(azoTouchPollManual@i_2622+1)& (0+255),f,b
  3098                           
  3099                           ; BSR set to: 0
  3100  003E14  BF71               	btfsc	(azoTouchPollManual@i_2622+1)& (0+255),7,b
  3101  003E16  D7EC               	goto	l11095
  3102  003E18  5171               	movf	(azoTouchPollManual@i_2622+1)& (0+255),w,b
  3103  003E1A  E104               	bnz	u13170
  3104  003E1C  0E06               	movlw	6
  3105  003E1E  5D70               	subwf	azoTouchPollManual@i_2622& (0+255),w,b
  3106  003E20  A0D8               	btfss	status,0,c
  3107  003E22  D7E6               	goto	l11095
  3108  003E24                     u13170:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 279: };main.c: 281: stepperPosition--;
  3112  003E24  0101               	movlb	1	; () banked
  3113  003E26  0737               	decf	_stepperPosition& (0+255),f,b
  3114  003E28  A0D8               	btfss	status,0,c
  3115  003E2A  0738               	decf	(_stepperPosition+1)& (0+255),f,b
  3116                           
  3117                           ; BSR set to: 1
  3118                           ;main.c: 282: if (stepperPosition == -2) {
  3119  003E2C  0EFE               	movlw	254
  3120  003E2E  1937               	xorwf	_stepperPosition& (0+255),w,b
  3121  003E30  E105               	bnz	l1089
  3122  003E32  2938               	incf	(_stepperPosition+1)& (0+255),w,b
  3123  003E34  A4D8               	btfss	status,2,c
  3124  003E36  D002               	goto	l1089
  3125                           
  3126                           ; BSR set to: 1
  3127                           ;main.c: 283: stepperCW = 1;
  3128  003E38  0E01               	movlw	1
  3129  003E3A                     L1:
  3130  003E3A  6F84               	movwf	_stepperCW& (0+255),b
  3131  003E3C                     l1089:
  3132                           
  3133                           ;main.c: 284: };main.c: 285: };main.c: 286: };main.c: 287: return 1;
  3134                           
  3135                           ; BSR set to: 1
  3136  003E3C  0E01               	movlw	1
  3137  003E3E  0012               	return		;funcret
  3138  003E40                     __end_of_azoTouchPollManual:
  3139                           	opt callstack 0
  3140                           
  3141 ;; *************** function __stepMotor_ *****************
  3142 ;; Defined at:
  3143 ;;		line 704 in file "main.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  stepDirectio    2   25[COMRAM] int 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		wreg, status,2, status,0
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3157 ;;      Params:         2       0       0       0       0       0       0
  3158 ;;      Locals:         0       0       0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0       0       0
  3160 ;;      Totals:         2       0       0       0       0       0       0
  3161 ;;Total ram usage:        2 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    5
  3164 ;; This function calls:
  3165 ;;		Nothing
  3166 ;; This function is called by:
  3167 ;;		_azoTouchPollManual
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text3
  3172  0051D0                     __ptext3:
  3173                           	opt callstack 0
  3174  0051D0                     __stepMotor_:
  3175                           	opt callstack 23
  3176                           
  3177                           ;main.c: 706: if (step == 0){
  3178                           
  3179                           ;incstack = 0
  3180  0051D0  5034               	movf	_step,w,c
  3181  0051D2  1035               	iorwf	_step+1,w,c
  3182  0051D4  A4D8               	btfss	status,2,c
  3183  0051D6  D007               	goto	l10801
  3184                           
  3185                           ;main.c: 707: do { LATDbits.LATD4 = 0; } while(0);
  3186  0051D8  988C               	bcf	3980,4,c	;volatile
  3187                           
  3188                           ;main.c: 708: do { LATDbits.LATD5 = 1; } while(0);
  3189  0051DA  8A8C               	bsf	3980,5,c	;volatile
  3190                           
  3191                           ;main.c: 709: do { LATDbits.LATD6 = 1; } while(0);
  3192  0051DC  8C8C               	bsf	3980,6,c	;volatile
  3193  0051DE                     l1277:
  3194  0051DE  8E8C               	bsf	3980,7,c	;volatile
  3195  0051E0                     l10799:
  3196                           
  3197                           ;main.c: 712: step++;
  3198  0051E0  4A34               	infsnz	_step,f,c
  3199  0051E2  2A35               	incf	_step+1,f,c
  3200                           
  3201                           ;main.c: 714: }
  3202  0051E4  0012               	return	
  3203  0051E6                     l10801:
  3204                           
  3205                           ;main.c: 716: else if (step == 1){
  3206  0051E6  0434               	decf	_step,w,c
  3207  0051E8  1035               	iorwf	_step+1,w,c
  3208  0051EA  A4D8               	btfss	status,2,c
  3209  0051EC  D005               	goto	l10805
  3210                           
  3211                           ;main.c: 717: do { LATDbits.LATD4 = 1; } while(0);
  3212  0051EE  888C               	bsf	3980,4,c	;volatile
  3213                           
  3214                           ;main.c: 718: do { LATDbits.LATD7 = 1; } while(0);
  3215  0051F0  8E8C               	bsf	3980,7,c	;volatile
  3216                           
  3217                           ;main.c: 719: do { LATDbits.LATD6 = 1; } while(0);
  3218  0051F2  8C8C               	bsf	3980,6,c	;volatile
  3219                           
  3220                           ;main.c: 720: do { LATDbits.LATD5 = 0; } while(0);
  3221  0051F4  9A8C               	bcf	3980,5,c	;volatile
  3222  0051F6  D7F4               	goto	l10799
  3223  0051F8                     l10805:
  3224                           
  3225                           ;main.c: 724: else if (step == 2){
  3226  0051F8  0E02               	movlw	2
  3227  0051FA  1834               	xorwf	_step,w,c
  3228  0051FC  1035               	iorwf	_step+1,w,c
  3229  0051FE  A4D8               	btfss	status,2,c
  3230  005200  D004               	goto	l10809
  3231                           
  3232                           ;main.c: 725: do { LATDbits.LATD4 = 1; } while(0);
  3233  005202  888C               	bsf	3980,4,c	;volatile
  3234                           
  3235                           ;main.c: 726: do { LATDbits.LATD5 = 1; } while(0);
  3236  005204  8A8C               	bsf	3980,5,c	;volatile
  3237                           
  3238                           ;main.c: 727: do { LATDbits.LATD6 = 0; } while(0);
  3239  005206  9C8C               	bcf	3980,6,c	;volatile
  3240                           
  3241                           ;main.c: 728: do { LATDbits.LATD7 = 1; } while(0);
  3242  005208  D7EA               	goto	l1277
  3243  00520A                     l10809:
  3244                           
  3245                           ;main.c: 732: else if (step == 3){
  3246  00520A  0E03               	movlw	3
  3247  00520C  1834               	xorwf	_step,w,c
  3248  00520E  1035               	iorwf	_step+1,w,c
  3249  005210  A4D8               	btfss	status,2,c
  3250  005212  0012               	return	
  3251                           
  3252                           ;main.c: 733: do { LATDbits.LATD4 = 1; } while(0);
  3253  005214  888C               	bsf	3980,4,c	;volatile
  3254                           
  3255                           ;main.c: 734: do { LATDbits.LATD7 = 0; } while(0);
  3256  005216  9E8C               	bcf	3980,7,c	;volatile
  3257                           
  3258                           ;main.c: 735: do { LATDbits.LATD6 = 1; } while(0);
  3259  005218  8C8C               	bsf	3980,6,c	;volatile
  3260                           
  3261                           ;main.c: 736: do { LATDbits.LATD5 = 1; } while(0);
  3262  00521A  8A8C               	bsf	3980,5,c	;volatile
  3263                           
  3264                           ;main.c: 737: step=0;
  3265  00521C  0E00               	movlw	0
  3266  00521E  6E35               	movwf	_step+1,c
  3267  005220  0E00               	movlw	0
  3268  005222  6E34               	movwf	_step,c
  3269  005224  0012               	return	
  3270  005226                     __end_of__stepMotor_:
  3271                           	opt callstack 0
  3272                           
  3273 ;; *************** function __stepMotorReverse_ *****************
  3274 ;; Defined at:
  3275 ;;		line 741 in file "main.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  stepDirectio    2   25[COMRAM] int 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      void 
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3289 ;;      Params:         2       0       0       0       0       0       0
  3290 ;;      Locals:         0       0       0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0
  3292 ;;      Totals:         2       0       0       0       0       0       0
  3293 ;;Total ram usage:        2 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    5
  3296 ;; This function calls:
  3297 ;;		Nothing
  3298 ;; This function is called by:
  3299 ;;		_azoTouchPollManual
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text4
  3304  0050C8                     __ptext4:
  3305                           	opt callstack 0
  3306  0050C8                     __stepMotorReverse_:
  3307                           	opt callstack 23
  3308                           
  3309                           ;main.c: 743: if (step == 0){
  3310                           
  3311                           ;incstack = 0
  3312  0050C8  5034               	movf	_step,w,c
  3313  0050CA  1035               	iorwf	_step+1,w,c
  3314  0050CC  A4D8               	btfss	status,2,c
  3315  0050CE  D007               	goto	l10817
  3316                           
  3317                           ;main.c: 744: do { LATDbits.LATD7 = 0; } while(0);
  3318  0050D0  9E8C               	bcf	3980,7,c	;volatile
  3319                           
  3320                           ;main.c: 745: do { LATDbits.LATD5 = 1; } while(0);
  3321  0050D2  8A8C               	bsf	3980,5,c	;volatile
  3322                           
  3323                           ;main.c: 746: do { LATDbits.LATD6 = 1; } while(0);
  3324  0050D4  8C8C               	bsf	3980,6,c	;volatile
  3325                           
  3326                           ;main.c: 747: do { LATDbits.LATD4 = 1; } while(0);
  3327  0050D6  888C               	bsf	3980,4,c	;volatile
  3328  0050D8                     l10815:
  3329                           
  3330                           ;main.c: 749: step++;
  3331  0050D8  4A34               	infsnz	_step,f,c
  3332  0050DA  2A35               	incf	_step+1,f,c
  3333                           
  3334                           ;main.c: 751: }
  3335  0050DC  0012               	return	
  3336  0050DE                     l10817:
  3337                           
  3338                           ;main.c: 753: else if (step == 1){
  3339  0050DE  0434               	decf	_step,w,c
  3340  0050E0  1035               	iorwf	_step+1,w,c
  3341  0050E2  A4D8               	btfss	status,2,c
  3342  0050E4  D005               	goto	l10821
  3343                           
  3344                           ;main.c: 754: do { LATDbits.LATD4 = 1; } while(0);
  3345  0050E6  888C               	bsf	3980,4,c	;volatile
  3346                           
  3347                           ;main.c: 755: do { LATDbits.LATD7 = 1; } while(0);
  3348  0050E8  8E8C               	bsf	3980,7,c	;volatile
  3349                           
  3350                           ;main.c: 756: do { LATDbits.LATD5 = 1; } while(0);
  3351  0050EA  8A8C               	bsf	3980,5,c	;volatile
  3352                           
  3353                           ;main.c: 757: do { LATDbits.LATD6 = 0; } while(0);
  3354  0050EC  9C8C               	bcf	3980,6,c	;volatile
  3355  0050EE  D7F4               	goto	l10815
  3356  0050F0                     l10821:
  3357                           
  3358                           ;main.c: 761: else if (step == 2){
  3359  0050F0  0E02               	movlw	2
  3360  0050F2  1834               	xorwf	_step,w,c
  3361  0050F4  1035               	iorwf	_step+1,w,c
  3362  0050F6  A4D8               	btfss	status,2,c
  3363  0050F8  D005               	goto	l10825
  3364                           
  3365                           ;main.c: 762: do { LATDbits.LATD4 = 1; } while(0);
  3366  0050FA  888C               	bsf	3980,4,c	;volatile
  3367                           
  3368                           ;main.c: 763: do { LATDbits.LATD6 = 1; } while(0);
  3369  0050FC  8C8C               	bsf	3980,6,c	;volatile
  3370                           
  3371                           ;main.c: 764: do { LATDbits.LATD5 = 0; } while(0);
  3372  0050FE  9A8C               	bcf	3980,5,c	;volatile
  3373                           
  3374                           ;main.c: 765: do { LATDbits.LATD7 = 1; } while(0);
  3375  005100  8E8C               	bsf	3980,7,c	;volatile
  3376  005102  D7EA               	goto	l10815
  3377  005104                     l10825:
  3378                           
  3379                           ;main.c: 769: else if (step == 3){
  3380  005104  0E03               	movlw	3
  3381  005106  1834               	xorwf	_step,w,c
  3382  005108  1035               	iorwf	_step+1,w,c
  3383  00510A  A4D8               	btfss	status,2,c
  3384  00510C  0012               	return	
  3385                           
  3386                           ;main.c: 770: do { LATDbits.LATD7 = 1; } while(0);
  3387  00510E  8E8C               	bsf	3980,7,c	;volatile
  3388                           
  3389                           ;main.c: 771: do { LATDbits.LATD4 = 0; } while(0);
  3390  005110  988C               	bcf	3980,4,c	;volatile
  3391                           
  3392                           ;main.c: 772: do { LATDbits.LATD6 = 1; } while(0);
  3393  005112  8C8C               	bsf	3980,6,c	;volatile
  3394                           
  3395                           ;main.c: 773: do { LATDbits.LATD5 = 1; } while(0);
  3396  005114  8A8C               	bsf	3980,5,c	;volatile
  3397                           
  3398                           ;main.c: 774: step=0;
  3399  005116  0E00               	movlw	0
  3400  005118  6E35               	movwf	_step+1,c
  3401  00511A  0E00               	movlw	0
  3402  00511C  6E34               	movwf	_step,c
  3403  00511E  0012               	return	
  3404  005120                     __end_of__stepMotorReverse_:
  3405                           	opt callstack 0
  3406                           
  3407 ;; *************** function _printAuto *****************
  3408 ;; Defined at:
  3409 ;;		line 336 in file "main.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  str            15   46[BANK3 ] unsigned char [15]
  3414 ;;  str            15   31[BANK3 ] unsigned char [15]
  3415 ;;  str            15   16[BANK3 ] unsigned char [15]
  3416 ;;  val            30   74[BANK3 ] float [10]
  3417 ;;  strTemp        16    0[BANK3 ] unsigned char [16]
  3418 ;;  strLux         13   61[BANK3 ] unsigned char [13]
  3419 ;;  valTemp         3  128[BANK3 ] unsigned char [3]
  3420 ;;  finalTempera    3  143[BANK3 ] float 
  3421 ;;  R1              3  137[BANK3 ] float 
  3422 ;;  v_o1            3  134[BANK3 ] float 
  3423 ;;  adcValTemp      3  107[BANK3 ] float 
  3424 ;;  tempLux         3  104[BANK3 ] float 
  3425 ;;  nearFan         1  140[BANK3 ] unsigned char 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3435 ;;      Params:         0       0       0       0       0       0       0
  3436 ;;      Locals:         0       0       0       0     146       0       0
  3437 ;;      Temps:          0       0       2       0       0       0       0
  3438 ;;      Totals:         0       0       2       0     146       0       0
  3439 ;;Total ram usage:      148 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:   12
  3442 ;; This function calls:
  3443 ;;		_ADC_GetConversion
  3444 ;;		_EUSART1_GetAutoModeBool
  3445 ;;		_EUSART1_GetSensorsBool
  3446 ;;		_LCD_clear
  3447 ;;		_LCD_send_string
  3448 ;;		_PWM5_LoadDutyValue
  3449 ;;		___awtoft
  3450 ;;		___ftadd
  3451 ;;		___ftdiv
  3452 ;;		___ftge
  3453 ;;		___ftmul
  3454 ;;		___ftsub
  3455 ;;		___fttol
  3456 ;;		___lwtoft
  3457 ;;		_azoTouchPollAuto
  3458 ;;		_dcMotor
  3459 ;;		_log
  3460 ;;		_pow
  3461 ;;		_sendData
  3462 ;;		_sendPulse1
  3463 ;;		_sendPulse2
  3464 ;;		_sendPulse3
  3465 ;;		_sprintf
  3466 ;;		_strcat
  3467 ;; This function is called by:
  3468 ;;		_main
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           	psect	text5
  3473  0000A8                     __ptext5:
  3474                           	opt callstack 0
  3475  0000A8                     _printAuto:
  3476                           	opt callstack 18
  3477                           
  3478                           ;main.c: 338: if (EUSART1_GetSensorsBool())
  3479                           
  3480                           ;incstack = 0
  3481  0000A8  EC83  F02D         	call	_EUSART1_GetSensorsBool	;wreg free
  3482  0000AC  0900               	iorlw	0
  3483  0000AE  B4D8               	btfsc	status,2,c
  3484  0000B0  D02A               	goto	l11367
  3485                           
  3486                           ;main.c: 339: {;main.c: 340: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  3487  0000B2  C0E4  F097         	movff	_guiLux,___fttol@f1
  3488  0000B6  C0E5  F098         	movff	_guiLux+1,___fttol@f1+1
  3489  0000BA  C0E6  F099         	movff	_guiLux+2,___fttol@f1+2
  3490  0000BE  EC7D  F023         	call	___fttol	;wreg free
  3491  0000C2  C097  F38D         	movff	?___fttol,_printAuto$3993
  3492  0000C6  C098  F38E         	movff	?___fttol+1,_printAuto$3993+1
  3493                           
  3494                           ;main.c: 339: {;main.c: 340: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  3495  0000CA  C0E7  F16B         	movff	_guiTemp,sendData@temp
  3496  0000CE  C0E8  F16C         	movff	_guiTemp+1,sendData@temp+1
  3497  0000D2  C0E9  F16D         	movff	_guiTemp+2,sendData@temp+2
  3498  0000D6  C38D  F16E         	movff	_printAuto$3993,sendData@lux
  3499  0000DA  C38E  F16F         	movff	_printAuto$3993+1,sendData@lux+1
  3500  0000DE  C0DE  F170         	movff	_guiDistanceC,sendData@distanceC
  3501  0000E2  C0DF  F171         	movff	_guiDistanceC+1,sendData@distanceC+1
  3502  0000E6  C0E0  F172         	movff	_guiDistanceC+2,sendData@distanceC+2
  3503  0000EA  C0E1  F173         	movff	_guiDistanceL,sendData@distanceL
  3504  0000EE  C0E2  F174         	movff	_guiDistanceL+1,sendData@distanceL+1
  3505  0000F2  C0E3  F175         	movff	_guiDistanceL+2,sendData@distanceL+2
  3506  0000F6  C0DB  F176         	movff	_guiDistanceR,sendData@distanceR
  3507  0000FA  C0DC  F177         	movff	_guiDistanceR+1,sendData@distanceR+1
  3508  0000FE  C0DD  F178         	movff	_guiDistanceR+2,sendData@distanceR+2
  3509  000102  ECEB  F026         	call	_sendData	;wreg free
  3510  000106                     l11367:
  3511                           
  3512                           ;main.c: 341: };main.c: 343: if (!azoTouchPollAuto())
  3513  000106  EC25  F027         	call	_azoTouchPollAuto	;wreg free
  3514  00010A  0900               	iorlw	0
  3515  00010C  B4D8               	btfsc	status,2,c
  3516  00010E  0012               	return	
  3517                           
  3518                           ;main.c: 347: adcValLight = ADC_GetConversion(channel_AN1);
  3519  000110  0E01               	movlw	1
  3520  000112  EC00  F02C         	call	_ADC_GetConversion
  3521  000116  C01A  F022         	movff	?_ADC_GetConversion,___lwtoft@c
  3522  00011A  C01B  F023         	movff	?_ADC_GetConversion+1,___lwtoft@c+1
  3523  00011E  ECA4  F02C         	call	___lwtoft	;wreg free
  3524  000122  C022  F12E         	movff	?___lwtoft,_adcValLight
  3525  000126  C023  F12F         	movff	?___lwtoft+1,_adcValLight+1
  3526  00012A  C024  F130         	movff	?___lwtoft+2,_adcValLight+2
  3527                           
  3528                           ;main.c: 348: voltageVal = adcValLight/1023 * 3.3;
  3529  00012E  0EC0               	movlw	192
  3530  000130  0100               	movlb	0	; () banked
  3531  000132  6F75               	movwf	___ftdiv@f2& (0+255),b
  3532  000134  0E7F               	movlw	127
  3533  000136  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  3534  000138  0E44               	movlw	68
  3535  00013A  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  3536  00013C  C12E  F072         	movff	_adcValLight,___ftdiv@f1
  3537  000140  C12F  F073         	movff	_adcValLight+1,___ftdiv@f1+1
  3538  000144  C130  F074         	movff	_adcValLight+2,___ftdiv@f1+2
  3539  000148  ECC0  F021         	call	___ftdiv	;wreg free
  3540  00014C  C072  F081         	movff	?___ftdiv,___ftmul@f1
  3541  000150  C073  F082         	movff	?___ftdiv+1,___ftmul@f1+1
  3542  000154  C074  F083         	movff	?___ftdiv+2,___ftmul@f1+2
  3543  000158  0E33               	movlw	51
  3544  00015A  0100               	movlb	0	; () banked
  3545  00015C  6F84               	movwf	___ftmul@f2& (0+255),b
  3546  00015E  0E53               	movlw	83
  3547  000160  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3548  000162  0E40               	movlw	64
  3549  000164  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3550  000166  ECCB  F020         	call	___ftmul	;wreg free
  3551  00016A  C081  F12B         	movff	?___ftmul,_voltageVal
  3552  00016E  C082  F12C         	movff	?___ftmul+1,_voltageVal+1
  3553  000172  C083  F12D         	movff	?___ftmul+2,_voltageVal+2
  3554                           
  3555                           ;main.c: 349: resistorVal = voltageVal*10000/(3.3 - voltageVal);
  3556  000176  0E40               	movlw	64
  3557  000178  0100               	movlb	0	; () banked
  3558  00017A  6F84               	movwf	___ftmul@f2& (0+255),b
  3559  00017C  0E1C               	movlw	28
  3560  00017E  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3561  000180  0E46               	movlw	70
  3562  000182  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3563  000184  C12B  F081         	movff	_voltageVal,___ftmul@f1
  3564  000188  C12C  F082         	movff	_voltageVal+1,___ftmul@f1+1
  3565  00018C  C12D  F083         	movff	_voltageVal+2,___ftmul@f1+2
  3566  000190  ECCB  F020         	call	___ftmul	;wreg free
  3567  000194  C081  F072         	movff	?___ftmul,___ftdiv@f1
  3568  000198  C082  F073         	movff	?___ftmul+1,___ftdiv@f1+1
  3569  00019C  C083  F074         	movff	?___ftmul+2,___ftdiv@f1+2
  3570  0001A0  C12B  F06F         	movff	_voltageVal,___ftsub@f2
  3571  0001A4  C12C  F070         	movff	_voltageVal+1,___ftsub@f2+1
  3572  0001A8  C12D  F071         	movff	_voltageVal+2,___ftsub@f2+2
  3573  0001AC  0E33               	movlw	51
  3574  0001AE  0100               	movlb	0	; () banked
  3575  0001B0  6F6C               	movwf	___ftsub@f1& (0+255),b
  3576  0001B2  0E53               	movlw	83
  3577  0001B4  6F6D               	movwf	(___ftsub@f1+1)& (0+255),b
  3578  0001B6  0E40               	movlw	64
  3579  0001B8  6F6E               	movwf	(___ftsub@f1+2)& (0+255),b
  3580  0001BA  ECAA  F02A         	call	___ftsub	;wreg free
  3581  0001BE  C06C  F075         	movff	?___ftsub,___ftdiv@f2
  3582  0001C2  C06D  F076         	movff	?___ftsub+1,___ftdiv@f2+1
  3583  0001C6  C06E  F077         	movff	?___ftsub+2,___ftdiv@f2+2
  3584  0001CA  ECC0  F021         	call	___ftdiv	;wreg free
  3585  0001CE  C072  F128         	movff	?___ftdiv,_resistorVal
  3586  0001D2  C073  F129         	movff	?___ftdiv+1,_resistorVal+1
  3587  0001D6  C074  F12A         	movff	?___ftdiv+2,_resistorVal+2
  3588                           
  3589                           ;main.c: 350: double tempLux = pow((double)resistorVal,4/3)*10;
  3590  0001DA  0E00               	movlw	0
  3591  0001DC  0100               	movlb	0	; () banked
  3592  0001DE  6FC4               	movwf	pow@y& (0+255),b
  3593  0001E0  0E80               	movlw	128
  3594  0001E2  6FC5               	movwf	(pow@y+1)& (0+255),b
  3595  0001E4  0E3F               	movlw	63
  3596  0001E6  6FC6               	movwf	(pow@y+2)& (0+255),b
  3597  0001E8  C128  F0C1         	movff	_resistorVal,pow@x
  3598  0001EC  C129  F0C2         	movff	_resistorVal+1,pow@x+1
  3599  0001F0  C12A  F0C3         	movff	_resistorVal+2,pow@x+2
  3600  0001F4  ECAF  F01D         	call	_pow	;wreg free
  3601  0001F8  C0C1  F36E         	movff	?_pow,_printAuto$3994
  3602  0001FC  C0C2  F36F         	movff	?_pow+1,_printAuto$3994+1
  3603  000200  C0C3  F370         	movff	?_pow+2,_printAuto$3994+2
  3604                           
  3605                           ;main.c: 350: double tempLux = pow((double)resistorVal,4/3)*10;
  3606  000204  C36E  F081         	movff	_printAuto$3994,___ftmul@f1
  3607  000208  C36F  F082         	movff	_printAuto$3994+1,___ftmul@f1+1
  3608  00020C  C370  F083         	movff	_printAuto$3994+2,___ftmul@f1+2
  3609  000210  0E00               	movlw	0
  3610  000212  0100               	movlb	0	; () banked
  3611  000214  6F84               	movwf	___ftmul@f2& (0+255),b
  3612  000216  0E20               	movlw	32
  3613  000218  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3614  00021A  0E41               	movlw	65
  3615  00021C  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3616  00021E  ECCB  F020         	call	___ftmul	;wreg free
  3617  000222  C081  F368         	movff	?___ftmul,printAuto@tempLux
  3618  000226  C082  F369         	movff	?___ftmul+1,printAuto@tempLux+1
  3619  00022A  C083  F36A         	movff	?___ftmul+2,printAuto@tempLux+2
  3620                           
  3621                           ;main.c: 351: luxVal[0] = 10000/tempLux*100*5;
  3622  00022E  C368  F075         	movff	printAuto@tempLux,___ftdiv@f2
  3623  000232  C369  F076         	movff	printAuto@tempLux+1,___ftdiv@f2+1
  3624  000236  C36A  F077         	movff	printAuto@tempLux+2,___ftdiv@f2+2
  3625  00023A  0E40               	movlw	64
  3626  00023C  0100               	movlb	0	; () banked
  3627  00023E  6F72               	movwf	___ftdiv@f1& (0+255),b
  3628  000240  0E1C               	movlw	28
  3629  000242  6F73               	movwf	(___ftdiv@f1+1)& (0+255),b
  3630  000244  0E46               	movlw	70
  3631  000246  6F74               	movwf	(___ftdiv@f1+2)& (0+255),b
  3632  000248  ECC0  F021         	call	___ftdiv	;wreg free
  3633  00024C  C072  F081         	movff	?___ftdiv,___ftmul@f1
  3634  000250  C073  F082         	movff	?___ftdiv+1,___ftmul@f1+1
  3635  000254  C074  F083         	movff	?___ftdiv+2,___ftmul@f1+2
  3636  000258  0E00               	movlw	0
  3637  00025A  0100               	movlb	0	; () banked
  3638  00025C  6F84               	movwf	___ftmul@f2& (0+255),b
  3639  00025E  0EFA               	movlw	250
  3640  000260  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3641  000262  0E43               	movlw	67
  3642  000264  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3643  000266  ECCB  F020         	call	___ftmul	;wreg free
  3644  00026A  C081  F11C         	movff	?___ftmul,_luxVal
  3645  00026E  C082  F11D         	movff	?___ftmul+1,_luxVal+1
  3646  000272  C083  F11E         	movff	?___ftmul+2,_luxVal+2
  3647                           
  3648                           ;main.c: 353: adcValLight = ADC_GetConversion(channel_AN2);
  3649  000276  0E02               	movlw	2
  3650  000278  EC00  F02C         	call	_ADC_GetConversion
  3651  00027C  C01A  F022         	movff	?_ADC_GetConversion,___lwtoft@c
  3652  000280  C01B  F023         	movff	?_ADC_GetConversion+1,___lwtoft@c+1
  3653  000284  ECA4  F02C         	call	___lwtoft	;wreg free
  3654  000288  C022  F12E         	movff	?___lwtoft,_adcValLight
  3655  00028C  C023  F12F         	movff	?___lwtoft+1,_adcValLight+1
  3656  000290  C024  F130         	movff	?___lwtoft+2,_adcValLight+2
  3657                           
  3658                           ;main.c: 354: voltageVal = adcValLight/1023 * 3.3;
  3659  000294  0EC0               	movlw	192
  3660  000296  0100               	movlb	0	; () banked
  3661  000298  6F75               	movwf	___ftdiv@f2& (0+255),b
  3662  00029A  0E7F               	movlw	127
  3663  00029C  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  3664  00029E  0E44               	movlw	68
  3665  0002A0  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  3666  0002A2  C12E  F072         	movff	_adcValLight,___ftdiv@f1
  3667  0002A6  C12F  F073         	movff	_adcValLight+1,___ftdiv@f1+1
  3668  0002AA  C130  F074         	movff	_adcValLight+2,___ftdiv@f1+2
  3669  0002AE  ECC0  F021         	call	___ftdiv	;wreg free
  3670  0002B2  C072  F081         	movff	?___ftdiv,___ftmul@f1
  3671  0002B6  C073  F082         	movff	?___ftdiv+1,___ftmul@f1+1
  3672  0002BA  C074  F083         	movff	?___ftdiv+2,___ftmul@f1+2
  3673  0002BE  0E33               	movlw	51
  3674  0002C0  0100               	movlb	0	; () banked
  3675  0002C2  6F84               	movwf	___ftmul@f2& (0+255),b
  3676  0002C4  0E53               	movlw	83
  3677  0002C6  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3678  0002C8  0E40               	movlw	64
  3679  0002CA  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3680  0002CC  ECCB  F020         	call	___ftmul	;wreg free
  3681  0002D0  C081  F12B         	movff	?___ftmul,_voltageVal
  3682  0002D4  C082  F12C         	movff	?___ftmul+1,_voltageVal+1
  3683  0002D8  C083  F12D         	movff	?___ftmul+2,_voltageVal+2
  3684                           
  3685                           ;main.c: 355: resistorVal = voltageVal*10000/(3.3 - voltageVal);
  3686  0002DC  0E40               	movlw	64
  3687  0002DE  0100               	movlb	0	; () banked
  3688  0002E0  6F84               	movwf	___ftmul@f2& (0+255),b
  3689  0002E2  0E1C               	movlw	28
  3690  0002E4  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3691  0002E6  0E46               	movlw	70
  3692  0002E8  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3693  0002EA  C12B  F081         	movff	_voltageVal,___ftmul@f1
  3694  0002EE  C12C  F082         	movff	_voltageVal+1,___ftmul@f1+1
  3695  0002F2  C12D  F083         	movff	_voltageVal+2,___ftmul@f1+2
  3696  0002F6  ECCB  F020         	call	___ftmul	;wreg free
  3697  0002FA  C081  F072         	movff	?___ftmul,___ftdiv@f1
  3698  0002FE  C082  F073         	movff	?___ftmul+1,___ftdiv@f1+1
  3699  000302  C083  F074         	movff	?___ftmul+2,___ftdiv@f1+2
  3700  000306  C12B  F06F         	movff	_voltageVal,___ftsub@f2
  3701  00030A  C12C  F070         	movff	_voltageVal+1,___ftsub@f2+1
  3702  00030E  C12D  F071         	movff	_voltageVal+2,___ftsub@f2+2
  3703  000312  0E33               	movlw	51
  3704  000314  0100               	movlb	0	; () banked
  3705  000316  6F6C               	movwf	___ftsub@f1& (0+255),b
  3706  000318  0E53               	movlw	83
  3707  00031A  6F6D               	movwf	(___ftsub@f1+1)& (0+255),b
  3708  00031C  0E40               	movlw	64
  3709  00031E  6F6E               	movwf	(___ftsub@f1+2)& (0+255),b
  3710  000320  ECAA  F02A         	call	___ftsub	;wreg free
  3711  000324  C06C  F075         	movff	?___ftsub,___ftdiv@f2
  3712  000328  C06D  F076         	movff	?___ftsub+1,___ftdiv@f2+1
  3713  00032C  C06E  F077         	movff	?___ftsub+2,___ftdiv@f2+2
  3714  000330  ECC0  F021         	call	___ftdiv	;wreg free
  3715  000334  C072  F128         	movff	?___ftdiv,_resistorVal
  3716  000338  C073  F129         	movff	?___ftdiv+1,_resistorVal+1
  3717  00033C  C074  F12A         	movff	?___ftdiv+2,_resistorVal+2
  3718                           
  3719                           ;main.c: 356: double tempLux = pow((double)resistorVal,4/3)*10;
  3720  000340  0E00               	movlw	0
  3721  000342  0100               	movlb	0	; () banked
  3722  000344  6FC4               	movwf	pow@y& (0+255),b
  3723  000346  0E80               	movlw	128
  3724  000348  6FC5               	movwf	(pow@y+1)& (0+255),b
  3725  00034A  0E3F               	movlw	63
  3726  00034C  6FC6               	movwf	(pow@y+2)& (0+255),b
  3727  00034E  C128  F0C1         	movff	_resistorVal,pow@x
  3728  000352  C129  F0C2         	movff	_resistorVal+1,pow@x+1
  3729  000356  C12A  F0C3         	movff	_resistorVal+2,pow@x+2
  3730  00035A  ECAF  F01D         	call	_pow	;wreg free
  3731  00035E  C0C1  F36E         	movff	?_pow,_printAuto$3994
  3732  000362  C0C2  F36F         	movff	?_pow+1,_printAuto$3994+1
  3733  000366  C0C3  F370         	movff	?_pow+2,_printAuto$3994+2
  3734                           
  3735                           ;main.c: 356: double tempLux = pow((double)resistorVal,4/3)*10;
  3736  00036A  C36E  F081         	movff	_printAuto$3994,___ftmul@f1
  3737  00036E  C36F  F082         	movff	_printAuto$3994+1,___ftmul@f1+1
  3738  000372  C370  F083         	movff	_printAuto$3994+2,___ftmul@f1+2
  3739  000376  0E00               	movlw	0
  3740  000378  0100               	movlb	0	; () banked
  3741  00037A  6F84               	movwf	___ftmul@f2& (0+255),b
  3742  00037C  0E20               	movlw	32
  3743  00037E  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3744  000380  0E41               	movlw	65
  3745  000382  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3746  000384  ECCB  F020         	call	___ftmul	;wreg free
  3747  000388  C081  F368         	movff	?___ftmul,printAuto@tempLux
  3748  00038C  C082  F369         	movff	?___ftmul+1,printAuto@tempLux+1
  3749  000390  C083  F36A         	movff	?___ftmul+2,printAuto@tempLux+2
  3750                           
  3751                           ;main.c: 357: luxVal[1] = 10000/tempLux*100*5;
  3752  000394  C368  F075         	movff	printAuto@tempLux,___ftdiv@f2
  3753  000398  C369  F076         	movff	printAuto@tempLux+1,___ftdiv@f2+1
  3754  00039C  C36A  F077         	movff	printAuto@tempLux+2,___ftdiv@f2+2
  3755  0003A0  0E40               	movlw	64
  3756  0003A2  0100               	movlb	0	; () banked
  3757  0003A4  6F72               	movwf	___ftdiv@f1& (0+255),b
  3758  0003A6  0E1C               	movlw	28
  3759  0003A8  6F73               	movwf	(___ftdiv@f1+1)& (0+255),b
  3760  0003AA  0E46               	movlw	70
  3761  0003AC  6F74               	movwf	(___ftdiv@f1+2)& (0+255),b
  3762  0003AE  ECC0  F021         	call	___ftdiv	;wreg free
  3763  0003B2  C072  F081         	movff	?___ftdiv,___ftmul@f1
  3764  0003B6  C073  F082         	movff	?___ftdiv+1,___ftmul@f1+1
  3765  0003BA  C074  F083         	movff	?___ftdiv+2,___ftmul@f1+2
  3766  0003BE  0E00               	movlw	0
  3767  0003C0  0100               	movlb	0	; () banked
  3768  0003C2  6F84               	movwf	___ftmul@f2& (0+255),b
  3769  0003C4  0EFA               	movlw	250
  3770  0003C6  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3771  0003C8  0E43               	movlw	67
  3772  0003CA  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3773  0003CC  ECCB  F020         	call	___ftmul	;wreg free
  3774  0003D0  C081  F11F         	movff	?___ftmul,_luxVal+3
  3775  0003D4  C082  F120         	movff	?___ftmul+1,_luxVal+4
  3776  0003D8  C083  F121         	movff	?___ftmul+2,_luxVal+5
  3777                           
  3778                           ;main.c: 358: finalLux = (luxVal[0] + luxVal[1]) / 2;
  3779  0003DC  C11C  F063         	movff	_luxVal,___ftadd@f2
  3780  0003E0  C11D  F064         	movff	_luxVal+1,___ftadd@f2+1
  3781  0003E4  C11E  F065         	movff	_luxVal+2,___ftadd@f2+2
  3782  0003E8  C11F  F060         	movff	_luxVal+3,___ftadd@f1
  3783  0003EC  C120  F061         	movff	_luxVal+4,___ftadd@f1+1
  3784  0003F0  C121  F062         	movff	_luxVal+5,___ftadd@f1+2
  3785  0003F4  ECDA  F01C         	call	___ftadd	;wreg free
  3786  0003F8  C060  F072         	movff	?___ftadd,___ftdiv@f1
  3787  0003FC  C061  F073         	movff	?___ftadd+1,___ftdiv@f1+1
  3788  000400  C062  F074         	movff	?___ftadd+2,___ftdiv@f1+2
  3789  000404  0E00               	movlw	0
  3790  000406  0100               	movlb	0	; () banked
  3791  000408  6F75               	movwf	___ftdiv@f2& (0+255),b
  3792  00040A  0E00               	movlw	0
  3793  00040C  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  3794  00040E  0E40               	movlw	64
  3795  000410  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  3796  000412  ECC0  F021         	call	___ftdiv	;wreg free
  3797  000416  C072  F125         	movff	?___ftdiv,_finalLux
  3798  00041A  C073  F126         	movff	?___ftdiv+1,_finalLux+1
  3799  00041E  C074  F127         	movff	?___ftdiv+2,_finalLux+2
  3800                           
  3801                           ;main.c: 359: guiLux = finalLux;
  3802  000422  C125  F0E4         	movff	_finalLux,_guiLux
  3803  000426  C126  F0E5         	movff	_finalLux+1,_guiLux+1
  3804  00042A  C127  F0E6         	movff	_finalLux+2,_guiLux+2
  3805                           
  3806                           ;main.c: 361: float val[10];;main.c: 362: sprintf(val,"%.1f",finalLux);
  3807  00042E  0E4A               	movlw	low printAuto@val
  3808  000430  0100               	movlb	0	; () banked
  3809  000432  6FC9               	movwf	sprintf@wh& (0+255),b
  3810  000434  0E03               	movlw	high printAuto@val
  3811  000436  6FCA               	movwf	(sprintf@wh+1)& (0+255),b
  3812  000438  0EF5               	movlw	low STR_16
  3813  00043A  6FCB               	movwf	sprintf@f& (0+255),b
  3814  00043C  0E7F               	movlw	high STR_16
  3815  00043E  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  3816  000440  C125  F0CD         	movff	_finalLux,?_sprintf+4
  3817  000444  C126  F0CE         	movff	_finalLux+1,?_sprintf+5
  3818  000448  C127  F0CF         	movff	_finalLux+2,?_sprintf+6
  3819  00044C  EC46  F02A         	call	_sprintf	;wreg free
  3820                           
  3821                           ;main.c: 363: char strLux[]="Light (Lux)\n";
  3822  000450  EE22  F03D         	lfsr	2,printAuto@F6413
  3823  000454  EE13  F03D         	lfsr	1,printAuto@strLux
  3824  000458  0E0C               	movlw	12
  3825  00045A                     u13411:
  3826  00045A  CFDB FFE3          	movff	plusw2,plusw1
  3827  00045E  06E8               	decf	wreg,f,c
  3828  000460  E2FC               	bc	u13411
  3829                           
  3830                           ;main.c: 364: strcat(strLux,val);
  3831  000462  0E3D               	movlw	low printAuto@strLux
  3832  000464  6E1A               	movwf	strcat@to,c
  3833  000466  0E03               	movlw	high printAuto@strLux
  3834  000468  6E1B               	movwf	strcat@to+1,c
  3835  00046A  0E4A               	movlw	low printAuto@val
  3836  00046C  6E1C               	movwf	strcat@from,c
  3837  00046E  0E03               	movlw	high printAuto@val
  3838  000470  6E1D               	movwf	strcat@from+1,c
  3839  000472  EC68  F02A         	call	_strcat	;wreg free
  3840                           
  3841                           ;main.c: 365: LCD_clear();
  3842  000476  EC7E  F02C         	call	_LCD_clear	;wreg free
  3843                           
  3844                           ;main.c: 366: LCD_send_string(strLux, 1);
  3845  00047A  0E3D               	movlw	low printAuto@strLux
  3846  00047C  0100               	movlb	0	; () banked
  3847  00047E  6F60               	movwf	LCD_send_string@str& (0+255),b
  3848  000480  0E03               	movlw	high printAuto@strLux
  3849  000482  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  3850  000484  0E01               	movlw	1
  3851  000486  6F62               	movwf	LCD_send_string@line& (0+255),b
  3852  000488  EC20  F013         	call	_LCD_send_string	;wreg free
  3853                           
  3854                           ;main.c: 367: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3855  00048C  0E0B               	movlw	11
  3856  00048E  0101               	movlb	1	; () banked
  3857  000490  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  3858  000492  0E26               	movlw	38
  3859  000494  6F79               	movwf	??_printAuto& (0+255),b
  3860  000496  0E5D               	movlw	93
  3861  000498                     u14037:
  3862  000498  2EE8               	decfsz	wreg,f,c
  3863  00049A  D7FE               	bra	u14037
  3864  00049C  2F79               	decfsz	??_printAuto& (0+255),f,b
  3865  00049E  D7FC               	bra	u14037
  3866  0004A0  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  3867  0004A2  D7FA               	bra	u14037
  3868  0004A4  D000               	nop2	
  3869                           
  3870                           ;main.c: 369: if (!EUSART1_GetAutoModeBool()) {
  3871  0004A6  EC86  F02D         	call	_EUSART1_GetAutoModeBool	;wreg free
  3872  0004AA  0900               	iorlw	0
  3873  0004AC  A4D8               	btfss	status,2,c
  3874  0004AE  D013               	goto	l11409
  3875                           
  3876                           ;main.c: 370: if (finalLux < 30.0) {
  3877  0004B0  C125  F01A         	movff	_finalLux,___ftge@ff1
  3878  0004B4  C126  F01B         	movff	_finalLux+1,___ftge@ff1+1
  3879  0004B8  C127  F01C         	movff	_finalLux+2,___ftge@ff1+2
  3880  0004BC  0E00               	movlw	0
  3881  0004BE  6E1D               	movwf	___ftge@ff2,c
  3882  0004C0  0EF0               	movlw	240
  3883  0004C2  6E1E               	movwf	___ftge@ff2+1,c
  3884  0004C4  0E41               	movlw	65
  3885  0004C6  6E1F               	movwf	___ftge@ff2+2,c
  3886  0004C8  EC5F  F027         	call	___ftge	;wreg free
  3887  0004CC  B0D8               	btfsc	status,0,c
  3888  0004CE  D002               	goto	l1129
  3889                           
  3890                           ;main.c: 371: do { LATAbits.LATA0 = 1; } while(0);
  3891  0004D0  8089               	bsf	3977,0,c	;volatile
  3892  0004D2  D001               	goto	l11409
  3893  0004D4                     l1129:
  3894  0004D4  9089               	bcf	3977,0,c	;volatile
  3895  0004D6                     l11409:
  3896                           
  3897                           ;main.c: 374: };main.c: 375: };main.c: 377: if (!azoTouchPollAuto())
  3898  0004D6  EC25  F027         	call	_azoTouchPollAuto	;wreg free
  3899  0004DA  0900               	iorlw	0
  3900  0004DC  B4D8               	btfsc	status,2,c
  3901  0004DE  0012               	return	
  3902                           
  3903                           ;main.c: 380: if (EUSART1_GetSensorsBool())
  3904  0004E0  EC83  F02D         	call	_EUSART1_GetSensorsBool	;wreg free
  3905  0004E4  0900               	iorlw	0
  3906  0004E6  B4D8               	btfsc	status,2,c
  3907  0004E8  D02A               	goto	l11419
  3908                           
  3909                           ;main.c: 381: {;main.c: 382: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  3910  0004EA  C0E4  F097         	movff	_guiLux,___fttol@f1
  3911  0004EE  C0E5  F098         	movff	_guiLux+1,___fttol@f1+1
  3912  0004F2  C0E6  F099         	movff	_guiLux+2,___fttol@f1+2
  3913  0004F6  EC7D  F023         	call	___fttol	;wreg free
  3914  0004FA  C097  F38D         	movff	?___fttol,_printAuto$3993
  3915  0004FE  C098  F38E         	movff	?___fttol+1,_printAuto$3993+1
  3916                           
  3917                           ;main.c: 381: {;main.c: 382: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  3918  000502  C0E7  F16B         	movff	_guiTemp,sendData@temp
  3919  000506  C0E8  F16C         	movff	_guiTemp+1,sendData@temp+1
  3920  00050A  C0E9  F16D         	movff	_guiTemp+2,sendData@temp+2
  3921  00050E  C38D  F16E         	movff	_printAuto$3993,sendData@lux
  3922  000512  C38E  F16F         	movff	_printAuto$3993+1,sendData@lux+1
  3923  000516  C0DE  F170         	movff	_guiDistanceC,sendData@distanceC
  3924  00051A  C0DF  F171         	movff	_guiDistanceC+1,sendData@distanceC+1
  3925  00051E  C0E0  F172         	movff	_guiDistanceC+2,sendData@distanceC+2
  3926  000522  C0E1  F173         	movff	_guiDistanceL,sendData@distanceL
  3927  000526  C0E2  F174         	movff	_guiDistanceL+1,sendData@distanceL+1
  3928  00052A  C0E3  F175         	movff	_guiDistanceL+2,sendData@distanceL+2
  3929  00052E  C0DB  F176         	movff	_guiDistanceR,sendData@distanceR
  3930  000532  C0DC  F177         	movff	_guiDistanceR+1,sendData@distanceR+1
  3931  000536  C0DD  F178         	movff	_guiDistanceR+2,sendData@distanceR+2
  3932  00053A  ECEB  F026         	call	_sendData	;wreg free
  3933  00053E                     l11419:
  3934                           
  3935                           ;main.c: 383: };main.c: 386: float adcValTemp = ADC_GetConversion(channel_AN3);
  3936  00053E  0E03               	movlw	3
  3937  000540  EC00  F02C         	call	_ADC_GetConversion
  3938  000544  C01A  F022         	movff	?_ADC_GetConversion,___lwtoft@c
  3939  000548  C01B  F023         	movff	?_ADC_GetConversion+1,___lwtoft@c+1
  3940  00054C  ECA4  F02C         	call	___lwtoft	;wreg free
  3941  000550  C022  F36B         	movff	?___lwtoft,printAuto@adcValTemp
  3942  000554  C023  F36C         	movff	?___lwtoft+1,printAuto@adcValTemp+1
  3943  000558  C024  F36D         	movff	?___lwtoft+2,printAuto@adcValTemp+2
  3944                           
  3945                           ;main.c: 387: double v_o1 = adcValTemp /1023 *3.3;
  3946  00055C  0EC0               	movlw	192
  3947  00055E  0100               	movlb	0	; () banked
  3948  000560  6F75               	movwf	___ftdiv@f2& (0+255),b
  3949  000562  0E7F               	movlw	127
  3950  000564  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  3951  000566  0E44               	movlw	68
  3952  000568  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  3953  00056A  C36B  F072         	movff	printAuto@adcValTemp,___ftdiv@f1
  3954  00056E  C36C  F073         	movff	printAuto@adcValTemp+1,___ftdiv@f1+1
  3955  000572  C36D  F074         	movff	printAuto@adcValTemp+2,___ftdiv@f1+2
  3956  000576  ECC0  F021         	call	___ftdiv	;wreg free
  3957  00057A  C072  F081         	movff	?___ftdiv,___ftmul@f1
  3958  00057E  C073  F082         	movff	?___ftdiv+1,___ftmul@f1+1
  3959  000582  C074  F083         	movff	?___ftdiv+2,___ftmul@f1+2
  3960  000586  0E33               	movlw	51
  3961  000588  0100               	movlb	0	; () banked
  3962  00058A  6F84               	movwf	___ftmul@f2& (0+255),b
  3963  00058C  0E53               	movlw	83
  3964  00058E  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3965  000590  0E40               	movlw	64
  3966  000592  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3967  000594  ECCB  F020         	call	___ftmul	;wreg free
  3968  000598  C081  F386         	movff	?___ftmul,printAuto@v_o1
  3969  00059C  C082  F387         	movff	?___ftmul+1,printAuto@v_o1+1
  3970  0005A0  C083  F388         	movff	?___ftmul+2,printAuto@v_o1+2
  3971                           
  3972                           ;main.c: 388: float R1 = v_o1*10000/(3.3-v_o1);
  3973  0005A4  0E40               	movlw	64
  3974  0005A6  0100               	movlb	0	; () banked
  3975  0005A8  6F84               	movwf	___ftmul@f2& (0+255),b
  3976  0005AA  0E1C               	movlw	28
  3977  0005AC  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  3978  0005AE  0E46               	movlw	70
  3979  0005B0  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  3980  0005B2  C386  F081         	movff	printAuto@v_o1,___ftmul@f1
  3981  0005B6  C387  F082         	movff	printAuto@v_o1+1,___ftmul@f1+1
  3982  0005BA  C388  F083         	movff	printAuto@v_o1+2,___ftmul@f1+2
  3983  0005BE  ECCB  F020         	call	___ftmul	;wreg free
  3984  0005C2  C081  F072         	movff	?___ftmul,___ftdiv@f1
  3985  0005C6  C082  F073         	movff	?___ftmul+1,___ftdiv@f1+1
  3986  0005CA  C083  F074         	movff	?___ftmul+2,___ftdiv@f1+2
  3987  0005CE  C386  F06F         	movff	printAuto@v_o1,___ftsub@f2
  3988  0005D2  C387  F070         	movff	printAuto@v_o1+1,___ftsub@f2+1
  3989  0005D6  C388  F071         	movff	printAuto@v_o1+2,___ftsub@f2+2
  3990  0005DA  0E33               	movlw	51
  3991  0005DC  0100               	movlb	0	; () banked
  3992  0005DE  6F6C               	movwf	___ftsub@f1& (0+255),b
  3993  0005E0  0E53               	movlw	83
  3994  0005E2  6F6D               	movwf	(___ftsub@f1+1)& (0+255),b
  3995  0005E4  0E40               	movlw	64
  3996  0005E6  6F6E               	movwf	(___ftsub@f1+2)& (0+255),b
  3997  0005E8  ECAA  F02A         	call	___ftsub	;wreg free
  3998  0005EC  C06C  F075         	movff	?___ftsub,___ftdiv@f2
  3999  0005F0  C06D  F076         	movff	?___ftsub+1,___ftdiv@f2+1
  4000  0005F4  C06E  F077         	movff	?___ftsub+2,___ftdiv@f2+2
  4001  0005F8  ECC0  F021         	call	___ftdiv	;wreg free
  4002  0005FC  C072  F389         	movff	?___ftdiv,printAuto@R1
  4003  000600  C073  F38A         	movff	?___ftdiv+1,printAuto@R1+1
  4004  000604  C074  F38B         	movff	?___ftdiv+2,printAuto@R1+2
  4005                           
  4006                           ;main.c: 389: temperatureVal[0] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4007  000608  C389  F09C         	movff	printAuto@R1,log@x
  4008  00060C  C38A  F09D         	movff	printAuto@R1+1,log@x+1
  4009  000610  C38B  F09E         	movff	printAuto@R1+2,log@x+2
  4010  000614  ECB7  F01F         	call	_log	;wreg free
  4011  000618  C09C  F371         	movff	?_log,_printAuto$3995
  4012  00061C  C09D  F372         	movff	?_log+1,_printAuto$3995+1
  4013  000620  C09E  F373         	movff	?_log+2,_printAuto$3995+2
  4014                           
  4015                           ;main.c: 389: temperatureVal[0] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4016  000624  0E00               	movlw	0
  4017  000626  0100               	movlb	0	; () banked
  4018  000628  6FC4               	movwf	pow@y& (0+255),b
  4019  00062A  0E40               	movlw	64
  4020  00062C  6FC5               	movwf	(pow@y+1)& (0+255),b
  4021  00062E  0E40               	movlw	64
  4022  000630  6FC6               	movwf	(pow@y+2)& (0+255),b
  4023  000632  C371  F0C1         	movff	_printAuto$3995,pow@x
  4024  000636  C372  F0C2         	movff	_printAuto$3995+1,pow@x+1
  4025  00063A  C373  F0C3         	movff	_printAuto$3995+2,pow@x+2
  4026  00063E  ECAF  F01D         	call	_pow	;wreg free
  4027  000642  C0C1  F374         	movff	?_pow,_printAuto$3996
  4028  000646  C0C2  F375         	movff	?_pow+1,_printAuto$3996+1
  4029  00064A  C0C3  F376         	movff	?_pow+2,_printAuto$3996+2
  4030                           
  4031                           ;main.c: 389: temperatureVal[0] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4032  00064E  C389  F09C         	movff	printAuto@R1,log@x
  4033  000652  C38A  F09D         	movff	printAuto@R1+1,log@x+1
  4034  000656  C38B  F09E         	movff	printAuto@R1+2,log@x+2
  4035  00065A  ECB7  F01F         	call	_log	;wreg free
  4036  00065E  C09C  F377         	movff	?_log,_printAuto$3997
  4037  000662  C09D  F378         	movff	?_log+1,_printAuto$3997+1
  4038  000666  C09E  F379         	movff	?_log+2,_printAuto$3997+2
  4039                           
  4040                           ;main.c: 389: temperatureVal[0] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4041  00066A  0EF6               	movlw	246
  4042  00066C  0100               	movlb	0	; () banked
  4043  00066E  6F84               	movwf	___ftmul@f2& (0+255),b
  4044  000670  0EB7               	movlw	183
  4045  000672  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  4046  000674  0E33               	movlw	51
  4047  000676  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  4048  000678  C374  F081         	movff	_printAuto$3996,___ftmul@f1
  4049  00067C  C375  F082         	movff	_printAuto$3996+1,___ftmul@f1+1
  4050  000680  C376  F083         	movff	_printAuto$3996+2,___ftmul@f1+2
  4051  000684  ECCB  F020         	call	___ftmul	;wreg free
  4052  000688  C081  F063         	movff	?___ftmul,___ftadd@f2
  4053  00068C  C082  F064         	movff	?___ftmul+1,___ftadd@f2+1
  4054  000690  C083  F065         	movff	?___ftmul+2,___ftadd@f2+2
  4055  000694  0E1D               	movlw	29
  4056  000696  0100               	movlb	0	; () banked
  4057  000698  6F84               	movwf	___ftmul@f2& (0+255),b
  4058  00069A  0E76               	movlw	118
  4059  00069C  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  4060  00069E  0E39               	movlw	57
  4061  0006A0  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  4062  0006A2  C377  F081         	movff	_printAuto$3997,___ftmul@f1
  4063  0006A6  C378  F082         	movff	_printAuto$3997+1,___ftmul@f1+1
  4064  0006AA  C379  F083         	movff	_printAuto$3997+2,___ftmul@f1+2
  4065  0006AE  ECCB  F020         	call	___ftmul	;wreg free
  4066  0006B2  C081  F060         	movff	?___ftmul,___ftadd@f1
  4067  0006B6  C082  F061         	movff	?___ftmul+1,___ftadd@f1+1
  4068  0006BA  C083  F062         	movff	?___ftmul+2,___ftadd@f1+2
  4069  0006BE  ECDA  F01C         	call	___ftadd	;wreg free
  4070  0006C2  C060  F37A         	movff	?___ftadd,_printAuto$3998
  4071  0006C6  C061  F37B         	movff	?___ftadd+1,_printAuto$3998+1
  4072  0006CA  C062  F37C         	movff	?___ftadd+2,_printAuto$3998+2
  4073                           
  4074                           ;main.c: 389: temperatureVal[0] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4075  0006CE  C185  F063         	movff	_A,___ftadd@f2
  4076  0006D2  C186  F064         	movff	_A+1,___ftadd@f2+1
  4077  0006D6  C187  F065         	movff	_A+2,___ftadd@f2+2
  4078  0006DA  C37A  F060         	movff	_printAuto$3998,___ftadd@f1
  4079  0006DE  C37B  F061         	movff	_printAuto$3998+1,___ftadd@f1+1
  4080  0006E2  C37C  F062         	movff	_printAuto$3998+2,___ftadd@f1+2
  4081  0006E6  ECDA  F01C         	call	___ftadd	;wreg free
  4082  0006EA  C060  F075         	movff	?___ftadd,___ftdiv@f2
  4083  0006EE  C061  F076         	movff	?___ftadd+1,___ftdiv@f2+1
  4084  0006F2  C062  F077         	movff	?___ftadd+2,___ftdiv@f2+2
  4085  0006F6  0E00               	movlw	0
  4086  0006F8  0100               	movlb	0	; () banked
  4087  0006FA  6F72               	movwf	___ftdiv@f1& (0+255),b
  4088  0006FC  0E80               	movlw	128
  4089  0006FE  6F73               	movwf	(___ftdiv@f1+1)& (0+255),b
  4090  000700  0E3F               	movlw	63
  4091  000702  6F74               	movwf	(___ftdiv@f1+2)& (0+255),b
  4092  000704  ECC0  F021         	call	___ftdiv	;wreg free
  4093  000708  C072  F37D         	movff	?___ftdiv,_printAuto$3999
  4094  00070C  C073  F37E         	movff	?___ftdiv+1,_printAuto$3999+1
  4095  000710  C074  F37F         	movff	?___ftdiv+2,_printAuto$3999+2
  4096                           
  4097                           ;main.c: 389: temperatureVal[0] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4098  000714  C37D  F060         	movff	_printAuto$3999,___ftadd@f1
  4099  000718  C37E  F061         	movff	_printAuto$3999+1,___ftadd@f1+1
  4100  00071C  C37F  F062         	movff	_printAuto$3999+2,___ftadd@f1+2
  4101  000720  0E80               	movlw	128
  4102  000722  0100               	movlb	0	; () banked
  4103  000724  6F63               	movwf	___ftadd@f2& (0+255),b
  4104  000726  0E88               	movlw	136
  4105  000728  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  4106  00072A  0EC3               	movlw	195
  4107  00072C  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  4108  00072E  ECDA  F01C         	call	___ftadd	;wreg free
  4109  000732  C060  F116         	movff	?___ftadd,_temperatureVal
  4110  000736  C061  F117         	movff	?___ftadd+1,_temperatureVal+1
  4111  00073A  C062  F118         	movff	?___ftadd+2,_temperatureVal+2
  4112                           
  4113                           ;main.c: 391: float adcValTemp = ADC_GetConversion(channel_AN4);
  4114  00073E  0E04               	movlw	4
  4115  000740  EC00  F02C         	call	_ADC_GetConversion
  4116  000744  C01A  F022         	movff	?_ADC_GetConversion,___lwtoft@c
  4117  000748  C01B  F023         	movff	?_ADC_GetConversion+1,___lwtoft@c+1
  4118  00074C  ECA4  F02C         	call	___lwtoft	;wreg free
  4119  000750  C022  F36B         	movff	?___lwtoft,printAuto@adcValTemp
  4120  000754  C023  F36C         	movff	?___lwtoft+1,printAuto@adcValTemp+1
  4121  000758  C024  F36D         	movff	?___lwtoft+2,printAuto@adcValTemp+2
  4122                           
  4123                           ;main.c: 392: double v_o1 = adcValTemp /1023 *3.3;
  4124  00075C  0EC0               	movlw	192
  4125  00075E  0100               	movlb	0	; () banked
  4126  000760  6F75               	movwf	___ftdiv@f2& (0+255),b
  4127  000762  0E7F               	movlw	127
  4128  000764  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  4129  000766  0E44               	movlw	68
  4130  000768  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  4131  00076A  C36B  F072         	movff	printAuto@adcValTemp,___ftdiv@f1
  4132  00076E  C36C  F073         	movff	printAuto@adcValTemp+1,___ftdiv@f1+1
  4133  000772  C36D  F074         	movff	printAuto@adcValTemp+2,___ftdiv@f1+2
  4134  000776  ECC0  F021         	call	___ftdiv	;wreg free
  4135  00077A  C072  F081         	movff	?___ftdiv,___ftmul@f1
  4136  00077E  C073  F082         	movff	?___ftdiv+1,___ftmul@f1+1
  4137  000782  C074  F083         	movff	?___ftdiv+2,___ftmul@f1+2
  4138  000786  0E33               	movlw	51
  4139  000788  0100               	movlb	0	; () banked
  4140  00078A  6F84               	movwf	___ftmul@f2& (0+255),b
  4141  00078C  0E53               	movlw	83
  4142  00078E  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  4143  000790  0E40               	movlw	64
  4144  000792  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  4145  000794  ECCB  F020         	call	___ftmul	;wreg free
  4146  000798  C081  F386         	movff	?___ftmul,printAuto@v_o1
  4147  00079C  C082  F387         	movff	?___ftmul+1,printAuto@v_o1+1
  4148  0007A0  C083  F388         	movff	?___ftmul+2,printAuto@v_o1+2
  4149                           
  4150                           ;main.c: 393: float R1 = v_o1*10000/(3.3-v_o1);
  4151  0007A4  0E40               	movlw	64
  4152  0007A6  0100               	movlb	0	; () banked
  4153  0007A8  6F84               	movwf	___ftmul@f2& (0+255),b
  4154  0007AA  0E1C               	movlw	28
  4155  0007AC  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  4156  0007AE  0E46               	movlw	70
  4157  0007B0  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  4158  0007B2  C386  F081         	movff	printAuto@v_o1,___ftmul@f1
  4159  0007B6  C387  F082         	movff	printAuto@v_o1+1,___ftmul@f1+1
  4160  0007BA  C388  F083         	movff	printAuto@v_o1+2,___ftmul@f1+2
  4161  0007BE  ECCB  F020         	call	___ftmul	;wreg free
  4162  0007C2  C081  F072         	movff	?___ftmul,___ftdiv@f1
  4163  0007C6  C082  F073         	movff	?___ftmul+1,___ftdiv@f1+1
  4164  0007CA  C083  F074         	movff	?___ftmul+2,___ftdiv@f1+2
  4165  0007CE  C386  F06F         	movff	printAuto@v_o1,___ftsub@f2
  4166  0007D2  C387  F070         	movff	printAuto@v_o1+1,___ftsub@f2+1
  4167  0007D6  C388  F071         	movff	printAuto@v_o1+2,___ftsub@f2+2
  4168  0007DA  0E33               	movlw	51
  4169  0007DC  0100               	movlb	0	; () banked
  4170  0007DE  6F6C               	movwf	___ftsub@f1& (0+255),b
  4171  0007E0  0E53               	movlw	83
  4172  0007E2  6F6D               	movwf	(___ftsub@f1+1)& (0+255),b
  4173  0007E4  0E40               	movlw	64
  4174  0007E6  6F6E               	movwf	(___ftsub@f1+2)& (0+255),b
  4175  0007E8  ECAA  F02A         	call	___ftsub	;wreg free
  4176  0007EC  C06C  F075         	movff	?___ftsub,___ftdiv@f2
  4177  0007F0  C06D  F076         	movff	?___ftsub+1,___ftdiv@f2+1
  4178  0007F4  C06E  F077         	movff	?___ftsub+2,___ftdiv@f2+2
  4179  0007F8  ECC0  F021         	call	___ftdiv	;wreg free
  4180  0007FC  C072  F389         	movff	?___ftdiv,printAuto@R1
  4181  000800  C073  F38A         	movff	?___ftdiv+1,printAuto@R1+1
  4182  000804  C074  F38B         	movff	?___ftdiv+2,printAuto@R1+2
  4183                           
  4184                           ;main.c: 394: temperatureVal[1] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4185  000808  C389  F09C         	movff	printAuto@R1,log@x
  4186  00080C  C38A  F09D         	movff	printAuto@R1+1,log@x+1
  4187  000810  C38B  F09E         	movff	printAuto@R1+2,log@x+2
  4188  000814  ECB7  F01F         	call	_log	;wreg free
  4189  000818  C09C  F371         	movff	?_log,_printAuto$3995
  4190  00081C  C09D  F372         	movff	?_log+1,_printAuto$3995+1
  4191  000820  C09E  F373         	movff	?_log+2,_printAuto$3995+2
  4192                           
  4193                           ;main.c: 394: temperatureVal[1] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4194  000824  0E00               	movlw	0
  4195  000826  0100               	movlb	0	; () banked
  4196  000828  6FC4               	movwf	pow@y& (0+255),b
  4197  00082A  0E40               	movlw	64
  4198  00082C  6FC5               	movwf	(pow@y+1)& (0+255),b
  4199  00082E  0E40               	movlw	64
  4200  000830  6FC6               	movwf	(pow@y+2)& (0+255),b
  4201  000832  C371  F0C1         	movff	_printAuto$3995,pow@x
  4202  000836  C372  F0C2         	movff	_printAuto$3995+1,pow@x+1
  4203  00083A  C373  F0C3         	movff	_printAuto$3995+2,pow@x+2
  4204  00083E  ECAF  F01D         	call	_pow	;wreg free
  4205  000842  C0C1  F374         	movff	?_pow,_printAuto$3996
  4206  000846  C0C2  F375         	movff	?_pow+1,_printAuto$3996+1
  4207  00084A  C0C3  F376         	movff	?_pow+2,_printAuto$3996+2
  4208                           
  4209                           ;main.c: 394: temperatureVal[1] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4210  00084E  C389  F09C         	movff	printAuto@R1,log@x
  4211  000852  C38A  F09D         	movff	printAuto@R1+1,log@x+1
  4212  000856  C38B  F09E         	movff	printAuto@R1+2,log@x+2
  4213  00085A  ECB7  F01F         	call	_log	;wreg free
  4214  00085E  C09C  F377         	movff	?_log,_printAuto$3997
  4215  000862  C09D  F378         	movff	?_log+1,_printAuto$3997+1
  4216  000866  C09E  F379         	movff	?_log+2,_printAuto$3997+2
  4217                           
  4218                           ;main.c: 394: temperatureVal[1] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4219  00086A  0EF6               	movlw	246
  4220  00086C  0100               	movlb	0	; () banked
  4221  00086E  6F84               	movwf	___ftmul@f2& (0+255),b
  4222  000870  0EB7               	movlw	183
  4223  000872  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  4224  000874  0E33               	movlw	51
  4225  000876  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  4226  000878  C374  F081         	movff	_printAuto$3996,___ftmul@f1
  4227  00087C  C375  F082         	movff	_printAuto$3996+1,___ftmul@f1+1
  4228  000880  C376  F083         	movff	_printAuto$3996+2,___ftmul@f1+2
  4229  000884  ECCB  F020         	call	___ftmul	;wreg free
  4230  000888  C081  F063         	movff	?___ftmul,___ftadd@f2
  4231  00088C  C082  F064         	movff	?___ftmul+1,___ftadd@f2+1
  4232  000890  C083  F065         	movff	?___ftmul+2,___ftadd@f2+2
  4233  000894  0E1D               	movlw	29
  4234  000896  0100               	movlb	0	; () banked
  4235  000898  6F84               	movwf	___ftmul@f2& (0+255),b
  4236  00089A  0E76               	movlw	118
  4237  00089C  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  4238  00089E  0E39               	movlw	57
  4239  0008A0  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  4240  0008A2  C377  F081         	movff	_printAuto$3997,___ftmul@f1
  4241  0008A6  C378  F082         	movff	_printAuto$3997+1,___ftmul@f1+1
  4242  0008AA  C379  F083         	movff	_printAuto$3997+2,___ftmul@f1+2
  4243  0008AE  ECCB  F020         	call	___ftmul	;wreg free
  4244  0008B2  C081  F060         	movff	?___ftmul,___ftadd@f1
  4245  0008B6  C082  F061         	movff	?___ftmul+1,___ftadd@f1+1
  4246  0008BA  C083  F062         	movff	?___ftmul+2,___ftadd@f1+2
  4247  0008BE  ECDA  F01C         	call	___ftadd	;wreg free
  4248  0008C2  C060  F37A         	movff	?___ftadd,_printAuto$3998
  4249  0008C6  C061  F37B         	movff	?___ftadd+1,_printAuto$3998+1
  4250  0008CA  C062  F37C         	movff	?___ftadd+2,_printAuto$3998+2
  4251                           
  4252                           ;main.c: 394: temperatureVal[1] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4253  0008CE  C185  F063         	movff	_A,___ftadd@f2
  4254  0008D2  C186  F064         	movff	_A+1,___ftadd@f2+1
  4255  0008D6  C187  F065         	movff	_A+2,___ftadd@f2+2
  4256  0008DA  C37A  F060         	movff	_printAuto$3998,___ftadd@f1
  4257  0008DE  C37B  F061         	movff	_printAuto$3998+1,___ftadd@f1+1
  4258  0008E2  C37C  F062         	movff	_printAuto$3998+2,___ftadd@f1+2
  4259  0008E6  ECDA  F01C         	call	___ftadd	;wreg free
  4260  0008EA  C060  F075         	movff	?___ftadd,___ftdiv@f2
  4261  0008EE  C061  F076         	movff	?___ftadd+1,___ftdiv@f2+1
  4262  0008F2  C062  F077         	movff	?___ftadd+2,___ftdiv@f2+2
  4263  0008F6  0E00               	movlw	0
  4264  0008F8  0100               	movlb	0	; () banked
  4265  0008FA  6F72               	movwf	___ftdiv@f1& (0+255),b
  4266  0008FC  0E80               	movlw	128
  4267  0008FE  6F73               	movwf	(___ftdiv@f1+1)& (0+255),b
  4268  000900  0E3F               	movlw	63
  4269  000902  6F74               	movwf	(___ftdiv@f1+2)& (0+255),b
  4270  000904  ECC0  F021         	call	___ftdiv	;wreg free
  4271  000908  C072  F37D         	movff	?___ftdiv,_printAuto$3999
  4272  00090C  C073  F37E         	movff	?___ftdiv+1,_printAuto$3999+1
  4273  000910  C074  F37F         	movff	?___ftdiv+2,_printAuto$3999+2
  4274                           
  4275                           ;main.c: 394: temperatureVal[1] = 1 / (A + B * log(R1) + C * pow(log(R1), 3)) - 273;
  4276  000914  C37D  F060         	movff	_printAuto$3999,___ftadd@f1
  4277  000918  C37E  F061         	movff	_printAuto$3999+1,___ftadd@f1+1
  4278  00091C  C37F  F062         	movff	_printAuto$3999+2,___ftadd@f1+2
  4279  000920  0E80               	movlw	128
  4280  000922  0100               	movlb	0	; () banked
  4281  000924  6F63               	movwf	___ftadd@f2& (0+255),b
  4282  000926  0E88               	movlw	136
  4283  000928  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  4284  00092A  0EC3               	movlw	195
  4285  00092C  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  4286  00092E  ECDA  F01C         	call	___ftadd	;wreg free
  4287  000932  C060  F119         	movff	?___ftadd,_temperatureVal+3
  4288  000936  C061  F11A         	movff	?___ftadd+1,_temperatureVal+4
  4289  00093A  C062  F11B         	movff	?___ftadd+2,_temperatureVal+5
  4290                           
  4291                           ;main.c: 396: float finalTemperature = (temperatureVal[0]+temperatureVal[1])/2;
  4292  00093E  C116  F063         	movff	_temperatureVal,___ftadd@f2
  4293  000942  C117  F064         	movff	_temperatureVal+1,___ftadd@f2+1
  4294  000946  C118  F065         	movff	_temperatureVal+2,___ftadd@f2+2
  4295  00094A  C119  F060         	movff	_temperatureVal+3,___ftadd@f1
  4296  00094E  C11A  F061         	movff	_temperatureVal+4,___ftadd@f1+1
  4297  000952  C11B  F062         	movff	_temperatureVal+5,___ftadd@f1+2
  4298  000956  ECDA  F01C         	call	___ftadd	;wreg free
  4299  00095A  C060  F072         	movff	?___ftadd,___ftdiv@f1
  4300  00095E  C061  F073         	movff	?___ftadd+1,___ftdiv@f1+1
  4301  000962  C062  F074         	movff	?___ftadd+2,___ftdiv@f1+2
  4302  000966  0E00               	movlw	0
  4303  000968  0100               	movlb	0	; () banked
  4304  00096A  6F75               	movwf	___ftdiv@f2& (0+255),b
  4305  00096C  0E00               	movlw	0
  4306  00096E  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  4307  000970  0E40               	movlw	64
  4308  000972  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  4309  000974  ECC0  F021         	call	___ftdiv	;wreg free
  4310  000978  C072  F38F         	movff	?___ftdiv,printAuto@finalTemperature
  4311  00097C  C073  F390         	movff	?___ftdiv+1,printAuto@finalTemperature+1
  4312  000980  C074  F391         	movff	?___ftdiv+2,printAuto@finalTemperature+2
  4313                           
  4314                           ;main.c: 397: guiTemp = finalTemperature;
  4315  000984  C38F  F0E7         	movff	printAuto@finalTemperature,_guiTemp
  4316  000988  C390  F0E8         	movff	printAuto@finalTemperature+1,_guiTemp+1
  4317  00098C  C391  F0E9         	movff	printAuto@finalTemperature+2,_guiTemp+2
  4318                           
  4319                           ;main.c: 399: char valTemp[3];;main.c: 400: sprintf(valTemp,"%.1f",finalTemperature);
  4320  000990  0E80               	movlw	low printAuto@valTemp
  4321  000992  0100               	movlb	0	; () banked
  4322  000994  6FC9               	movwf	sprintf@wh& (0+255),b
  4323  000996  0E03               	movlw	high printAuto@valTemp
  4324  000998  6FCA               	movwf	(sprintf@wh+1)& (0+255),b
  4325  00099A  0EF5               	movlw	low STR_16
  4326  00099C  6FCB               	movwf	sprintf@f& (0+255),b
  4327  00099E  0E7F               	movlw	high STR_16
  4328  0009A0  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  4329  0009A2  C38F  F0CD         	movff	printAuto@finalTemperature,?_sprintf+4
  4330  0009A6  C390  F0CE         	movff	printAuto@finalTemperature+1,?_sprintf+5
  4331  0009AA  C391  F0CF         	movff	printAuto@finalTemperature+2,?_sprintf+6
  4332  0009AE  EC46  F02A         	call	_sprintf	;wreg free
  4333                           
  4334                           ;main.c: 401: char strTemp[]="Temperature \337C\n";
  4335  0009B2  EE22  F000         	lfsr	2,printAuto@F6421
  4336  0009B6  EE13  F000         	lfsr	1,printAuto@strTemp
  4337  0009BA  0E0F               	movlw	15
  4338  0009BC                     u13461:
  4339  0009BC  CFDB FFE3          	movff	plusw2,plusw1
  4340  0009C0  06E8               	decf	wreg,f,c
  4341  0009C2  E2FC               	bc	u13461
  4342                           
  4343                           ;main.c: 404: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4344  0009C4  0E0B               	movlw	11
  4345  0009C6  0101               	movlb	1	; () banked
  4346  0009C8  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  4347  0009CA  0E26               	movlw	38
  4348  0009CC  6F79               	movwf	??_printAuto& (0+255),b
  4349  0009CE  0E5D               	movlw	93
  4350  0009D0                     u14047:
  4351  0009D0  2EE8               	decfsz	wreg,f,c
  4352  0009D2  D7FE               	bra	u14047
  4353  0009D4  2F79               	decfsz	??_printAuto& (0+255),f,b
  4354  0009D6  D7FC               	bra	u14047
  4355  0009D8  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  4356  0009DA  D7FA               	bra	u14047
  4357  0009DC  D000               	nop2	
  4358                           
  4359                           ;main.c: 405: strcat(strTemp,valTemp);
  4360  0009DE  0E00               	movlw	low printAuto@strTemp
  4361  0009E0  6E1A               	movwf	strcat@to,c
  4362  0009E2  0E03               	movlw	high printAuto@strTemp
  4363  0009E4  6E1B               	movwf	strcat@to+1,c
  4364  0009E6  0E80               	movlw	low printAuto@valTemp
  4365  0009E8  6E1C               	movwf	strcat@from,c
  4366  0009EA  0E03               	movlw	high printAuto@valTemp
  4367  0009EC  6E1D               	movwf	strcat@from+1,c
  4368  0009EE  EC68  F02A         	call	_strcat	;wreg free
  4369                           
  4370                           ;main.c: 406: LCD_clear();
  4371  0009F2  EC7E  F02C         	call	_LCD_clear	;wreg free
  4372                           
  4373                           ;main.c: 407: LCD_send_string(strTemp, 1);
  4374  0009F6  0E00               	movlw	low printAuto@strTemp
  4375  0009F8  0100               	movlb	0	; () banked
  4376  0009FA  6F60               	movwf	LCD_send_string@str& (0+255),b
  4377  0009FC  0E03               	movlw	high printAuto@strTemp
  4378  0009FE  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  4379  000A00  0E01               	movlw	1
  4380  000A02  6F62               	movwf	LCD_send_string@line& (0+255),b
  4381  000A04  EC20  F013         	call	_LCD_send_string	;wreg free
  4382                           
  4383                           ;main.c: 408: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4384  000A08  0E0B               	movlw	11
  4385  000A0A  0101               	movlb	1	; () banked
  4386  000A0C  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  4387  000A0E  0E26               	movlw	38
  4388  000A10  6F79               	movwf	??_printAuto& (0+255),b
  4389  000A12  0E5D               	movlw	93
  4390  000A14                     u14057:
  4391  000A14  2EE8               	decfsz	wreg,f,c
  4392  000A16  D7FE               	bra	u14057
  4393  000A18  2F79               	decfsz	??_printAuto& (0+255),f,b
  4394  000A1A  D7FC               	bra	u14057
  4395  000A1C  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  4396  000A1E  D7FA               	bra	u14057
  4397  000A20  D000               	nop2	
  4398                           
  4399                           ;main.c: 410: if (!EUSART1_GetAutoModeBool()) {
  4400  000A22  EC86  F02D         	call	_EUSART1_GetAutoModeBool	;wreg free
  4401  000A26  0900               	iorlw	0
  4402  000A28  A4D8               	btfss	status,2,c
  4403  000A2A  D0D7               	goto	l1137
  4404                           
  4405                           ;main.c: 411: if (finalTemperature>=20 && finalTemperature<25)
  4406  000A2C  C38F  F01A         	movff	printAuto@finalTemperature,___ftge@ff1
  4407  000A30  C390  F01B         	movff	printAuto@finalTemperature+1,___ftge@ff1+1
  4408  000A34  C391  F01C         	movff	printAuto@finalTemperature+2,___ftge@ff1+2
  4409  000A38  0E00               	movlw	0
  4410  000A3A  6E1D               	movwf	___ftge@ff2,c
  4411  000A3C  0EA0               	movlw	160
  4412  000A3E  6E1E               	movwf	___ftge@ff2+1,c
  4413  000A40  0E41               	movlw	65
  4414  000A42  6E1F               	movwf	___ftge@ff2+2,c
  4415  000A44  EC5F  F027         	call	___ftge	;wreg free
  4416  000A48  A0D8               	btfss	status,0,c
  4417  000A4A  D034               	goto	l11487
  4418  000A4C  C38F  F01A         	movff	printAuto@finalTemperature,___ftge@ff1
  4419  000A50  C390  F01B         	movff	printAuto@finalTemperature+1,___ftge@ff1+1
  4420  000A54  C391  F01C         	movff	printAuto@finalTemperature+2,___ftge@ff1+2
  4421  000A58  0E00               	movlw	0
  4422  000A5A  6E1D               	movwf	___ftge@ff2,c
  4423  000A5C  0EC8               	movlw	200
  4424  000A5E  6E1E               	movwf	___ftge@ff2+1,c
  4425  000A60  0E41               	movlw	65
  4426  000A62  6E1F               	movwf	___ftge@ff2+2,c
  4427  000A64  EC5F  F027         	call	___ftge	;wreg free
  4428  000A68  B0D8               	btfsc	status,0,c
  4429  000A6A  D024               	goto	l11487
  4430                           
  4431                           ;main.c: 412: {;main.c: 413: manualSpeed = 1;
  4432  000A6C  0E00               	movlw	0
  4433  000A6E  0100               	movlb	0	; () banked
  4434  000A70  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
  4435  000A72  0E01               	movlw	1
  4436  000A74  6FFE               	movwf	_manualSpeed& (0+255),b
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;main.c: 414: dcMotor(1);
  4440  000A76  0E00               	movlw	0
  4441  000A78  6E1F               	movwf	dcMotor@speeed+1,c
  4442  000A7A  0E01               	movlw	1
  4443  000A7C  6E1E               	movwf	dcMotor@speeed,c
  4444  000A7E  EC90  F028         	call	_dcMotor	;wreg free
  4445                           
  4446                           ;main.c: 415: LCD_clear();
  4447  000A82  EC7E  F02C         	call	_LCD_clear	;wreg free
  4448                           
  4449                           ;main.c: 416: LCD_send_string("Speed 1", 1);
  4450  000A86  0EC9               	movlw	low STR_12
  4451  000A88  0100               	movlb	0	; () banked
  4452  000A8A  6F60               	movwf	LCD_send_string@str& (0+255),b
  4453  000A8C  0E7F               	movlw	high STR_12
  4454  000A8E  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  4455  000A90  0E01               	movlw	1
  4456  000A92  6F62               	movwf	LCD_send_string@line& (0+255),b
  4457  000A94  EC20  F013         	call	_LCD_send_string	;wreg free
  4458  000A98                     l11485:
  4459                           
  4460                           ;main.c: 417: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4461  000A98  0E0B               	movlw	11
  4462  000A9A  0101               	movlb	1	; () banked
  4463  000A9C  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  4464  000A9E  0E26               	movlw	38
  4465  000AA0  6F79               	movwf	??_printAuto& (0+255),b
  4466  000AA2  0E5D               	movlw	93
  4467  000AA4                     u14067:
  4468  000AA4  2EE8               	decfsz	wreg,f,c
  4469  000AA6  D7FE               	bra	u14067
  4470  000AA8  2F79               	decfsz	??_printAuto& (0+255),f,b
  4471  000AAA  D7FC               	bra	u14067
  4472  000AAC  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  4473  000AAE  D7FA               	bra	u14067
  4474  000AB0  D000               	nop2	
  4475                           
  4476                           ;main.c: 418: }
  4477  000AB2  D093               	goto	l1137
  4478  000AB4                     l11487:
  4479                           
  4480                           ;main.c: 419: else if(finalTemperature>=25 && finalTemperature<28)
  4481  000AB4  C38F  F01A         	movff	printAuto@finalTemperature,___ftge@ff1
  4482  000AB8  C390  F01B         	movff	printAuto@finalTemperature+1,___ftge@ff1+1
  4483  000ABC  C391  F01C         	movff	printAuto@finalTemperature+2,___ftge@ff1+2
  4484  000AC0  0E00               	movlw	0
  4485  000AC2  6E1D               	movwf	___ftge@ff2,c
  4486  000AC4  0EC8               	movlw	200
  4487  000AC6  6E1E               	movwf	___ftge@ff2+1,c
  4488  000AC8  0E41               	movlw	65
  4489  000ACA  6E1F               	movwf	___ftge@ff2+2,c
  4490  000ACC  EC5F  F027         	call	___ftge	;wreg free
  4491  000AD0  A0D8               	btfss	status,0,c
  4492  000AD2  D027               	goto	l11501
  4493  000AD4  C38F  F01A         	movff	printAuto@finalTemperature,___ftge@ff1
  4494  000AD8  C390  F01B         	movff	printAuto@finalTemperature+1,___ftge@ff1+1
  4495  000ADC  C391  F01C         	movff	printAuto@finalTemperature+2,___ftge@ff1+2
  4496  000AE0  0E00               	movlw	0
  4497  000AE2  6E1D               	movwf	___ftge@ff2,c
  4498  000AE4  0EE0               	movlw	224
  4499  000AE6  6E1E               	movwf	___ftge@ff2+1,c
  4500  000AE8  0E41               	movlw	65
  4501  000AEA  6E1F               	movwf	___ftge@ff2+2,c
  4502  000AEC  EC5F  F027         	call	___ftge	;wreg free
  4503  000AF0  B0D8               	btfsc	status,0,c
  4504  000AF2  D017               	goto	l11501
  4505                           
  4506                           ;main.c: 420: {;main.c: 421: manualSpeed = 2;
  4507  000AF4  0E00               	movlw	0
  4508  000AF6  0100               	movlb	0	; () banked
  4509  000AF8  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
  4510  000AFA  0E02               	movlw	2
  4511  000AFC  6FFE               	movwf	_manualSpeed& (0+255),b
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;main.c: 422: dcMotor(2);
  4515  000AFE  0E00               	movlw	0
  4516  000B00  6E1F               	movwf	dcMotor@speeed+1,c
  4517  000B02  0E02               	movlw	2
  4518  000B04  6E1E               	movwf	dcMotor@speeed,c
  4519  000B06  EC90  F028         	call	_dcMotor	;wreg free
  4520                           
  4521                           ;main.c: 423: LCD_clear();
  4522  000B0A  EC7E  F02C         	call	_LCD_clear	;wreg free
  4523                           
  4524                           ;main.c: 424: LCD_send_string("Speed 2", 1);
  4525  000B0E  0ED1               	movlw	low STR_13
  4526  000B10  0100               	movlb	0	; () banked
  4527  000B12  6F60               	movwf	LCD_send_string@str& (0+255),b
  4528  000B14  0E7F               	movlw	high STR_13
  4529  000B16  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  4530  000B18  0E01               	movlw	1
  4531  000B1A  6F62               	movwf	LCD_send_string@line& (0+255),b
  4532  000B1C  EC20  F013         	call	_LCD_send_string	;wreg free
  4533  000B20  D7BB               	goto	l11485
  4534  000B22                     l11501:
  4535                           
  4536                           ;main.c: 427: else if(finalTemperature>=28 && finalTemperature<30)
  4537  000B22  C38F  F01A         	movff	printAuto@finalTemperature,___ftge@ff1
  4538  000B26  C390  F01B         	movff	printAuto@finalTemperature+1,___ftge@ff1+1
  4539  000B2A  C391  F01C         	movff	printAuto@finalTemperature+2,___ftge@ff1+2
  4540  000B2E  0E00               	movlw	0
  4541  000B30  6E1D               	movwf	___ftge@ff2,c
  4542  000B32  0EE0               	movlw	224
  4543  000B34  6E1E               	movwf	___ftge@ff2+1,c
  4544  000B36  0E41               	movlw	65
  4545  000B38  6E1F               	movwf	___ftge@ff2+2,c
  4546  000B3A  EC5F  F027         	call	___ftge	;wreg free
  4547  000B3E  A0D8               	btfss	status,0,c
  4548  000B40  D027               	goto	l11515
  4549  000B42  C38F  F01A         	movff	printAuto@finalTemperature,___ftge@ff1
  4550  000B46  C390  F01B         	movff	printAuto@finalTemperature+1,___ftge@ff1+1
  4551  000B4A  C391  F01C         	movff	printAuto@finalTemperature+2,___ftge@ff1+2
  4552  000B4E  0E00               	movlw	0
  4553  000B50  6E1D               	movwf	___ftge@ff2,c
  4554  000B52  0EF0               	movlw	240
  4555  000B54  6E1E               	movwf	___ftge@ff2+1,c
  4556  000B56  0E41               	movlw	65
  4557  000B58  6E1F               	movwf	___ftge@ff2+2,c
  4558  000B5A  EC5F  F027         	call	___ftge	;wreg free
  4559  000B5E  B0D8               	btfsc	status,0,c
  4560  000B60  D017               	goto	l11515
  4561                           
  4562                           ;main.c: 428: {;main.c: 429: manualSpeed = 3;
  4563  000B62  0E00               	movlw	0
  4564  000B64  0100               	movlb	0	; () banked
  4565  000B66  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
  4566  000B68  0E03               	movlw	3
  4567  000B6A  6FFE               	movwf	_manualSpeed& (0+255),b
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;main.c: 430: dcMotor(3);
  4571  000B6C  0E00               	movlw	0
  4572  000B6E  6E1F               	movwf	dcMotor@speeed+1,c
  4573  000B70  0E03               	movlw	3
  4574  000B72  6E1E               	movwf	dcMotor@speeed,c
  4575  000B74  EC90  F028         	call	_dcMotor	;wreg free
  4576                           
  4577                           ;main.c: 431: LCD_clear();
  4578  000B78  EC7E  F02C         	call	_LCD_clear	;wreg free
  4579                           
  4580                           ;main.c: 432: LCD_send_string("Speed 3", 1);
  4581  000B7C  0ED9               	movlw	low STR_14
  4582  000B7E  0100               	movlb	0	; () banked
  4583  000B80  6F60               	movwf	LCD_send_string@str& (0+255),b
  4584  000B82  0E7F               	movlw	high STR_14
  4585  000B84  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  4586  000B86  0E01               	movlw	1
  4587  000B88  6F62               	movwf	LCD_send_string@line& (0+255),b
  4588  000B8A  EC20  F013         	call	_LCD_send_string	;wreg free
  4589  000B8E  D784               	goto	l11485
  4590  000B90                     l11515:
  4591                           
  4592                           ;main.c: 435: else if (finalTemperature>=30)
  4593  000B90  C38F  F01A         	movff	printAuto@finalTemperature,___ftge@ff1
  4594  000B94  C390  F01B         	movff	printAuto@finalTemperature+1,___ftge@ff1+1
  4595  000B98  C391  F01C         	movff	printAuto@finalTemperature+2,___ftge@ff1+2
  4596  000B9C  0E00               	movlw	0
  4597  000B9E  6E1D               	movwf	___ftge@ff2,c
  4598  000BA0  0EF0               	movlw	240
  4599  000BA2  6E1E               	movwf	___ftge@ff2+1,c
  4600  000BA4  0E41               	movlw	65
  4601  000BA6  6E1F               	movwf	___ftge@ff2+2,c
  4602  000BA8  EC5F  F027         	call	___ftge	;wreg free
  4603  000BAC  A0D8               	btfss	status,0,c
  4604  000BAE  D015               	goto	l1137
  4605                           
  4606                           ;main.c: 436: {;main.c: 437: manualSpeed = 4;
  4607  000BB0  0E00               	movlw	0
  4608  000BB2  0100               	movlb	0	; () banked
  4609  000BB4  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
  4610  000BB6  0E04               	movlw	4
  4611  000BB8  6FFE               	movwf	_manualSpeed& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;main.c: 438: dcMotor(4);
  4615  000BBA  0E00               	movlw	0
  4616  000BBC  6E1F               	movwf	dcMotor@speeed+1,c
  4617  000BBE  0E04               	movlw	4
  4618  000BC0  6E1E               	movwf	dcMotor@speeed,c
  4619  000BC2  EC90  F028         	call	_dcMotor	;wreg free
  4620                           
  4621                           ;main.c: 439: LCD_send_string("Speed 4", 1);
  4622  000BC6  0EE1               	movlw	low STR_15
  4623  000BC8  0100               	movlb	0	; () banked
  4624  000BCA  6F60               	movwf	LCD_send_string@str& (0+255),b
  4625  000BCC  0E7F               	movlw	high STR_15
  4626  000BCE  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  4627  000BD0  0E01               	movlw	1
  4628  000BD2  6F62               	movwf	LCD_send_string@line& (0+255),b
  4629  000BD4  EC20  F013         	call	_LCD_send_string	;wreg free
  4630  000BD8  D75F               	goto	l11485
  4631  000BDA                     l1137:
  4632                           
  4633                           ;main.c: 441: };main.c: 442: };main.c: 444: if (!azoTouchPollAuto())
  4634  000BDA  EC25  F027         	call	_azoTouchPollAuto	;wreg free
  4635  000BDE  0900               	iorlw	0
  4636  000BE0  B4D8               	btfsc	status,2,c
  4637  000BE2  0012               	return	
  4638                           
  4639                           ;main.c: 447: if (EUSART1_GetSensorsBool())
  4640  000BE4  EC83  F02D         	call	_EUSART1_GetSensorsBool	;wreg free
  4641  000BE8  0900               	iorlw	0
  4642  000BEA  B4D8               	btfsc	status,2,c
  4643  000BEC  D02A               	goto	l11535
  4644                           
  4645                           ;main.c: 448: {;main.c: 449: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  4646  000BEE  C0E4  F097         	movff	_guiLux,___fttol@f1
  4647  000BF2  C0E5  F098         	movff	_guiLux+1,___fttol@f1+1
  4648  000BF6  C0E6  F099         	movff	_guiLux+2,___fttol@f1+2
  4649  000BFA  EC7D  F023         	call	___fttol	;wreg free
  4650  000BFE  C097  F38D         	movff	?___fttol,_printAuto$3993
  4651  000C02  C098  F38E         	movff	?___fttol+1,_printAuto$3993+1
  4652                           
  4653                           ;main.c: 448: {;main.c: 449: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  4654  000C06  C0E7  F16B         	movff	_guiTemp,sendData@temp
  4655  000C0A  C0E8  F16C         	movff	_guiTemp+1,sendData@temp+1
  4656  000C0E  C0E9  F16D         	movff	_guiTemp+2,sendData@temp+2
  4657  000C12  C38D  F16E         	movff	_printAuto$3993,sendData@lux
  4658  000C16  C38E  F16F         	movff	_printAuto$3993+1,sendData@lux+1
  4659  000C1A  C0DE  F170         	movff	_guiDistanceC,sendData@distanceC
  4660  000C1E  C0DF  F171         	movff	_guiDistanceC+1,sendData@distanceC+1
  4661  000C22  C0E0  F172         	movff	_guiDistanceC+2,sendData@distanceC+2
  4662  000C26  C0E1  F173         	movff	_guiDistanceL,sendData@distanceL
  4663  000C2A  C0E2  F174         	movff	_guiDistanceL+1,sendData@distanceL+1
  4664  000C2E  C0E3  F175         	movff	_guiDistanceL+2,sendData@distanceL+2
  4665  000C32  C0DB  F176         	movff	_guiDistanceR,sendData@distanceR
  4666  000C36  C0DC  F177         	movff	_guiDistanceR+1,sendData@distanceR+1
  4667  000C3A  C0DD  F178         	movff	_guiDistanceR+2,sendData@distanceR+2
  4668  000C3E  ECEB  F026         	call	_sendData	;wreg free
  4669  000C42                     l11535:
  4670                           
  4671                           ;main.c: 450: };main.c: 452: bool nearFan = 1;
  4672  000C42  0E01               	movlw	1
  4673  000C44  0103               	movlb	3	; () banked
  4674  000C46  6F8C               	movwf	printAuto@nearFan& (0+255),b
  4675                           
  4676                           ;main.c: 454: while (nearFan) {
  4677  000C48  D0C1               	goto	l11577
  4678  000C4A                     l11537:
  4679                           
  4680                           ; BSR set to: 3
  4681                           ;main.c: 455: sendPulse1();
  4682  000C4A  EC2D  F02D         	call	_sendPulse1	;wreg free
  4683  000C4E                     l1147:
  4684  000C4E  A481               	btfss	3969,2,c	;volatile
  4685  000C50  D7FE               	goto	l1147
  4686                           
  4687                           ;main.c: 457: TMR1 = 0;
  4688  000C52  0E00               	movlw	0
  4689  000C54  6ECF               	movwf	4047,c	;volatile
  4690  000C56  0E00               	movlw	0
  4691  000C58  6ECE               	movwf	4046,c	;volatile
  4692                           
  4693                           ;main.c: 458: TMR1ON = 1;
  4694  000C5A  80CD               	bsf	4045,0,c	;volatile
  4695  000C5C                     l1150:
  4696  000C5C  A481               	btfss	3969,2,c	;volatile
  4697  000C5E  D002               	goto	u13590
  4698  000C60  A09E               	btfss	3998,0,c	;volatile
  4699  000C62  D7FC               	goto	l1150
  4700  000C64                     u13590:
  4701                           
  4702                           ;main.c: 460: time = TMR1;
  4703  000C64  CFCE F135          	movff	4046,_time	;volatile
  4704  000C68  CFCF F136          	movff	4047,_time+1	;volatile
  4705                           
  4706                           ;main.c: 462: TMR1ON = 0;
  4707  000C6C  90CD               	bcf	4045,0,c	;volatile
  4708                           
  4709                           ;main.c: 464: distance = time/117.0/100.0;
  4710  000C6E  0E00               	movlw	0
  4711  000C70  0100               	movlb	0	; () banked
  4712  000C72  6F75               	movwf	___ftdiv@f2& (0+255),b
  4713  000C74  0EEA               	movlw	234
  4714  000C76  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  4715  000C78  0E42               	movlw	66
  4716  000C7A  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  4717  000C7C  C135  F022         	movff	_time,___awtoft@c
  4718  000C80  C136  F023         	movff	_time+1,___awtoft@c+1
  4719  000C84  EC47  F02B         	call	___awtoft	;wreg free
  4720  000C88  C022  F072         	movff	?___awtoft,___ftdiv@f1
  4721  000C8C  C023  F073         	movff	?___awtoft+1,___ftdiv@f1+1
  4722  000C90  C024  F074         	movff	?___awtoft+2,___ftdiv@f1+2
  4723  000C94  ECC0  F021         	call	___ftdiv	;wreg free
  4724  000C98  C072  F383         	movff	?___ftdiv,_printAuto$4000
  4725  000C9C  C073  F384         	movff	?___ftdiv+1,_printAuto$4000+1
  4726  000CA0  C074  F385         	movff	?___ftdiv+2,_printAuto$4000+2
  4727                           
  4728                           ;main.c: 464: distance = time/117.0/100.0;
  4729  000CA4  C383  F072         	movff	_printAuto$4000,___ftdiv@f1
  4730  000CA8  C384  F073         	movff	_printAuto$4000+1,___ftdiv@f1+1
  4731  000CAC  C385  F074         	movff	_printAuto$4000+2,___ftdiv@f1+2
  4732  000CB0  0E00               	movlw	0
  4733  000CB2  0100               	movlb	0	; () banked
  4734  000CB4  6F75               	movwf	___ftdiv@f2& (0+255),b
  4735  000CB6  0EC8               	movlw	200
  4736  000CB8  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  4737  000CBA  0E42               	movlw	66
  4738  000CBC  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  4739  000CBE  ECC0  F021         	call	___ftdiv	;wreg free
  4740  000CC2  C072  F122         	movff	?___ftdiv,_distance
  4741  000CC6  C073  F123         	movff	?___ftdiv+1,_distance+1
  4742  000CCA  C074  F124         	movff	?___ftdiv+2,_distance+2
  4743                           
  4744                           ;main.c: 466: guiDistanceC = distance;
  4745  000CCE  C122  F0DE         	movff	_distance,_guiDistanceC
  4746  000CD2  C123  F0DF         	movff	_distance+1,_guiDistanceC+1
  4747  000CD6  C124  F0E0         	movff	_distance+2,_guiDistanceC+2
  4748                           
  4749                           ;main.c: 468: sprintf(valDistance,"%.3f",distance);
  4750  000CDA  0E80               	movlw	low _valDistance
  4751  000CDC  0100               	movlb	0	; () banked
  4752  000CDE  6FC9               	movwf	sprintf@wh& (0+255),b
  4753  000CE0  0E02               	movlw	high _valDistance
  4754  000CE2  6FCA               	movwf	(sprintf@wh+1)& (0+255),b
  4755  000CE4  0EFA               	movlw	low STR_22
  4756  000CE6  6FCB               	movwf	sprintf@f& (0+255),b
  4757  000CE8  0E7F               	movlw	high STR_22
  4758  000CEA  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  4759  000CEC  C122  F0CD         	movff	_distance,?_sprintf+4
  4760  000CF0  C123  F0CE         	movff	_distance+1,?_sprintf+5
  4761  000CF4  C124  F0CF         	movff	_distance+2,?_sprintf+6
  4762  000CF8  EC46  F02A         	call	_sprintf	;wreg free
  4763                           
  4764                           ;main.c: 469: char str[]="Distance 1(m)\n";
  4765  000CFC  EE22  F02E         	lfsr	2,printAuto@F6430
  4766  000D00  EE13  F010         	lfsr	1,printAuto@str
  4767  000D04  0E0E               	movlw	14
  4768  000D06                     u13601:
  4769  000D06  CFDB FFE3          	movff	plusw2,plusw1
  4770  000D0A  06E8               	decf	wreg,f,c
  4771  000D0C  E2FC               	bc	u13601
  4772                           
  4773                           ;main.c: 470: strcat(str,valDistance);
  4774  000D0E  0E10               	movlw	low printAuto@str
  4775  000D10  6E1A               	movwf	strcat@to,c
  4776  000D12  0E03               	movlw	high printAuto@str
  4777  000D14  6E1B               	movwf	strcat@to+1,c
  4778  000D16  0E80               	movlw	low _valDistance
  4779  000D18  6E1C               	movwf	strcat@from,c
  4780  000D1A  0E02               	movlw	high _valDistance
  4781  000D1C  6E1D               	movwf	strcat@from+1,c
  4782  000D1E  EC68  F02A         	call	_strcat	;wreg free
  4783                           
  4784                           ;main.c: 471: LCD_clear();
  4785  000D22  EC7E  F02C         	call	_LCD_clear	;wreg free
  4786                           
  4787                           ;main.c: 472: LCD_send_string(str, 1);
  4788  000D26  0E10               	movlw	low printAuto@str
  4789  000D28  0100               	movlb	0	; () banked
  4790  000D2A  6F60               	movwf	LCD_send_string@str& (0+255),b
  4791  000D2C  0E03               	movlw	high printAuto@str
  4792  000D2E  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  4793  000D30  0E01               	movlw	1
  4794  000D32  6F62               	movwf	LCD_send_string@line& (0+255),b
  4795  000D34  EC20  F013         	call	_LCD_send_string	;wreg free
  4796                           
  4797                           ;main.c: 473: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4798  000D38  0E0B               	movlw	11
  4799  000D3A  0101               	movlb	1	; () banked
  4800  000D3C  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  4801  000D3E  0E26               	movlw	38
  4802  000D40  6F79               	movwf	??_printAuto& (0+255),b
  4803  000D42  0E5D               	movlw	93
  4804  000D44                     u14077:
  4805  000D44  2EE8               	decfsz	wreg,f,c
  4806  000D46  D7FE               	bra	u14077
  4807  000D48  2F79               	decfsz	??_printAuto& (0+255),f,b
  4808  000D4A  D7FC               	bra	u14077
  4809  000D4C  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  4810  000D4E  D7FA               	bra	u14077
  4811  000D50  D000               	nop2	
  4812                           
  4813                           ;main.c: 474: if (distance<=.15)
  4814  000D52  0E9A               	movlw	154
  4815  000D54  6E1A               	movwf	___ftge@ff1,c
  4816  000D56  0E19               	movlw	25
  4817  000D58  6E1B               	movwf	___ftge@ff1+1,c
  4818  000D5A  0E3E               	movlw	62
  4819  000D5C  6E1C               	movwf	___ftge@ff1+2,c
  4820  000D5E  C122  F01D         	movff	_distance,___ftge@ff2
  4821  000D62  C123  F01E         	movff	_distance+1,___ftge@ff2+1
  4822  000D66  C124  F01F         	movff	_distance+2,___ftge@ff2+2
  4823  000D6A  EC5F  F027         	call	___ftge	;wreg free
  4824  000D6E  A0D8               	btfss	status,0,c
  4825  000D70  D01E               	goto	l11569
  4826                           
  4827                           ;main.c: 475: {;main.c: 476: PWM5_LoadDutyValue(1023);
  4828  000D72  0E03               	movlw	3
  4829  000D74  6E1B               	movwf	PWM5_LoadDutyValue@dutyValue+1,c
  4830  000D76  681A               	setf	PWM5_LoadDutyValue@dutyValue,c
  4831  000D78  ECCE  F02B         	call	_PWM5_LoadDutyValue	;wreg free
  4832                           
  4833                           ;main.c: 477: LCD_clear();
  4834  000D7C  EC7E  F02C         	call	_LCD_clear	;wreg free
  4835                           
  4836                           ;main.c: 478: LCD_send_string("Detected \n Front", 1);
  4837  000D80  0E4E               	movlw	low STR_23
  4838  000D82  0100               	movlb	0	; () banked
  4839  000D84  6F60               	movwf	LCD_send_string@str& (0+255),b
  4840  000D86  0E7F               	movlw	high STR_23
  4841  000D88  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  4842  000D8A  0E01               	movlw	1
  4843  000D8C  6F62               	movwf	LCD_send_string@line& (0+255),b
  4844  000D8E  EC20  F013         	call	_LCD_send_string	;wreg free
  4845                           
  4846                           ;main.c: 479: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4847  000D92  0E0B               	movlw	11
  4848  000D94  0101               	movlb	1	; () banked
  4849  000D96  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  4850  000D98  0E26               	movlw	38
  4851  000D9A  6F79               	movwf	??_printAuto& (0+255),b
  4852  000D9C  0E5D               	movlw	93
  4853  000D9E                     u14087:
  4854  000D9E  2EE8               	decfsz	wreg,f,c
  4855  000DA0  D7FE               	bra	u14087
  4856  000DA2  2F79               	decfsz	??_printAuto& (0+255),f,b
  4857  000DA4  D7FC               	bra	u14087
  4858  000DA6  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  4859  000DA8  D7FA               	bra	u14087
  4860  000DAA  D000               	nop2	
  4861                           
  4862                           ;main.c: 481: } else {
  4863  000DAC  D00A               	goto	l11573
  4864  000DAE                     l11569:
  4865                           
  4866                           ;main.c: 483: nearFan = 0;
  4867  000DAE  0E00               	movlw	0
  4868  000DB0  0103               	movlb	3	; () banked
  4869  000DB2  6F8C               	movwf	printAuto@nearFan& (0+255),b
  4870                           
  4871                           ; BSR set to: 3
  4872                           ;main.c: 484: dcMotor(manualSpeed);
  4873  000DB4  C0FE  F01E         	movff	_manualSpeed,dcMotor@speeed
  4874  000DB8  C0FF  F01F         	movff	_manualSpeed+1,dcMotor@speeed+1
  4875  000DBC  EC90  F028         	call	_dcMotor	;wreg free
  4876                           
  4877                           ;main.c: 485: break;
  4878  000DC0  D009               	goto	u13630
  4879  000DC2                     l11573:
  4880                           
  4881                           ;main.c: 486: };main.c: 488: if (!azoTouchPollAuto())
  4882  000DC2  EC25  F027         	call	_azoTouchPollAuto	;wreg free
  4883  000DC6  0900               	iorlw	0
  4884  000DC8  B4D8               	btfsc	status,2,c
  4885  000DCA  0012               	return	
  4886  000DCC                     l11577:
  4887  000DCC  0103               	movlb	3	; () banked
  4888  000DCE  518C               	movf	printAuto@nearFan& (0+255),w,b
  4889  000DD0  A4D8               	btfss	status,2,c
  4890  000DD2  D73B               	goto	l11537
  4891  000DD4                     u13630:
  4892                           
  4893                           ;main.c: 491: };main.c: 493: if (EUSART1_GetSensorsBool())
  4894  000DD4  EC83  F02D         	call	_EUSART1_GetSensorsBool	;wreg free
  4895  000DD8  0900               	iorlw	0
  4896  000DDA  B4D8               	btfsc	status,2,c
  4897  000DDC  D02A               	goto	l11585
  4898                           
  4899                           ;main.c: 494: {;main.c: 495: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  4900  000DDE  C0E4  F097         	movff	_guiLux,___fttol@f1
  4901  000DE2  C0E5  F098         	movff	_guiLux+1,___fttol@f1+1
  4902  000DE6  C0E6  F099         	movff	_guiLux+2,___fttol@f1+2
  4903  000DEA  EC7D  F023         	call	___fttol	;wreg free
  4904  000DEE  C097  F38D         	movff	?___fttol,_printAuto$3993
  4905  000DF2  C098  F38E         	movff	?___fttol+1,_printAuto$3993+1
  4906                           
  4907                           ;main.c: 494: {;main.c: 495: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  4908  000DF6  C0E7  F16B         	movff	_guiTemp,sendData@temp
  4909  000DFA  C0E8  F16C         	movff	_guiTemp+1,sendData@temp+1
  4910  000DFE  C0E9  F16D         	movff	_guiTemp+2,sendData@temp+2
  4911  000E02  C38D  F16E         	movff	_printAuto$3993,sendData@lux
  4912  000E06  C38E  F16F         	movff	_printAuto$3993+1,sendData@lux+1
  4913  000E0A  C0DE  F170         	movff	_guiDistanceC,sendData@distanceC
  4914  000E0E  C0DF  F171         	movff	_guiDistanceC+1,sendData@distanceC+1
  4915  000E12  C0E0  F172         	movff	_guiDistanceC+2,sendData@distanceC+2
  4916  000E16  C0E1  F173         	movff	_guiDistanceL,sendData@distanceL
  4917  000E1A  C0E2  F174         	movff	_guiDistanceL+1,sendData@distanceL+1
  4918  000E1E  C0E3  F175         	movff	_guiDistanceL+2,sendData@distanceL+2
  4919  000E22  C0DB  F176         	movff	_guiDistanceR,sendData@distanceR
  4920  000E26  C0DC  F177         	movff	_guiDistanceR+1,sendData@distanceR+1
  4921  000E2A  C0DD  F178         	movff	_guiDistanceR+2,sendData@distanceR+2
  4922  000E2E  ECEB  F026         	call	_sendData	;wreg free
  4923  000E32                     l11585:
  4924                           
  4925                           ;main.c: 496: };main.c: 499: nearFan = 1;
  4926  000E32  0E01               	movlw	1
  4927  000E34  0103               	movlb	3	; () banked
  4928  000E36  6F8C               	movwf	printAuto@nearFan& (0+255),b
  4929                           
  4930                           ;main.c: 502: while (nearFan) {
  4931  000E38  D0C1               	goto	l11627
  4932  000E3A                     l11587:
  4933                           
  4934                           ; BSR set to: 3
  4935                           ;main.c: 504: sendPulse2();
  4936  000E3A  EC26  F02D         	call	_sendPulse2	;wreg free
  4937  000E3E                     l1164:
  4938  000E3E  AA81               	btfss	3969,5,c	;volatile
  4939  000E40  D7FE               	goto	l1164
  4940                           
  4941                           ;main.c: 506: TMR1 = 0;
  4942  000E42  0E00               	movlw	0
  4943  000E44  6ECF               	movwf	4047,c	;volatile
  4944  000E46  0E00               	movlw	0
  4945  000E48  6ECE               	movwf	4046,c	;volatile
  4946                           
  4947                           ;main.c: 507: TMR1ON = 1;
  4948  000E4A  80CD               	bsf	4045,0,c	;volatile
  4949  000E4C                     l1167:
  4950  000E4C  AA81               	btfss	3969,5,c	;volatile
  4951  000E4E  D002               	goto	u13670
  4952  000E50  A09E               	btfss	3998,0,c	;volatile
  4953  000E52  D7FC               	goto	l1167
  4954  000E54                     u13670:
  4955                           
  4956                           ;main.c: 509: time = TMR1;
  4957  000E54  CFCE F135          	movff	4046,_time	;volatile
  4958  000E58  CFCF F136          	movff	4047,_time+1	;volatile
  4959                           
  4960                           ;main.c: 511: TMR1ON = 0;
  4961  000E5C  90CD               	bcf	4045,0,c	;volatile
  4962                           
  4963                           ;main.c: 513: distance = time/117.0/100.0;
  4964  000E5E  0E00               	movlw	0
  4965  000E60  0100               	movlb	0	; () banked
  4966  000E62  6F75               	movwf	___ftdiv@f2& (0+255),b
  4967  000E64  0EEA               	movlw	234
  4968  000E66  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  4969  000E68  0E42               	movlw	66
  4970  000E6A  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  4971  000E6C  C135  F022         	movff	_time,___awtoft@c
  4972  000E70  C136  F023         	movff	_time+1,___awtoft@c+1
  4973  000E74  EC47  F02B         	call	___awtoft	;wreg free
  4974  000E78  C022  F072         	movff	?___awtoft,___ftdiv@f1
  4975  000E7C  C023  F073         	movff	?___awtoft+1,___ftdiv@f1+1
  4976  000E80  C024  F074         	movff	?___awtoft+2,___ftdiv@f1+2
  4977  000E84  ECC0  F021         	call	___ftdiv	;wreg free
  4978  000E88  C072  F383         	movff	?___ftdiv,_printAuto$4000
  4979  000E8C  C073  F384         	movff	?___ftdiv+1,_printAuto$4000+1
  4980  000E90  C074  F385         	movff	?___ftdiv+2,_printAuto$4000+2
  4981                           
  4982                           ;main.c: 513: distance = time/117.0/100.0;
  4983  000E94  C383  F072         	movff	_printAuto$4000,___ftdiv@f1
  4984  000E98  C384  F073         	movff	_printAuto$4000+1,___ftdiv@f1+1
  4985  000E9C  C385  F074         	movff	_printAuto$4000+2,___ftdiv@f1+2
  4986  000EA0  0E00               	movlw	0
  4987  000EA2  0100               	movlb	0	; () banked
  4988  000EA4  6F75               	movwf	___ftdiv@f2& (0+255),b
  4989  000EA6  0EC8               	movlw	200
  4990  000EA8  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  4991  000EAA  0E42               	movlw	66
  4992  000EAC  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  4993  000EAE  ECC0  F021         	call	___ftdiv	;wreg free
  4994  000EB2  C072  F122         	movff	?___ftdiv,_distance
  4995  000EB6  C073  F123         	movff	?___ftdiv+1,_distance+1
  4996  000EBA  C074  F124         	movff	?___ftdiv+2,_distance+2
  4997                           
  4998                           ;main.c: 515: guiDistanceL = distance;
  4999  000EBE  C122  F0E1         	movff	_distance,_guiDistanceL
  5000  000EC2  C123  F0E2         	movff	_distance+1,_guiDistanceL+1
  5001  000EC6  C124  F0E3         	movff	_distance+2,_guiDistanceL+2
  5002                           
  5003                           ;main.c: 517: sprintf(valDistance,"%.3f",distance);
  5004  000ECA  0E80               	movlw	low _valDistance
  5005  000ECC  0100               	movlb	0	; () banked
  5006  000ECE  6FC9               	movwf	sprintf@wh& (0+255),b
  5007  000ED0  0E02               	movlw	high _valDistance
  5008  000ED2  6FCA               	movwf	(sprintf@wh+1)& (0+255),b
  5009  000ED4  0EFA               	movlw	low STR_22
  5010  000ED6  6FCB               	movwf	sprintf@f& (0+255),b
  5011  000ED8  0E7F               	movlw	high STR_22
  5012  000EDA  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  5013  000EDC  C122  F0CD         	movff	_distance,?_sprintf+4
  5014  000EE0  C123  F0CE         	movff	_distance+1,?_sprintf+5
  5015  000EE4  C124  F0CF         	movff	_distance+2,?_sprintf+6
  5016  000EE8  EC46  F02A         	call	_sprintf	;wreg free
  5017                           
  5018                           ;main.c: 518: char str[]="Distance 2(m)\n";
  5019  000EEC  EE22  F01F         	lfsr	2,printAuto@F6434
  5020  000EF0  EE13  F01F         	lfsr	1,printAuto@str_2667
  5021  000EF4  0E0E               	movlw	14
  5022  000EF6                     u13681:
  5023  000EF6  CFDB FFE3          	movff	plusw2,plusw1
  5024  000EFA  06E8               	decf	wreg,f,c
  5025  000EFC  E2FC               	bc	u13681
  5026                           
  5027                           ;main.c: 519: strcat(str,valDistance);
  5028  000EFE  0E1F               	movlw	low printAuto@str_2667
  5029  000F00  6E1A               	movwf	strcat@to,c
  5030  000F02  0E03               	movlw	high printAuto@str_2667
  5031  000F04  6E1B               	movwf	strcat@to+1,c
  5032  000F06  0E80               	movlw	low _valDistance
  5033  000F08  6E1C               	movwf	strcat@from,c
  5034  000F0A  0E02               	movlw	high _valDistance
  5035  000F0C  6E1D               	movwf	strcat@from+1,c
  5036  000F0E  EC68  F02A         	call	_strcat	;wreg free
  5037                           
  5038                           ;main.c: 520: LCD_clear();
  5039  000F12  EC7E  F02C         	call	_LCD_clear	;wreg free
  5040                           
  5041                           ;main.c: 521: LCD_send_string(str, 1);
  5042  000F16  0E1F               	movlw	low printAuto@str_2667
  5043  000F18  0100               	movlb	0	; () banked
  5044  000F1A  6F60               	movwf	LCD_send_string@str& (0+255),b
  5045  000F1C  0E03               	movlw	high printAuto@str_2667
  5046  000F1E  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  5047  000F20  0E01               	movlw	1
  5048  000F22  6F62               	movwf	LCD_send_string@line& (0+255),b
  5049  000F24  EC20  F013         	call	_LCD_send_string	;wreg free
  5050                           
  5051                           ;main.c: 522: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5052  000F28  0E0B               	movlw	11
  5053  000F2A  0101               	movlb	1	; () banked
  5054  000F2C  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  5055  000F2E  0E26               	movlw	38
  5056  000F30  6F79               	movwf	??_printAuto& (0+255),b
  5057  000F32  0E5D               	movlw	93
  5058  000F34                     u14097:
  5059  000F34  2EE8               	decfsz	wreg,f,c
  5060  000F36  D7FE               	bra	u14097
  5061  000F38  2F79               	decfsz	??_printAuto& (0+255),f,b
  5062  000F3A  D7FC               	bra	u14097
  5063  000F3C  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  5064  000F3E  D7FA               	bra	u14097
  5065  000F40  D000               	nop2	
  5066                           
  5067                           ;main.c: 523: if (distance<=.15)
  5068  000F42  0E9A               	movlw	154
  5069  000F44  6E1A               	movwf	___ftge@ff1,c
  5070  000F46  0E19               	movlw	25
  5071  000F48  6E1B               	movwf	___ftge@ff1+1,c
  5072  000F4A  0E3E               	movlw	62
  5073  000F4C  6E1C               	movwf	___ftge@ff1+2,c
  5074  000F4E  C122  F01D         	movff	_distance,___ftge@ff2
  5075  000F52  C123  F01E         	movff	_distance+1,___ftge@ff2+1
  5076  000F56  C124  F01F         	movff	_distance+2,___ftge@ff2+2
  5077  000F5A  EC5F  F027         	call	___ftge	;wreg free
  5078  000F5E  A0D8               	btfss	status,0,c
  5079  000F60  D01E               	goto	l11619
  5080                           
  5081                           ;main.c: 524: {;main.c: 525: PWM5_LoadDutyValue(1023);
  5082  000F62  0E03               	movlw	3
  5083  000F64  6E1B               	movwf	PWM5_LoadDutyValue@dutyValue+1,c
  5084  000F66  681A               	setf	PWM5_LoadDutyValue@dutyValue,c
  5085  000F68  ECCE  F02B         	call	_PWM5_LoadDutyValue	;wreg free
  5086                           
  5087                           ;main.c: 526: LCD_clear();
  5088  000F6C  EC7E  F02C         	call	_LCD_clear	;wreg free
  5089                           
  5090                           ;main.c: 527: LCD_send_string("Detected \n Left", 1);
  5091  000F70  0E5F               	movlw	low STR_25
  5092  000F72  0100               	movlb	0	; () banked
  5093  000F74  6F60               	movwf	LCD_send_string@str& (0+255),b
  5094  000F76  0E7F               	movlw	high STR_25
  5095  000F78  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  5096  000F7A  0E01               	movlw	1
  5097  000F7C  6F62               	movwf	LCD_send_string@line& (0+255),b
  5098  000F7E  EC20  F013         	call	_LCD_send_string	;wreg free
  5099                           
  5100                           ;main.c: 528: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5101  000F82  0E0B               	movlw	11
  5102  000F84  0101               	movlb	1	; () banked
  5103  000F86  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  5104  000F88  0E26               	movlw	38
  5105  000F8A  6F79               	movwf	??_printAuto& (0+255),b
  5106  000F8C  0E5D               	movlw	93
  5107  000F8E                     u14107:
  5108  000F8E  2EE8               	decfsz	wreg,f,c
  5109  000F90  D7FE               	bra	u14107
  5110  000F92  2F79               	decfsz	??_printAuto& (0+255),f,b
  5111  000F94  D7FC               	bra	u14107
  5112  000F96  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  5113  000F98  D7FA               	bra	u14107
  5114  000F9A  D000               	nop2	
  5115                           
  5116                           ;main.c: 530: } else {
  5117  000F9C  D00A               	goto	l11623
  5118  000F9E                     l11619:
  5119                           
  5120                           ;main.c: 531: dcMotor(manualSpeed);
  5121  000F9E  C0FE  F01E         	movff	_manualSpeed,dcMotor@speeed
  5122  000FA2  C0FF  F01F         	movff	_manualSpeed+1,dcMotor@speeed+1
  5123  000FA6  EC90  F028         	call	_dcMotor	;wreg free
  5124                           
  5125                           ;main.c: 532: nearFan = 0;
  5126  000FAA  0E00               	movlw	0
  5127  000FAC  0103               	movlb	3	; () banked
  5128  000FAE  6F8C               	movwf	printAuto@nearFan& (0+255),b
  5129                           
  5130                           ;main.c: 533: break;
  5131  000FB0  D009               	goto	u13710
  5132  000FB2                     l11623:
  5133                           
  5134                           ;main.c: 534: };main.c: 536: if (!azoTouchPollAuto())
  5135  000FB2  EC25  F027         	call	_azoTouchPollAuto	;wreg free
  5136  000FB6  0900               	iorlw	0
  5137  000FB8  B4D8               	btfsc	status,2,c
  5138  000FBA  0012               	return	
  5139  000FBC                     l11627:
  5140  000FBC  0103               	movlb	3	; () banked
  5141  000FBE  518C               	movf	printAuto@nearFan& (0+255),w,b
  5142  000FC0  A4D8               	btfss	status,2,c
  5143  000FC2  D73B               	goto	l11587
  5144  000FC4                     u13710:
  5145                           
  5146                           ; BSR set to: 3
  5147                           ;main.c: 539: };main.c: 541: if (EUSART1_GetSensorsBool())
  5148  000FC4  EC83  F02D         	call	_EUSART1_GetSensorsBool	;wreg free
  5149  000FC8  0900               	iorlw	0
  5150  000FCA  B4D8               	btfsc	status,2,c
  5151  000FCC  D02A               	goto	l11635
  5152                           
  5153                           ;main.c: 542: {;main.c: 543: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  5154  000FCE  C0E4  F097         	movff	_guiLux,___fttol@f1
  5155  000FD2  C0E5  F098         	movff	_guiLux+1,___fttol@f1+1
  5156  000FD6  C0E6  F099         	movff	_guiLux+2,___fttol@f1+2
  5157  000FDA  EC7D  F023         	call	___fttol	;wreg free
  5158  000FDE  C097  F38D         	movff	?___fttol,_printAuto$3993
  5159  000FE2  C098  F38E         	movff	?___fttol+1,_printAuto$3993+1
  5160                           
  5161                           ;main.c: 542: {;main.c: 543: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  5162  000FE6  C0E7  F16B         	movff	_guiTemp,sendData@temp
  5163  000FEA  C0E8  F16C         	movff	_guiTemp+1,sendData@temp+1
  5164  000FEE  C0E9  F16D         	movff	_guiTemp+2,sendData@temp+2
  5165  000FF2  C38D  F16E         	movff	_printAuto$3993,sendData@lux
  5166  000FF6  C38E  F16F         	movff	_printAuto$3993+1,sendData@lux+1
  5167  000FFA  C0DE  F170         	movff	_guiDistanceC,sendData@distanceC
  5168  000FFE  C0DF  F171         	movff	_guiDistanceC+1,sendData@distanceC+1
  5169  001002  C0E0  F172         	movff	_guiDistanceC+2,sendData@distanceC+2
  5170  001006  C0E1  F173         	movff	_guiDistanceL,sendData@distanceL
  5171  00100A  C0E2  F174         	movff	_guiDistanceL+1,sendData@distanceL+1
  5172  00100E  C0E3  F175         	movff	_guiDistanceL+2,sendData@distanceL+2
  5173  001012  C0DB  F176         	movff	_guiDistanceR,sendData@distanceR
  5174  001016  C0DC  F177         	movff	_guiDistanceR+1,sendData@distanceR+1
  5175  00101A  C0DD  F178         	movff	_guiDistanceR+2,sendData@distanceR+2
  5176  00101E  ECEB  F026         	call	_sendData	;wreg free
  5177  001022                     l11635:
  5178                           
  5179                           ;main.c: 544: };main.c: 547: nearFan = 1;
  5180  001022  0E01               	movlw	1
  5181  001024  0103               	movlb	3	; () banked
  5182  001026  6F8C               	movwf	printAuto@nearFan& (0+255),b
  5183                           
  5184                           ; BSR set to: 3
  5185                           ;main.c: 549: LCD_clear();
  5186  001028  EC7E  F02C         	call	_LCD_clear	;wreg free
  5187                           
  5188                           ;main.c: 550: LCD_send_string("Distance Three", 1);
  5189  00102C  0E6F               	movlw	low STR_26
  5190  00102E  0100               	movlb	0	; () banked
  5191  001030  6F60               	movwf	LCD_send_string@str& (0+255),b
  5192  001032  0E7F               	movlw	high STR_26
  5193  001034  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  5194  001036  0E01               	movlw	1
  5195  001038  6F62               	movwf	LCD_send_string@line& (0+255),b
  5196  00103A  EC20  F013         	call	_LCD_send_string	;wreg free
  5197                           
  5198                           ;main.c: 551: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5199  00103E  0E0B               	movlw	11
  5200  001040  0101               	movlb	1	; () banked
  5201  001042  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  5202  001044  0E26               	movlw	38
  5203  001046  6F79               	movwf	??_printAuto& (0+255),b
  5204  001048  0E5D               	movlw	93
  5205  00104A                     u14117:
  5206  00104A  2EE8               	decfsz	wreg,f,c
  5207  00104C  D7FE               	bra	u14117
  5208  00104E  2F79               	decfsz	??_printAuto& (0+255),f,b
  5209  001050  D7FC               	bra	u14117
  5210  001052  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  5211  001054  D7FA               	bra	u14117
  5212  001056  D000               	nop2	
  5213                           
  5214                           ;main.c: 553: while (nearFan) {
  5215  001058  D0C1               	goto	l11683
  5216  00105A                     l11643:
  5217                           
  5218                           ; BSR set to: 3
  5219                           ;main.c: 555: sendPulse3();
  5220  00105A  EC1F  F02D         	call	_sendPulse3	;wreg free
  5221  00105E                     l1181:
  5222  00105E  AE81               	btfss	3969,7,c	;volatile
  5223  001060  D7FE               	goto	l1181
  5224                           
  5225                           ;main.c: 557: TMR1 = 0;
  5226  001062  0E00               	movlw	0
  5227  001064  6ECF               	movwf	4047,c	;volatile
  5228  001066  0E00               	movlw	0
  5229  001068  6ECE               	movwf	4046,c	;volatile
  5230                           
  5231                           ;main.c: 558: TMR1ON = 1;
  5232  00106A  80CD               	bsf	4045,0,c	;volatile
  5233  00106C                     l1184:
  5234  00106C  AE81               	btfss	3969,7,c	;volatile
  5235  00106E  D002               	goto	u13750
  5236  001070  A09E               	btfss	3998,0,c	;volatile
  5237  001072  D7FC               	goto	l1184
  5238  001074                     u13750:
  5239                           
  5240                           ;main.c: 560: time = TMR1;
  5241  001074  CFCE F135          	movff	4046,_time	;volatile
  5242  001078  CFCF F136          	movff	4047,_time+1	;volatile
  5243                           
  5244                           ;main.c: 562: TMR1ON = 0;
  5245  00107C  90CD               	bcf	4045,0,c	;volatile
  5246                           
  5247                           ;main.c: 564: distance = time/117.0/100.0;
  5248  00107E  0E00               	movlw	0
  5249  001080  0100               	movlb	0	; () banked
  5250  001082  6F75               	movwf	___ftdiv@f2& (0+255),b
  5251  001084  0EEA               	movlw	234
  5252  001086  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  5253  001088  0E42               	movlw	66
  5254  00108A  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  5255  00108C  C135  F022         	movff	_time,___awtoft@c
  5256  001090  C136  F023         	movff	_time+1,___awtoft@c+1
  5257  001094  EC47  F02B         	call	___awtoft	;wreg free
  5258  001098  C022  F072         	movff	?___awtoft,___ftdiv@f1
  5259  00109C  C023  F073         	movff	?___awtoft+1,___ftdiv@f1+1
  5260  0010A0  C024  F074         	movff	?___awtoft+2,___ftdiv@f1+2
  5261  0010A4  ECC0  F021         	call	___ftdiv	;wreg free
  5262  0010A8  C072  F383         	movff	?___ftdiv,_printAuto$4000
  5263  0010AC  C073  F384         	movff	?___ftdiv+1,_printAuto$4000+1
  5264  0010B0  C074  F385         	movff	?___ftdiv+2,_printAuto$4000+2
  5265                           
  5266                           ;main.c: 564: distance = time/117.0/100.0;
  5267  0010B4  C383  F072         	movff	_printAuto$4000,___ftdiv@f1
  5268  0010B8  C384  F073         	movff	_printAuto$4000+1,___ftdiv@f1+1
  5269  0010BC  C385  F074         	movff	_printAuto$4000+2,___ftdiv@f1+2
  5270  0010C0  0E00               	movlw	0
  5271  0010C2  0100               	movlb	0	; () banked
  5272  0010C4  6F75               	movwf	___ftdiv@f2& (0+255),b
  5273  0010C6  0EC8               	movlw	200
  5274  0010C8  6F76               	movwf	(___ftdiv@f2+1)& (0+255),b
  5275  0010CA  0E42               	movlw	66
  5276  0010CC  6F77               	movwf	(___ftdiv@f2+2)& (0+255),b
  5277  0010CE  ECC0  F021         	call	___ftdiv	;wreg free
  5278  0010D2  C072  F122         	movff	?___ftdiv,_distance
  5279  0010D6  C073  F123         	movff	?___ftdiv+1,_distance+1
  5280  0010DA  C074  F124         	movff	?___ftdiv+2,_distance+2
  5281                           
  5282                           ;main.c: 566: guiDistanceR = distance;
  5283  0010DE  C122  F0DB         	movff	_distance,_guiDistanceR
  5284  0010E2  C123  F0DC         	movff	_distance+1,_guiDistanceR+1
  5285  0010E6  C124  F0DD         	movff	_distance+2,_guiDistanceR+2
  5286                           
  5287                           ;main.c: 568: sprintf(valDistance,"%.3f",distance);
  5288  0010EA  0E80               	movlw	low _valDistance
  5289  0010EC  0100               	movlb	0	; () banked
  5290  0010EE  6FC9               	movwf	sprintf@wh& (0+255),b
  5291  0010F0  0E02               	movlw	high _valDistance
  5292  0010F2  6FCA               	movwf	(sprintf@wh+1)& (0+255),b
  5293  0010F4  0EFA               	movlw	low STR_22
  5294  0010F6  6FCB               	movwf	sprintf@f& (0+255),b
  5295  0010F8  0E7F               	movlw	high STR_22
  5296  0010FA  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  5297  0010FC  C122  F0CD         	movff	_distance,?_sprintf+4
  5298  001100  C123  F0CE         	movff	_distance+1,?_sprintf+5
  5299  001104  C124  F0CF         	movff	_distance+2,?_sprintf+6
  5300  001108  EC46  F02A         	call	_sprintf	;wreg free
  5301                           
  5302                           ;main.c: 569: char str[]="Distance 3(m)\n";
  5303  00110C  EE22  F010         	lfsr	2,printAuto@F6439
  5304  001110  EE13  F02E         	lfsr	1,printAuto@str_2672
  5305  001114  0E0E               	movlw	14
  5306  001116                     u13761:
  5307  001116  CFDB FFE3          	movff	plusw2,plusw1
  5308  00111A  06E8               	decf	wreg,f,c
  5309  00111C  E2FC               	bc	u13761
  5310                           
  5311                           ;main.c: 570: strcat(str,valDistance);
  5312  00111E  0E2E               	movlw	low printAuto@str_2672
  5313  001120  6E1A               	movwf	strcat@to,c
  5314  001122  0E03               	movlw	high printAuto@str_2672
  5315  001124  6E1B               	movwf	strcat@to+1,c
  5316  001126  0E80               	movlw	low _valDistance
  5317  001128  6E1C               	movwf	strcat@from,c
  5318  00112A  0E02               	movlw	high _valDistance
  5319  00112C  6E1D               	movwf	strcat@from+1,c
  5320  00112E  EC68  F02A         	call	_strcat	;wreg free
  5321                           
  5322                           ;main.c: 571: LCD_clear();
  5323  001132  EC7E  F02C         	call	_LCD_clear	;wreg free
  5324                           
  5325                           ;main.c: 572: LCD_send_string(str, 1);
  5326  001136  0E2E               	movlw	low printAuto@str_2672
  5327  001138  0100               	movlb	0	; () banked
  5328  00113A  6F60               	movwf	LCD_send_string@str& (0+255),b
  5329  00113C  0E03               	movlw	high printAuto@str_2672
  5330  00113E  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  5331  001140  0E01               	movlw	1
  5332  001142  6F62               	movwf	LCD_send_string@line& (0+255),b
  5333  001144  EC20  F013         	call	_LCD_send_string	;wreg free
  5334                           
  5335                           ;main.c: 573: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5336  001148  0E0B               	movlw	11
  5337  00114A  0101               	movlb	1	; () banked
  5338  00114C  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  5339  00114E  0E26               	movlw	38
  5340  001150  6F79               	movwf	??_printAuto& (0+255),b
  5341  001152  0E5D               	movlw	93
  5342  001154                     u14127:
  5343  001154  2EE8               	decfsz	wreg,f,c
  5344  001156  D7FE               	bra	u14127
  5345  001158  2F79               	decfsz	??_printAuto& (0+255),f,b
  5346  00115A  D7FC               	bra	u14127
  5347  00115C  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  5348  00115E  D7FA               	bra	u14127
  5349  001160  D000               	nop2	
  5350                           
  5351                           ;main.c: 574: if (distance<=.15)
  5352  001162  0E9A               	movlw	154
  5353  001164  6E1A               	movwf	___ftge@ff1,c
  5354  001166  0E19               	movlw	25
  5355  001168  6E1B               	movwf	___ftge@ff1+1,c
  5356  00116A  0E3E               	movlw	62
  5357  00116C  6E1C               	movwf	___ftge@ff1+2,c
  5358  00116E  C122  F01D         	movff	_distance,___ftge@ff2
  5359  001172  C123  F01E         	movff	_distance+1,___ftge@ff2+1
  5360  001176  C124  F01F         	movff	_distance+2,___ftge@ff2+2
  5361  00117A  EC5F  F027         	call	___ftge	;wreg free
  5362  00117E  A0D8               	btfss	status,0,c
  5363  001180  D01E               	goto	l11675
  5364                           
  5365                           ;main.c: 575: {;main.c: 576: PWM5_LoadDutyValue(1023);
  5366  001182  0E03               	movlw	3
  5367  001184  6E1B               	movwf	PWM5_LoadDutyValue@dutyValue+1,c
  5368  001186  681A               	setf	PWM5_LoadDutyValue@dutyValue,c
  5369  001188  ECCE  F02B         	call	_PWM5_LoadDutyValue	;wreg free
  5370                           
  5371                           ;main.c: 577: LCD_clear();
  5372  00118C  EC7E  F02C         	call	_LCD_clear	;wreg free
  5373                           
  5374                           ;main.c: 578: LCD_send_string("Detected \n Right", 1);
  5375  001190  0E3D               	movlw	low STR_28
  5376  001192  0100               	movlb	0	; () banked
  5377  001194  6F60               	movwf	LCD_send_string@str& (0+255),b
  5378  001196  0E7F               	movlw	high STR_28
  5379  001198  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  5380  00119A  0E01               	movlw	1
  5381  00119C  6F62               	movwf	LCD_send_string@line& (0+255),b
  5382  00119E  EC20  F013         	call	_LCD_send_string	;wreg free
  5383                           
  5384                           ;main.c: 579: _delay((unsigned long)((1000)*(8000000/4000.0)));
  5385  0011A2  0E0B               	movlw	11
  5386  0011A4  0101               	movlb	1	; () banked
  5387  0011A6  6F7A               	movwf	(??_printAuto+1)& (0+255),b
  5388  0011A8  0E26               	movlw	38
  5389  0011AA  6F79               	movwf	??_printAuto& (0+255),b
  5390  0011AC  0E5D               	movlw	93
  5391  0011AE                     u14137:
  5392  0011AE  2EE8               	decfsz	wreg,f,c
  5393  0011B0  D7FE               	bra	u14137
  5394  0011B2  2F79               	decfsz	??_printAuto& (0+255),f,b
  5395  0011B4  D7FC               	bra	u14137
  5396  0011B6  2F7A               	decfsz	(??_printAuto+1)& (0+255),f,b
  5397  0011B8  D7FA               	bra	u14137
  5398  0011BA  D000               	nop2	
  5399                           
  5400                           ;main.c: 581: } else {
  5401  0011BC  D00A               	goto	l11679
  5402  0011BE                     l11675:
  5403                           
  5404                           ;main.c: 582: dcMotor(manualSpeed);
  5405  0011BE  C0FE  F01E         	movff	_manualSpeed,dcMotor@speeed
  5406  0011C2  C0FF  F01F         	movff	_manualSpeed+1,dcMotor@speeed+1
  5407  0011C6  EC90  F028         	call	_dcMotor	;wreg free
  5408                           
  5409                           ;main.c: 583: nearFan = 0;
  5410  0011CA  0E00               	movlw	0
  5411  0011CC  0103               	movlb	3	; () banked
  5412  0011CE  6F8C               	movwf	printAuto@nearFan& (0+255),b
  5413                           
  5414                           ;main.c: 584: break;
  5415  0011D0  D009               	goto	u13790
  5416  0011D2                     l11679:
  5417                           
  5418                           ;main.c: 585: };main.c: 588: if (!azoTouchPollAuto())
  5419  0011D2  EC25  F027         	call	_azoTouchPollAuto	;wreg free
  5420  0011D6  0900               	iorlw	0
  5421  0011D8  B4D8               	btfsc	status,2,c
  5422  0011DA  0012               	return	
  5423  0011DC                     l11683:
  5424  0011DC  0103               	movlb	3	; () banked
  5425  0011DE  518C               	movf	printAuto@nearFan& (0+255),w,b
  5426  0011E0  A4D8               	btfss	status,2,c
  5427  0011E2  D73B               	goto	l11643
  5428  0011E4                     u13790:
  5429                           
  5430                           ; BSR set to: 3
  5431                           ;main.c: 591: };main.c: 593: if (EUSART1_GetSensorsBool())
  5432  0011E4  EC83  F02D         	call	_EUSART1_GetSensorsBool	;wreg free
  5433  0011E8  0900               	iorlw	0
  5434  0011EA  B4D8               	btfsc	status,2,c
  5435  0011EC  0012               	return	
  5436                           
  5437                           ;main.c: 594: {;main.c: 595: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  5438  0011EE  C0E4  F097         	movff	_guiLux,___fttol@f1
  5439  0011F2  C0E5  F098         	movff	_guiLux+1,___fttol@f1+1
  5440  0011F6  C0E6  F099         	movff	_guiLux+2,___fttol@f1+2
  5441  0011FA  EC7D  F023         	call	___fttol	;wreg free
  5442  0011FE  C097  F38D         	movff	?___fttol,_printAuto$3993
  5443  001202  C098  F38E         	movff	?___fttol+1,_printAuto$3993+1
  5444                           
  5445                           ;main.c: 594: {;main.c: 595: sendData(guiTemp, guiLux, guiDistanceC, guiDistanceL, guiDi
      +                          stanceR);
  5446  001206  C0E7  F16B         	movff	_guiTemp,sendData@temp
  5447  00120A  C0E8  F16C         	movff	_guiTemp+1,sendData@temp+1
  5448  00120E  C0E9  F16D         	movff	_guiTemp+2,sendData@temp+2
  5449  001212  C38D  F16E         	movff	_printAuto$3993,sendData@lux
  5450  001216  C38E  F16F         	movff	_printAuto$3993+1,sendData@lux+1
  5451  00121A  C0DE  F170         	movff	_guiDistanceC,sendData@distanceC
  5452  00121E  C0DF  F171         	movff	_guiDistanceC+1,sendData@distanceC+1
  5453  001222  C0E0  F172         	movff	_guiDistanceC+2,sendData@distanceC+2
  5454  001226  C0E1  F173         	movff	_guiDistanceL,sendData@distanceL
  5455  00122A  C0E2  F174         	movff	_guiDistanceL+1,sendData@distanceL+1
  5456  00122E  C0E3  F175         	movff	_guiDistanceL+2,sendData@distanceL+2
  5457  001232  C0DB  F176         	movff	_guiDistanceR,sendData@distanceR
  5458  001236  C0DC  F177         	movff	_guiDistanceR+1,sendData@distanceR+1
  5459  00123A  C0DD  F178         	movff	_guiDistanceR+2,sendData@distanceR+2
  5460  00123E  ECEB  F026         	call	_sendData	;wreg free
  5461  001242  0012               	return		;funcret
  5462  001244                     __end_of_printAuto:
  5463                           	opt callstack 0
  5464                           
  5465 ;; *************** function _strcat *****************
  5466 ;; Defined at:
  5467 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  to              2   25[COMRAM] PTR unsigned char 
  5470 ;;		 -> printAuto@str_2672(15), printAuto@str_2667(15), printAuto@str(15), printAuto@strTemp(16), 
  5471 ;;		 -> printAuto@strLux(13), 
  5472 ;;  from            2   27[COMRAM] PTR const unsigned char 
  5473 ;;		 -> valDistance(10), printAuto@valTemp(3), printAuto@val(30), 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  cp              2   29[COMRAM] PTR unsigned char 
  5476 ;;		 -> printAuto@str_2672(15), printAuto@str_2667(15), printAuto@str(15), printAuto@strTemp(16), 
  5477 ;;		 -> printAuto@strLux(13), 
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  2   25[COMRAM] PTR unsigned char 
  5480 ;; Registers used:
  5481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5487 ;;      Params:         4       0       0       0       0       0       0
  5488 ;;      Locals:         2       0       0       0       0       0       0
  5489 ;;      Temps:          0       0       0       0       0       0       0
  5490 ;;      Totals:         6       0       0       0       0       0       0
  5491 ;;Total ram usage:        6 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    5
  5494 ;; This function calls:
  5495 ;;		Nothing
  5496 ;; This function is called by:
  5497 ;;		_printAuto
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text6
  5502  0054D0                     __ptext6:
  5503                           	opt callstack 0
  5504  0054D0                     _strcat:
  5505                           	opt callstack 24
  5506                           
  5507                           ;incstack = 0
  5508  0054D0  C01A  F01E         	movff	strcat@to,strcat@cp
  5509  0054D4  C01B  F01F         	movff	strcat@to+1,strcat@cp+1
  5510  0054D8  D002               	goto	l11195
  5511  0054DA                     l11193:
  5512  0054DA  4A1E               	infsnz	strcat@cp,f,c
  5513  0054DC  2A1F               	incf	strcat@cp+1,f,c
  5514  0054DE                     l11195:
  5515  0054DE  C01E  FFD9         	movff	strcat@cp,fsr2l
  5516  0054E2  C01F  FFDA         	movff	strcat@cp+1,fsr2h
  5517  0054E6  50DF               	movf	indf2,w,c
  5518  0054E8  B4D8               	btfsc	status,2,c
  5519  0054EA  D005               	goto	l11199
  5520  0054EC  D7F6               	goto	l11193
  5521  0054EE                     l11197:
  5522  0054EE  4A1E               	infsnz	strcat@cp,f,c
  5523  0054F0  2A1F               	incf	strcat@cp+1,f,c
  5524  0054F2  4A1C               	infsnz	strcat@from,f,c
  5525  0054F4  2A1D               	incf	strcat@from+1,f,c
  5526  0054F6                     l11199:
  5527  0054F6  C01C  FFD9         	movff	strcat@from,fsr2l
  5528  0054FA  C01D  FFDA         	movff	strcat@from+1,fsr2h
  5529  0054FE  C01E  FFE1         	movff	strcat@cp,fsr1l
  5530  005502  C01F  FFE2         	movff	strcat@cp+1,fsr1h
  5531  005506  CFDF FFE7          	movff	indf2,indf1
  5532  00550A  50E7               	movf	indf1,w,c
  5533  00550C  B4D8               	btfsc	status,2,c
  5534  00550E  0012               	return	
  5535  005510  D7EE               	goto	l11197
  5536  005512                     __end_of_strcat:
  5537                           	opt callstack 0
  5538                           
  5539 ;; *************** function _sprintf *****************
  5540 ;; Defined at:
  5541 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprintf.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  wh              2  105[BANK0 ] PTR unsigned char 
  5544 ;;		 -> valDistance(10), printAuto@valTemp(3), printAuto@val(30), 
  5545 ;;  f               2  107[BANK0 ] PTR const unsigned char 
  5546 ;;		 -> STR_27(5), STR_24(5), STR_22(5), STR_17(5), 
  5547 ;;		 -> STR_16(5), 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  pb              4  114[BANK0 ] struct __prbuf
  5550 ;;  ap              2  112[BANK0 ] PTR void [1]
  5551 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  2  105[BANK0 ] int 
  5554 ;; Registers used:
  5555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5561 ;;      Params:         0       7       0       0       0       0       0
  5562 ;;      Locals:         0       6       0       0       0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0
  5564 ;;      Totals:         0      13       0       0       0       0       0
  5565 ;;Total ram usage:       13 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    9
  5568 ;; This function calls:
  5569 ;;		__doprnt
  5570 ;; This function is called by:
  5571 ;;		_printAuto
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text7
  5576  00548C                     __ptext7:
  5577                           	opt callstack 0
  5578  00548C                     _sprintf:
  5579                           	opt callstack 20
  5580                           
  5581                           ;incstack = 0
  5582  00548C  C0C9  F0D2         	movff	sprintf@wh,sprintf@pb
  5583  005490  C0CA  F0D3         	movff	sprintf@wh+1,sprintf@pb+1
  5584  005494  0E00               	movlw	0
  5585  005496  0100               	movlb	0	; () banked
  5586  005498  6FD4               	movwf	(sprintf@pb+2)& (0+255),b
  5587  00549A  0E00               	movlw	0
  5588  00549C  6FD5               	movwf	(sprintf@pb+3)& (0+255),b
  5589  00549E  0ECD               	movlw	low (?_sprintf+4)
  5590  0054A0  6FD0               	movwf	sprintf@ap& (0+255),b
  5591  0054A2  0E00               	movlw	high (?_sprintf+4)
  5592  0054A4  6FD1               	movwf	(sprintf@ap+1)& (0+255),b
  5593                           
  5594                           ; BSR set to: 0
  5595  0054A6  0ED2               	movlw	low sprintf@pb
  5596  0054A8  6FA6               	movwf	__doprnt@pb& (0+255),b
  5597  0054AA  0E00               	movlw	high sprintf@pb
  5598  0054AC  6FA7               	movwf	(__doprnt@pb+1)& (0+255),b
  5599  0054AE  C0CB  F0A8         	movff	sprintf@f,__doprnt@f
  5600  0054B2  C0CC  F0A9         	movff	sprintf@f+1,__doprnt@f+1
  5601  0054B6  0ED0               	movlw	low sprintf@ap
  5602  0054B8  6FAA               	movwf	__doprnt@ap& (0+255),b
  5603  0054BA  0E00               	movlw	high sprintf@ap
  5604  0054BC  6FAB               	movwf	(__doprnt@ap+1)& (0+255),b
  5605  0054BE  EC22  F009         	call	__doprnt	;wreg free
  5606  0054C2  C0D2  FFD9         	movff	sprintf@pb,fsr2l
  5607  0054C6  C0D3  FFDA         	movff	sprintf@pb+1,fsr2h
  5608  0054CA  0E00               	movlw	0
  5609  0054CC  6EDF               	movwf	indf2,c
  5610  0054CE  0012               	return		;funcret
  5611  0054D0                     __end_of_sprintf:
  5612                           	opt callstack 0
  5613                           
  5614 ;; *************** function _sendPulse3 *****************
  5615 ;; Defined at:
  5616 ;;		line 614 in file "main.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;		None
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5630 ;;      Params:         0       0       0       0       0       0       0
  5631 ;;      Locals:         0       0       0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0
  5633 ;;      Totals:         0       0       0       0       0       0       0
  5634 ;;Total ram usage:        0 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    5
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_printAuto
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text8
  5645  005A3E                     __ptext8:
  5646                           	opt callstack 0
  5647  005A3E                     _sendPulse3:
  5648                           	opt callstack 24
  5649                           
  5650                           ;main.c: 616: LATBbits.LATB6 = 1;
  5651                           
  5652                           ;incstack = 0
  5653  005A3E  8C8A               	bsf	3978,6,c	;volatile
  5654                           
  5655                           ;main.c: 617: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5656  005A40  0E06               	movlw	6
  5657  005A42                     u14147:
  5658  005A42  2EE8               	decfsz	wreg,f,c
  5659  005A44  D7FE               	bra	u14147
  5660  005A46  D000               	nop2	
  5661                           
  5662                           ;main.c: 618: LATBbits.LATB6 = 0;
  5663  005A48  9C8A               	bcf	3978,6,c	;volatile
  5664  005A4A  0012               	return		;funcret
  5665  005A4C                     __end_of_sendPulse3:
  5666                           	opt callstack 0
  5667                           
  5668 ;; *************** function _sendPulse2 *****************
  5669 ;; Defined at:
  5670 ;;		line 607 in file "main.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;		None
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5684 ;;      Params:         0       0       0       0       0       0       0
  5685 ;;      Locals:         0       0       0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0       0       0
  5687 ;;      Totals:         0       0       0       0       0       0       0
  5688 ;;Total ram usage:        0 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    5
  5691 ;; This function calls:
  5692 ;;		Nothing
  5693 ;; This function is called by:
  5694 ;;		_printAuto
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           	psect	text9
  5699  005A4C                     __ptext9:
  5700                           	opt callstack 0
  5701  005A4C                     _sendPulse2:
  5702                           	opt callstack 24
  5703                           
  5704                           ;main.c: 609: LATBbits.LATB4 = 1;
  5705                           
  5706                           ;incstack = 0
  5707  005A4C  888A               	bsf	3978,4,c	;volatile
  5708                           
  5709                           ;main.c: 610: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5710  005A4E  0E06               	movlw	6
  5711  005A50                     u14157:
  5712  005A50  2EE8               	decfsz	wreg,f,c
  5713  005A52  D7FE               	bra	u14157
  5714  005A54  D000               	nop2	
  5715                           
  5716                           ;main.c: 611: LATBbits.LATB4 = 0;
  5717  005A56  988A               	bcf	3978,4,c	;volatile
  5718  005A58  0012               	return		;funcret
  5719  005A5A                     __end_of_sendPulse2:
  5720                           	opt callstack 0
  5721                           
  5722 ;; *************** function _sendPulse1 *****************
  5723 ;; Defined at:
  5724 ;;		line 600 in file "main.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  1    wreg      void 
  5731 ;; Registers used:
  5732 ;;		wreg
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5738 ;;      Params:         0       0       0       0       0       0       0
  5739 ;;      Locals:         0       0       0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0
  5741 ;;      Totals:         0       0       0       0       0       0       0
  5742 ;;Total ram usage:        0 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    5
  5745 ;; This function calls:
  5746 ;;		Nothing
  5747 ;; This function is called by:
  5748 ;;		_printAuto
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text10
  5753  005A5A                     __ptext10:
  5754                           	opt callstack 0
  5755  005A5A                     _sendPulse1:
  5756                           	opt callstack 24
  5757                           
  5758                           ;main.c: 602: LATBbits.LATB1 = 1;
  5759                           
  5760                           ;incstack = 0
  5761  005A5A  828A               	bsf	3978,1,c	;volatile
  5762                           
  5763                           ;main.c: 603: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5764  005A5C  0E06               	movlw	6
  5765  005A5E                     u14167:
  5766  005A5E  2EE8               	decfsz	wreg,f,c
  5767  005A60  D7FE               	bra	u14167
  5768  005A62  D000               	nop2	
  5769                           
  5770                           ;main.c: 604: LATBbits.LATB1 = 0;
  5771  005A64  928A               	bcf	3978,1,c	;volatile
  5772  005A66  0012               	return		;funcret
  5773  005A68                     __end_of_sendPulse1:
  5774                           	opt callstack 0
  5775                           
  5776 ;; *************** function _sendData *****************
  5777 ;; Defined at:
  5778 ;;		line 231 in file "main.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  temp            3    6[BANK1 ] float 
  5781 ;;  lux             2    9[BANK1 ] int 
  5782 ;;  distanceC       3   11[BANK1 ] float 
  5783 ;;  distanceL       3   14[BANK1 ] float 
  5784 ;;  distanceR       3   17[BANK1 ] float 
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;		None
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5796 ;;      Params:         0       0      14       0       0       0       0
  5797 ;;      Locals:         0       0       0       0       0       0       0
  5798 ;;      Temps:          0       2       0       0       0       0       0
  5799 ;;      Totals:         0       2      14       0       0       0       0
  5800 ;;Total ram usage:       16 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:   10
  5803 ;; This function calls:
  5804 ;;		_EUSART1_ToggleSensorsBool
  5805 ;;		_printf
  5806 ;; This function is called by:
  5807 ;;		_main
  5808 ;;		_printAuto
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text11
  5813  004DD6                     __ptext11:
  5814                           	opt callstack 0
  5815  004DD6                     _sendData:
  5816                           	opt callstack 20
  5817                           
  5818                           ;main.c: 233: printf("AT+CIPSEND=0,26\r\n");
  5819                           
  5820                           ;incstack = 0
  5821  004DD6  0E2B               	movlw	low STR_8
  5822  004DD8  0100               	movlb	0	; () banked
  5823  004DDA  6FC9               	movwf	printf@f& (0+255),b
  5824  004DDC  0E7F               	movlw	high STR_8
  5825  004DDE  6FCA               	movwf	(printf@f+1)& (0+255),b
  5826  004DE0  EC2A  F02B         	call	_printf	;wreg free
  5827                           
  5828                           ;main.c: 234: _delay((unsigned long)((500)*(8000000/4000.0)));
  5829  004DE4  0E06               	movlw	6
  5830  004DE6  0100               	movlb	0	; () banked
  5831  004DE8  6FDA               	movwf	(??_sendData+1)& (0+255),b
  5832  004DEA  0E13               	movlw	19
  5833  004DEC  6FD9               	movwf	??_sendData& (0+255),b
  5834  004DEE  0EAD               	movlw	173
  5835  004DF0                     u14177:
  5836  004DF0  2EE8               	decfsz	wreg,f,c
  5837  004DF2  D7FE               	bra	u14177
  5838  004DF4  2FD9               	decfsz	??_sendData& (0+255),f,b
  5839  004DF6  D7FC               	bra	u14177
  5840  004DF8  2FDA               	decfsz	(??_sendData+1)& (0+255),f,b
  5841  004DFA  D7FA               	bra	u14177
  5842  004DFC  D000               	nop2	
  5843                           
  5844                           ;main.c: 237: printf ("S%04.1f%06.1f%05.3f%05.3f%05.3f\r\n", temp, lux, distanceC, dista
      +                          nceL, distanceR);
  5845  004DFE  0EDA               	movlw	low STR_9
  5846  004E00  0100               	movlb	0	; () banked
  5847  004E02  6FC9               	movwf	printf@f& (0+255),b
  5848  004E04  0E7E               	movlw	high STR_9
  5849  004E06  6FCA               	movwf	(printf@f+1)& (0+255),b
  5850  004E08  C16B  F0CB         	movff	sendData@temp,?_printf+2
  5851  004E0C  C16C  F0CC         	movff	sendData@temp+1,?_printf+3
  5852  004E10  C16D  F0CD         	movff	sendData@temp+2,?_printf+4
  5853  004E14  C16E  F0CE         	movff	sendData@lux,?_printf+5
  5854  004E18  C16F  F0CF         	movff	sendData@lux+1,?_printf+6
  5855  004E1C  C170  F0D0         	movff	sendData@distanceC,?_printf+7
  5856  004E20  C171  F0D1         	movff	sendData@distanceC+1,?_printf+8
  5857  004E24  C172  F0D2         	movff	sendData@distanceC+2,?_printf+9
  5858  004E28  C173  F0D3         	movff	sendData@distanceL,?_printf+10
  5859  004E2C  C174  F0D4         	movff	sendData@distanceL+1,?_printf+11
  5860  004E30  C175  F0D5         	movff	sendData@distanceL+2,?_printf+12
  5861  004E34  C176  F0D6         	movff	sendData@distanceR,?_printf+13
  5862  004E38  C177  F0D7         	movff	sendData@distanceR+1,?_printf+14
  5863  004E3C  C178  F0D8         	movff	sendData@distanceR+2,?_printf+15
  5864  004E40  EC2A  F02B         	call	_printf	;wreg free
  5865                           
  5866                           ;main.c: 239: EUSART1_ToggleSensorsBool();
  5867  004E44  EC77  F02D         	call	_EUSART1_ToggleSensorsBool	;wreg free
  5868  004E48  0012               	return		;funcret
  5869  004E4A                     __end_of_sendData:
  5870                           	opt callstack 0
  5871                           
  5872 ;; *************** function _EUSART1_ToggleSensorsBool *****************
  5873 ;; Defined at:
  5874 ;;		line 613 in file "mcc_generated_files/eusart1.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;		None
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;		None
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      void 
  5881 ;; Registers used:
  5882 ;;		wreg, status,2
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5888 ;;      Params:         0       0       0       0       0       0       0
  5889 ;;      Locals:         0       0       0       0       0       0       0
  5890 ;;      Temps:          0       0       0       0       0       0       0
  5891 ;;      Totals:         0       0       0       0       0       0       0
  5892 ;;Total ram usage:        0 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:    5
  5895 ;; This function calls:
  5896 ;;		Nothing
  5897 ;; This function is called by:
  5898 ;;		_sendData
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           	psect	text12
  5903  005AEE                     __ptext12:
  5904                           	opt callstack 0
  5905  005AEE                     _EUSART1_ToggleSensorsBool:
  5906                           	opt callstack 24
  5907                           
  5908                           ;eusart1.c: 615: sensorsRead = 0;
  5909                           
  5910                           ;incstack = 0
  5911  005AEE  0E00               	movlw	0
  5912  005AF0  0101               	movlb	1	; () banked
  5913  005AF2  6F4A               	movwf	_sensorsRead& (0+255),b
  5914                           
  5915                           ; BSR set to: 1
  5916  005AF4  0012               	return		;funcret
  5917  005AF6                     __end_of_EUSART1_ToggleSensorsBool:
  5918                           	opt callstack 0
  5919                           
  5920 ;; *************** function _pow *****************
  5921 ;; Defined at:
  5922 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\pow.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  x               3   97[BANK0 ] void 
  5925 ;;  y               3  100[BANK0 ] void 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  yi              4  110[BANK0 ] unsigned long 
  5928 ;;  sign            1  109[BANK0 ] unsigned char 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  3   97[BANK0 ] unsigned char 
  5931 ;; Registers used:
  5932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5938 ;;      Params:         0       6       0       0       0       0       0
  5939 ;;      Locals:         0      11       0       0       0       0       0
  5940 ;;      Temps:          0       0       0       0       0       0       0
  5941 ;;      Totals:         0      17       0       0       0       0       0
  5942 ;;Total ram usage:       17 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    9
  5945 ;; This function calls:
  5946 ;;		___ftge
  5947 ;;		___ftmul
  5948 ;;		___ftneg
  5949 ;;		___fttol
  5950 ;;		___lltoft
  5951 ;;		_exp
  5952 ;;		_log
  5953 ;; This function is called by:
  5954 ;;		_printAuto
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           	psect	text13
  5959  003B5E                     __ptext13:
  5960                           	opt callstack 0
  5961  003B5E                     _pow:
  5962                           	opt callstack 20
  5963                           
  5964                           ; BSR set to: 1
  5965                           ;incstack = 0
  5966  003B5E  0E00               	movlw	0
  5967  003B60  0100               	movlb	0	; () banked
  5968  003B62  6FCD               	movwf	pow@sign& (0+255),b
  5969                           
  5970                           ; BSR set to: 0
  5971  003B64  51C1               	movf	pow@x& (0+255),w,b
  5972  003B66  11C2               	iorwf	(pow@x+1)& (0+255),w,b
  5973  003B68  11C3               	iorwf	(pow@x+2)& (0+255),w,b
  5974  003B6A  A4D8               	btfss	status,2,c
  5975  003B6C  D01D               	goto	l11153
  5976                           
  5977                           ; BSR set to: 0
  5978  003B6E  0E00               	movlw	0
  5979  003B70  6E1A               	movwf	___ftge@ff1,c
  5980  003B72  0E00               	movlw	0
  5981  003B74  6E1B               	movwf	___ftge@ff1+1,c
  5982  003B76  0E00               	movlw	0
  5983  003B78  6E1C               	movwf	___ftge@ff1+2,c
  5984  003B7A  C0C4  F01D         	movff	pow@y,___ftge@ff2
  5985  003B7E  C0C5  F01E         	movff	pow@y+1,___ftge@ff2+1
  5986  003B82  C0C6  F01F         	movff	pow@y+2,___ftge@ff2+2
  5987  003B86  EC5F  F027         	call	___ftge	;wreg free
  5988  003B8A  A0D8               	btfss	status,0,c
  5989  003B8C  D005               	goto	l2487
  5990  003B8E  0E00               	movlw	0
  5991  003B90  0101               	movlb	1	; () banked
  5992  003B92  6F32               	movwf	(_errno+1)& (0+255),b
  5993  003B94  0E21               	movlw	33
  5994  003B96  6F31               	movwf	_errno& (0+255),b
  5995  003B98                     l2487:
  5996  003B98  0E00               	movlw	0
  5997  003B9A  0100               	movlb	0	; () banked
  5998  003B9C  6FC1               	movwf	?_pow& (0+255),b
  5999  003B9E  0E00               	movlw	0
  6000  003BA0  6FC2               	movwf	(?_pow+1)& (0+255),b
  6001  003BA2  0E00               	movlw	0
  6002  003BA4  6FC3               	movwf	(?_pow+2)& (0+255),b
  6003  003BA6  0012               	return	
  6004  003BA8                     l11153:
  6005                           
  6006                           ; BSR set to: 0
  6007  003BA8  51C4               	movf	pow@y& (0+255),w,b
  6008  003BAA  11C5               	iorwf	(pow@y+1)& (0+255),w,b
  6009  003BAC  11C6               	iorwf	(pow@y+2)& (0+255),w,b
  6010  003BAE  A4D8               	btfss	status,2,c
  6011  003BB0  D007               	goto	l11159
  6012                           
  6013                           ; BSR set to: 0
  6014  003BB2  0E00               	movlw	0
  6015  003BB4  6FC1               	movwf	?_pow& (0+255),b
  6016  003BB6  0E80               	movlw	128
  6017  003BB8  6FC2               	movwf	(?_pow+1)& (0+255),b
  6018  003BBA  0E3F               	movlw	63
  6019  003BBC  6FC3               	movwf	(?_pow+2)& (0+255),b
  6020  003BBE  0012               	return	
  6021  003BC0                     l11159:
  6022                           
  6023                           ; BSR set to: 0
  6024  003BC0  AFC3               	btfss	(pow@x+2)& (0+255),7,b
  6025  003BC2  D043               	goto	l11171
  6026                           
  6027                           ; BSR set to: 0
  6028  003BC4  C0C4  F097         	movff	pow@y,___fttol@f1
  6029  003BC8  C0C5  F098         	movff	pow@y+1,___fttol@f1+1
  6030  003BCC  C0C6  F099         	movff	pow@y+2,___fttol@f1+2
  6031  003BD0  EC7D  F023         	call	___fttol	;wreg free
  6032  003BD4  C097  F0CE         	movff	?___fttol,pow@yi
  6033  003BD8  C098  F0CF         	movff	?___fttol+1,pow@yi+1
  6034  003BDC  C099  F0D0         	movff	?___fttol+2,pow@yi+2
  6035  003BE0  C09A  F0D1         	movff	?___fttol+3,pow@yi+3
  6036  003BE4  C0CE  F022         	movff	pow@yi,___lltoft@c
  6037  003BE8  C0CF  F023         	movff	pow@yi+1,___lltoft@c+1
  6038  003BEC  C0D0  F024         	movff	pow@yi+2,___lltoft@c+2
  6039  003BF0  C0D1  F025         	movff	pow@yi+3,___lltoft@c+3
  6040  003BF4  EC36  F028         	call	___lltoft	;wreg free
  6041  003BF8  0100               	movlb	0	; () banked
  6042  003BFA  51C4               	movf	pow@y& (0+255),w,b
  6043  003BFC  1822               	xorwf	?___lltoft,w,c
  6044  003BFE  E107               	bnz	u13250
  6045  003C00  51C5               	movf	(pow@y+1)& (0+255),w,b
  6046  003C02  1823               	xorwf	?___lltoft+1,w,c
  6047  003C04  E104               	bnz	u13250
  6048  003C06  51C6               	movf	(pow@y+2)& (0+255),w,b
  6049  003C08  1824               	xorwf	?___lltoft+2,w,c
  6050  003C0A  B4D8               	btfsc	status,2,c
  6051  003C0C  D00D               	goto	l11167
  6052  003C0E                     u13250:
  6053                           
  6054                           ; BSR set to: 0
  6055  003C0E  0E00               	movlw	0
  6056  003C10  0101               	movlb	1	; () banked
  6057  003C12  6F32               	movwf	(_errno+1)& (0+255),b
  6058  003C14  0E21               	movlw	33
  6059  003C16  6F31               	movwf	_errno& (0+255),b
  6060  003C18  0E00               	movlw	0
  6061  003C1A  0100               	movlb	0	; () banked
  6062  003C1C  6FC1               	movwf	?_pow& (0+255),b
  6063  003C1E  0E00               	movlw	0
  6064  003C20  6FC2               	movwf	(?_pow+1)& (0+255),b
  6065  003C22  0E00               	movlw	0
  6066  003C24  6FC3               	movwf	(?_pow+2)& (0+255),b
  6067  003C26  0012               	return	
  6068  003C28                     l11167:
  6069                           
  6070                           ; BSR set to: 0
  6071  003C28  51CE               	movf	pow@yi& (0+255),w,b
  6072  003C2A  0B01               	andlw	1
  6073  003C2C  6FCD               	movwf	pow@sign& (0+255),b
  6074                           
  6075                           ; BSR set to: 0
  6076  003C2E  C0C1  F01A         	movff	pow@x,___ftneg@f1
  6077  003C32  C0C2  F01B         	movff	pow@x+1,___ftneg@f1+1
  6078  003C36  C0C3  F01C         	movff	pow@x+2,___ftneg@f1+2
  6079  003C3A  ECB6  F02C         	call	___ftneg	;wreg free
  6080  003C3E  C01A  F0C1         	movff	?___ftneg,pow@x
  6081  003C42  C01B  F0C2         	movff	?___ftneg+1,pow@x+1
  6082  003C46  C01C  F0C3         	movff	?___ftneg+2,pow@x+2
  6083  003C4A                     l11171:
  6084  003C4A  C0C1  F09C         	movff	pow@x,log@x
  6085  003C4E  C0C2  F09D         	movff	pow@x+1,log@x+1
  6086  003C52  C0C3  F09E         	movff	pow@x+2,log@x+2
  6087  003C56  ECB7  F01F         	call	_log	;wreg free
  6088  003C5A  C09C  F0C7         	movff	?_log,_pow$4006
  6089  003C5E  C09D  F0C8         	movff	?_log+1,_pow$4006+1
  6090  003C62  C09E  F0C9         	movff	?_log+2,_pow$4006+2
  6091  003C66  C0C7  F081         	movff	_pow$4006,___ftmul@f1
  6092  003C6A  C0C8  F082         	movff	_pow$4006+1,___ftmul@f1+1
  6093  003C6E  C0C9  F083         	movff	_pow$4006+2,___ftmul@f1+2
  6094  003C72  C0C4  F084         	movff	pow@y,___ftmul@f2
  6095  003C76  C0C5  F085         	movff	pow@y+1,___ftmul@f2+1
  6096  003C7A  C0C6  F086         	movff	pow@y+2,___ftmul@f2+2
  6097  003C7E  ECCB  F020         	call	___ftmul	;wreg free
  6098  003C82  C081  F0CA         	movff	?___ftmul,_pow$4007
  6099  003C86  C082  F0CB         	movff	?___ftmul+1,_pow$4007+1
  6100  003C8A  C083  F0CC         	movff	?___ftmul+2,_pow$4007+2
  6101  003C8E  C0CA  F0B8         	movff	_pow$4007,exp@x
  6102  003C92  C0CB  F0B9         	movff	_pow$4007+1,exp@x+1
  6103  003C96  C0CC  F0BA         	movff	_pow$4007+2,exp@x+2
  6104  003C9A  ECDF  F01B         	call	_exp	;wreg free
  6105  003C9E  C0B8  F0C1         	movff	?_exp,pow@x
  6106  003CA2  C0B9  F0C2         	movff	?_exp+1,pow@x+1
  6107  003CA6  C0BA  F0C3         	movff	?_exp+2,pow@x+2
  6108  003CAA  0100               	movlb	0	; () banked
  6109  003CAC  51CD               	movf	pow@sign& (0+255),w,b
  6110  003CAE  B4D8               	btfsc	status,2,c
  6111  003CB0  D00F               	goto	l2492
  6112                           
  6113                           ; BSR set to: 0
  6114  003CB2  C0C1  F01A         	movff	pow@x,___ftneg@f1
  6115  003CB6  C0C2  F01B         	movff	pow@x+1,___ftneg@f1+1
  6116  003CBA  C0C3  F01C         	movff	pow@x+2,___ftneg@f1+2
  6117  003CBE  ECB6  F02C         	call	___ftneg	;wreg free
  6118  003CC2  C01A  F0C1         	movff	?___ftneg,?_pow
  6119  003CC6  C01B  F0C2         	movff	?___ftneg+1,?_pow+1
  6120  003CCA  C01C  F0C3         	movff	?___ftneg+2,?_pow+2
  6121  003CCE  0012               	return	
  6122  003CD0                     l2492:
  6123                           
  6124                           ; BSR set to: 0
  6125  003CD0  C0C1  F0C1         	movff	pow@x,?_pow
  6126  003CD4  C0C2  F0C2         	movff	pow@x+1,?_pow+1
  6127  003CD8  C0C3  F0C3         	movff	pow@x+2,?_pow+2
  6128  003CDC  0012               	return		;funcret
  6129  003CDE                     __end_of_pow:
  6130                           	opt callstack 0
  6131                           
  6132 ;; *************** function _log *****************
  6133 ;; Defined at:
  6134 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\log.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;  x               3   60[BANK0 ] unsigned char 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;  exponent        2   63[BANK0 ] int 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  3   60[BANK0 ] int 
  6141 ;; Registers used:
  6142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6148 ;;      Params:         0       3       0       0       0       0       0
  6149 ;;      Locals:         0       2       0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0
  6151 ;;      Totals:         0       5       0       0       0       0       0
  6152 ;;Total ram usage:        5 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    8
  6155 ;; This function calls:
  6156 ;;		___awtoft
  6157 ;;		___ftadd
  6158 ;;		___ftmul
  6159 ;;		_eval_poly
  6160 ;;		_frexp
  6161 ;; This function is called by:
  6162 ;;		_printAuto
  6163 ;;		_pow
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	text14
  6168  003F6E                     __ptext14:
  6169                           	opt callstack 0
  6170  003F6E                     _log:
  6171                           	opt callstack 20
  6172                           
  6173                           ;incstack = 0
  6174  003F6E  0100               	movlb	0	; () banked
  6175  003F70  AF9E               	btfss	(log@x+2)& (0+255),7,b
  6176  003F72  D00D               	goto	l10835
  6177                           
  6178                           ; BSR set to: 0
  6179  003F74  0E00               	movlw	0
  6180  003F76  0101               	movlb	1	; () banked
  6181  003F78  6F32               	movwf	(_errno+1)& (0+255),b
  6182  003F7A  0E21               	movlw	33
  6183  003F7C  6F31               	movwf	_errno& (0+255),b
  6184  003F7E  0E00               	movlw	0
  6185  003F80  0100               	movlb	0	; () banked
  6186  003F82  6F9C               	movwf	?_log& (0+255),b
  6187  003F84  0E00               	movlw	0
  6188  003F86  6F9D               	movwf	(?_log+1)& (0+255),b
  6189  003F88  0E00               	movlw	0
  6190  003F8A  6F9E               	movwf	(?_log+2)& (0+255),b
  6191  003F8C  0012               	return	
  6192  003F8E                     l10835:
  6193                           
  6194                           ; BSR set to: 0
  6195  003F8E  519C               	movf	log@x& (0+255),w,b
  6196  003F90  119D               	iorwf	(log@x+1)& (0+255),w,b
  6197  003F92  119E               	iorwf	(log@x+2)& (0+255),w,b
  6198  003F94  A4D8               	btfss	status,2,c
  6199  003F96  D00D               	goto	l10841
  6200                           
  6201                           ; BSR set to: 0
  6202  003F98  0E00               	movlw	0
  6203  003F9A  0101               	movlb	1	; () banked
  6204  003F9C  6F32               	movwf	(_errno+1)& (0+255),b
  6205  003F9E  0E22               	movlw	34
  6206  003FA0  6F31               	movwf	_errno& (0+255),b
  6207  003FA2  0E00               	movlw	0
  6208  003FA4  0100               	movlb	0	; () banked
  6209  003FA6  6F9C               	movwf	?_log& (0+255),b
  6210  003FA8  0E00               	movlw	0
  6211  003FAA  6F9D               	movwf	(?_log+1)& (0+255),b
  6212  003FAC  0E00               	movlw	0
  6213  003FAE  6F9E               	movwf	(?_log+2)& (0+255),b
  6214  003FB0  0012               	return	
  6215  003FB2                     l10841:
  6216                           
  6217                           ; BSR set to: 0
  6218  003FB2  0E00               	movlw	0
  6219  003FB4  6F84               	movwf	___ftmul@f2& (0+255),b
  6220  003FB6  0E00               	movlw	0
  6221  003FB8  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  6222  003FBA  0E40               	movlw	64
  6223  003FBC  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  6224  003FBE  0E9F               	movlw	low log@exponent
  6225  003FC0  6E1D               	movwf	frexp@eptr,c
  6226  003FC2  0E00               	movlw	high log@exponent
  6227  003FC4  6E1E               	movwf	frexp@eptr+1,c
  6228  003FC6  C09C  F01A         	movff	log@x,frexp@value
  6229  003FCA  C09D  F01B         	movff	log@x+1,frexp@value+1
  6230  003FCE  C09E  F01C         	movff	log@x+2,frexp@value+2
  6231  003FD2  ECAA  F025         	call	_frexp	;wreg free
  6232  003FD6  C01A  F081         	movff	?_frexp,___ftmul@f1
  6233  003FDA  C01B  F082         	movff	?_frexp+1,___ftmul@f1+1
  6234  003FDE  C01C  F083         	movff	?_frexp+2,___ftmul@f1+2
  6235  003FE2  ECCB  F020         	call	___ftmul	;wreg free
  6236  003FE6  C081  F060         	movff	?___ftmul,___ftadd@f1
  6237  003FEA  C082  F061         	movff	?___ftmul+1,___ftadd@f1+1
  6238  003FEE  C083  F062         	movff	?___ftmul+2,___ftadd@f1+2
  6239  003FF2  0E00               	movlw	0
  6240  003FF4  0100               	movlb	0	; () banked
  6241  003FF6  6F63               	movwf	___ftadd@f2& (0+255),b
  6242  003FF8  0E80               	movlw	128
  6243  003FFA  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  6244  003FFC  0EBF               	movlw	191
  6245  003FFE  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  6246  004000  ECDA  F01C         	call	___ftadd	;wreg free
  6247  004004  C060  F09C         	movff	?___ftadd,log@x
  6248  004008  C061  F09D         	movff	?___ftadd+1,log@x+1
  6249  00400C  C062  F09E         	movff	?___ftadd+2,log@x+2
  6250  004010  0100               	movlb	0	; () banked
  6251  004012  079F               	decf	log@exponent& (0+255),f,b
  6252  004014  A0D8               	btfss	status,0,c
  6253  004016  07A0               	decf	(log@exponent+1)& (0+255),f,b
  6254                           
  6255                           ; BSR set to: 0
  6256  004018  C09C  F090         	movff	log@x,eval_poly@x
  6257  00401C  C09D  F091         	movff	log@x+1,eval_poly@x+1
  6258  004020  C09E  F092         	movff	log@x+2,eval_poly@x+2
  6259  004024  0EBF               	movlw	low log@coeff
  6260  004026  6F93               	movwf	eval_poly@d& (0+255),b
  6261  004028  0E7E               	movlw	high log@coeff
  6262  00402A  6F94               	movwf	(eval_poly@d+1)& (0+255),b
  6263  00402C  0E00               	movlw	0
  6264  00402E  6F96               	movwf	(eval_poly@n+1)& (0+255),b
  6265  004030  0E08               	movlw	8
  6266  004032  6F95               	movwf	eval_poly@n& (0+255),b
  6267  004034  ECA5  F022         	call	_eval_poly	;wreg free
  6268  004038  C090  F09C         	movff	?_eval_poly,log@x
  6269  00403C  C091  F09D         	movff	?_eval_poly+1,log@x+1
  6270  004040  C092  F09E         	movff	?_eval_poly+2,log@x+2
  6271  004044  0E72               	movlw	114
  6272  004046  0100               	movlb	0	; () banked
  6273  004048  6F84               	movwf	___ftmul@f2& (0+255),b
  6274  00404A  0E31               	movlw	49
  6275  00404C  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  6276  00404E  0E3F               	movlw	63
  6277  004050  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  6278  004052  C09F  F022         	movff	log@exponent,___awtoft@c
  6279  004056  C0A0  F023         	movff	log@exponent+1,___awtoft@c+1
  6280  00405A  EC47  F02B         	call	___awtoft	;wreg free
  6281  00405E  C022  F081         	movff	?___awtoft,___ftmul@f1
  6282  004062  C023  F082         	movff	?___awtoft+1,___ftmul@f1+1
  6283  004066  C024  F083         	movff	?___awtoft+2,___ftmul@f1+2
  6284  00406A  ECCB  F020         	call	___ftmul	;wreg free
  6285  00406E  C081  F060         	movff	?___ftmul,___ftadd@f1
  6286  004072  C082  F061         	movff	?___ftmul+1,___ftadd@f1+1
  6287  004076  C083  F062         	movff	?___ftmul+2,___ftadd@f1+2
  6288  00407A  C09C  F063         	movff	log@x,___ftadd@f2
  6289  00407E  C09D  F064         	movff	log@x+1,___ftadd@f2+1
  6290  004082  C09E  F065         	movff	log@x+2,___ftadd@f2+2
  6291  004086  ECDA  F01C         	call	___ftadd	;wreg free
  6292  00408A  C060  F09C         	movff	?___ftadd,?_log
  6293  00408E  C061  F09D         	movff	?___ftadd+1,?_log+1
  6294  004092  C062  F09E         	movff	?___ftadd+2,?_log+2
  6295  004096  0012               	return		;funcret
  6296  004098                     __end_of_log:
  6297                           	opt callstack 0
  6298                           
  6299 ;; *************** function _exp *****************
  6300 ;; Defined at:
  6301 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\exp.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  x               3   88[BANK0 ] int 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  exponent        2   94[BANK0 ] int 
  6306 ;;  sign            1   96[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  3   88[BANK0 ] unsigned char 
  6309 ;; Registers used:
  6310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6316 ;;      Params:         0       3       0       0       0       0       0
  6317 ;;      Locals:         0       6       0       0       0       0       0
  6318 ;;      Temps:          0       0       0       0       0       0       0
  6319 ;;      Totals:         0       9       0       0       0       0       0
  6320 ;;Total ram usage:        9 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    8
  6323 ;; This function calls:
  6324 ;;		___awtoft
  6325 ;;		___ftdiv
  6326 ;;		___ftge
  6327 ;;		___ftmul
  6328 ;;		___ftneg
  6329 ;;		___ftsub
  6330 ;;		___fttol
  6331 ;;		_eval_poly
  6332 ;;		_floor
  6333 ;;		_ldexp
  6334 ;; This function is called by:
  6335 ;;		_pow
  6336 ;; This function uses a non-reentrant model
  6337 ;;
  6338                           
  6339                           	psect	text15
  6340  0037BE                     __ptext15:
  6341                           	opt callstack 0
  6342  0037BE                     _exp:
  6343                           	opt callstack 20
  6344                           
  6345                           ;incstack = 0
  6346  0037BE  0100               	movlb	0	; () banked
  6347  0037C0  51B8               	movf	exp@x& (0+255),w,b
  6348  0037C2  11B9               	iorwf	(exp@x+1)& (0+255),w,b
  6349  0037C4  11BA               	iorwf	(exp@x+2)& (0+255),w,b
  6350  0037C6  A4D8               	btfss	status,2,c
  6351  0037C8  D007               	goto	l10859
  6352                           
  6353                           ; BSR set to: 0
  6354  0037CA  0E00               	movlw	0
  6355  0037CC  6FB8               	movwf	?_exp& (0+255),b
  6356  0037CE  0E80               	movlw	128
  6357  0037D0  6FB9               	movwf	(?_exp+1)& (0+255),b
  6358  0037D2  0E3F               	movlw	63
  6359  0037D4  6FBA               	movwf	(?_exp+2)& (0+255),b
  6360  0037D6  0012               	return	
  6361  0037D8                     l10859:
  6362                           
  6363                           ; BSR set to: 0
  6364  0037D8  0E72               	movlw	114
  6365  0037DA  6E1A               	movwf	___ftge@ff1,c
  6366  0037DC  0E31               	movlw	49
  6367  0037DE  6E1B               	movwf	___ftge@ff1+1,c
  6368  0037E0  0E44               	movlw	68
  6369  0037E2  6E1C               	movwf	___ftge@ff1+2,c
  6370  0037E4  C0B8  F01D         	movff	exp@x,___ftge@ff2
  6371  0037E8  C0B9  F01E         	movff	exp@x+1,___ftge@ff2+1
  6372  0037EC  C0BA  F01F         	movff	exp@x+2,___ftge@ff2+2
  6373  0037F0  EC5F  F027         	call	___ftge	;wreg free
  6374  0037F4  B0D8               	btfsc	status,0,c
  6375  0037F6  D00D               	goto	l10865
  6376  0037F8  0E00               	movlw	0
  6377  0037FA  0101               	movlb	1	; () banked
  6378  0037FC  6F32               	movwf	(_errno+1)& (0+255),b
  6379  0037FE  0E22               	movlw	34
  6380  003800  6F31               	movwf	_errno& (0+255),b
  6381  003802  0EFF               	movlw	255
  6382  003804  0100               	movlb	0	; () banked
  6383  003806  6FB8               	movwf	?_exp& (0+255),b
  6384  003808  0E7F               	movlw	127
  6385  00380A  6FB9               	movwf	(?_exp+1)& (0+255),b
  6386  00380C  0E7F               	movlw	127
  6387  00380E  6FBA               	movwf	(?_exp+2)& (0+255),b
  6388  003810  0012               	return	
  6389  003812                     l10865:
  6390  003812  C0B8  F01A         	movff	exp@x,___ftge@ff1
  6391  003816  C0B9  F01B         	movff	exp@x+1,___ftge@ff1+1
  6392  00381A  C0BA  F01C         	movff	exp@x+2,___ftge@ff1+2
  6393  00381E  0E49               	movlw	73
  6394  003820  6E1D               	movwf	___ftge@ff2,c
  6395  003822  0E3A               	movlw	58
  6396  003824  6E1E               	movwf	___ftge@ff2+1,c
  6397  003826  0EC4               	movlw	196
  6398  003828  6E1F               	movwf	___ftge@ff2+2,c
  6399  00382A  EC5F  F027         	call	___ftge	;wreg free
  6400  00382E  B0D8               	btfsc	status,0,c
  6401  003830  D00D               	goto	l10871
  6402  003832  0E00               	movlw	0
  6403  003834  0101               	movlb	1	; () banked
  6404  003836  6F32               	movwf	(_errno+1)& (0+255),b
  6405  003838  0E22               	movlw	34
  6406  00383A  6F31               	movwf	_errno& (0+255),b
  6407  00383C  0E00               	movlw	0
  6408  00383E  0100               	movlb	0	; () banked
  6409  003840  6FB8               	movwf	?_exp& (0+255),b
  6410  003842  0E00               	movlw	0
  6411  003844  6FB9               	movwf	(?_exp+1)& (0+255),b
  6412  003846  0E00               	movlw	0
  6413  003848  6FBA               	movwf	(?_exp+2)& (0+255),b
  6414  00384A  0012               	return	
  6415  00384C                     l10871:
  6416  00384C  0100               	movlb	0	; () banked
  6417  00384E  AFBA               	btfss	(exp@x+2)& (0+255),7,b
  6418  003850  D002               	goto	u13030
  6419  003852  0E01               	movlw	1
  6420  003854  D001               	goto	u13040
  6421  003856                     u13030:
  6422  003856  0E00               	movlw	0
  6423  003858                     u13040:
  6424  003858  6FC0               	movwf	exp@sign& (0+255),b
  6425                           
  6426                           ; BSR set to: 0
  6427  00385A  51C0               	movf	exp@sign& (0+255),w,b
  6428  00385C  B4D8               	btfsc	status,2,c
  6429  00385E  D00E               	goto	l2546
  6430                           
  6431                           ; BSR set to: 0
  6432  003860  C0B8  F01A         	movff	exp@x,___ftneg@f1
  6433  003864  C0B9  F01B         	movff	exp@x+1,___ftneg@f1+1
  6434  003868  C0BA  F01C         	movff	exp@x+2,___ftneg@f1+2
  6435  00386C  ECB6  F02C         	call	___ftneg	;wreg free
  6436  003870  C01A  F0B8         	movff	?___ftneg,exp@x
  6437  003874  C01B  F0B9         	movff	?___ftneg+1,exp@x+1
  6438  003878  C01C  F0BA         	movff	?___ftneg+2,exp@x+2
  6439  00387C                     l2546:
  6440  00387C  C0B8  F081         	movff	exp@x,___ftmul@f1
  6441  003880  C0B9  F082         	movff	exp@x+1,___ftmul@f1+1
  6442  003884  C0BA  F083         	movff	exp@x+2,___ftmul@f1+2
  6443  003888  0EAA               	movlw	170
  6444  00388A  0100               	movlb	0	; () banked
  6445  00388C  6F84               	movwf	___ftmul@f2& (0+255),b
  6446  00388E  0EB8               	movlw	184
  6447  003890  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
  6448  003892  0E3F               	movlw	63
  6449  003894  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
  6450  003896  ECCB  F020         	call	___ftmul	;wreg free
  6451  00389A  C081  F0B8         	movff	?___ftmul,exp@x
  6452  00389E  C082  F0B9         	movff	?___ftmul+1,exp@x+1
  6453  0038A2  C083  F0BA         	movff	?___ftmul+2,exp@x+2
  6454  0038A6  C0B8  F0B0         	movff	exp@x,floor@x
  6455  0038AA  C0B9  F0B1         	movff	exp@x+1,floor@x+1
  6456  0038AE  C0BA  F0B2         	movff	exp@x+2,floor@x+2
  6457  0038B2  EC34  F022         	call	_floor	;wreg free
  6458  0038B6  C0B0  F0BB         	movff	?_floor,_exp$4008
  6459  0038BA  C0B1  F0BC         	movff	?_floor+1,_exp$4008+1
  6460  0038BE  C0B2  F0BD         	movff	?_floor+2,_exp$4008+2
  6461  0038C2  C0BB  F097         	movff	_exp$4008,___fttol@f1
  6462  0038C6  C0BC  F098         	movff	_exp$4008+1,___fttol@f1+1
  6463  0038CA  C0BD  F099         	movff	_exp$4008+2,___fttol@f1+2
  6464  0038CE  EC7D  F023         	call	___fttol	;wreg free
  6465  0038D2  C097  F0BE         	movff	?___fttol,exp@exponent
  6466  0038D6  C098  F0BF         	movff	?___fttol+1,exp@exponent+1
  6467  0038DA  C0B8  F06C         	movff	exp@x,___ftsub@f1
  6468  0038DE  C0B9  F06D         	movff	exp@x+1,___ftsub@f1+1
  6469  0038E2  C0BA  F06E         	movff	exp@x+2,___ftsub@f1+2
  6470  0038E6  C0BE  F022         	movff	exp@exponent,___awtoft@c
  6471  0038EA  C0BF  F023         	movff	exp@exponent+1,___awtoft@c+1
  6472  0038EE  EC47  F02B         	call	___awtoft	;wreg free
  6473  0038F2  C022  F06F         	movff	?___awtoft,___ftsub@f2
  6474  0038F6  C023  F070         	movff	?___awtoft+1,___ftsub@f2+1
  6475  0038FA  C024  F071         	movff	?___awtoft+2,___ftsub@f2+2
  6476  0038FE  ECAA  F02A         	call	___ftsub	;wreg free
  6477  003902  C06C  F0B8         	movff	?___ftsub,exp@x
  6478  003906  C06D  F0B9         	movff	?___ftsub+1,exp@x+1
  6479  00390A  C06E  F0BA         	movff	?___ftsub+2,exp@x+2
  6480  00390E  C0B8  F090         	movff	exp@x,eval_poly@x
  6481  003912  C0B9  F091         	movff	exp@x+1,eval_poly@x+1
  6482  003916  C0BA  F092         	movff	exp@x+2,eval_poly@x+2
  6483  00391A  0EA1               	movlw	low exp@coeff
  6484  00391C  0100               	movlb	0	; () banked
  6485  00391E  6F93               	movwf	eval_poly@d& (0+255),b
  6486  003920  0E7E               	movlw	high exp@coeff
  6487  003922  6F94               	movwf	(eval_poly@d+1)& (0+255),b
  6488  003924  0E00               	movlw	0
  6489  003926  6F96               	movwf	(eval_poly@n+1)& (0+255),b
  6490  003928  0E09               	movlw	9
  6491  00392A  6F95               	movwf	eval_poly@n& (0+255),b
  6492  00392C  ECA5  F022         	call	_eval_poly	;wreg free
  6493  003930  C090  F09C         	movff	?_eval_poly,ldexp@value
  6494  003934  C091  F09D         	movff	?_eval_poly+1,ldexp@value+1
  6495  003938  C092  F09E         	movff	?_eval_poly+2,ldexp@value+2
  6496  00393C  C0BE  F09F         	movff	exp@exponent,ldexp@newexp
  6497  003940  C0BF  F0A0         	movff	exp@exponent+1,ldexp@newexp+1
  6498  003944  ECE8  F023         	call	_ldexp	;wreg free
  6499  003948  C09C  F0B8         	movff	?_ldexp,exp@x
  6500  00394C  C09D  F0B9         	movff	?_ldexp+1,exp@x+1
  6501  003950  C09E  F0BA         	movff	?_ldexp+2,exp@x+2
  6502  003954  0100               	movlb	0	; () banked
  6503  003956  51C0               	movf	exp@sign& (0+255),w,b
  6504  003958  B4D8               	btfsc	status,2,c
  6505  00395A  D025               	goto	l2547
  6506                           
  6507                           ; BSR set to: 0
  6508  00395C  29B8               	incf	exp@x& (0+255),w,b
  6509  00395E  E10E               	bnz	l10893
  6510  003960  0E7F               	movlw	127
  6511  003962  19B9               	xorwf	(exp@x+1)& (0+255),w,b
  6512  003964  E10B               	bnz	l10893
  6513  003966  0E7F               	movlw	127
  6514  003968  19BA               	xorwf	(exp@x+2)& (0+255),w,b
  6515  00396A  A4D8               	btfss	status,2,c
  6516  00396C  D007               	goto	l10893
  6517                           
  6518                           ; BSR set to: 0
  6519  00396E  0E00               	movlw	0
  6520  003970  6FB8               	movwf	?_exp& (0+255),b
  6521  003972  0E00               	movlw	0
  6522  003974  6FB9               	movwf	(?_exp+1)& (0+255),b
  6523  003976  0E00               	movlw	0
  6524  003978  6FBA               	movwf	(?_exp+2)& (0+255),b
  6525  00397A  0012               	return	
  6526  00397C                     l10893:
  6527                           
  6528                           ; BSR set to: 0
  6529  00397C  0E00               	movlw	0
  6530  00397E  6F72               	movwf	___ftdiv@f1& (0+255),b
  6531  003980  0E80               	movlw	128
  6532  003982  6F73               	movwf	(___ftdiv@f1+1)& (0+255),b
  6533  003984  0E3F               	movlw	63
  6534  003986  6F74               	movwf	(___ftdiv@f1+2)& (0+255),b
  6535  003988  C0B8  F075         	movff	exp@x,___ftdiv@f2
  6536  00398C  C0B9  F076         	movff	exp@x+1,___ftdiv@f2+1
  6537  003990  C0BA  F077         	movff	exp@x+2,___ftdiv@f2+2
  6538  003994  ECC0  F021         	call	___ftdiv	;wreg free
  6539  003998  C072  F0B8         	movff	?___ftdiv,?_exp
  6540  00399C  C073  F0B9         	movff	?___ftdiv+1,?_exp+1
  6541  0039A0  C074  F0BA         	movff	?___ftdiv+2,?_exp+2
  6542  0039A4  0012               	return	
  6543  0039A6                     l2547:
  6544                           
  6545                           ; BSR set to: 0
  6546  0039A6  C0B8  F0B8         	movff	exp@x,?_exp
  6547  0039AA  C0B9  F0B9         	movff	exp@x+1,?_exp+1
  6548  0039AE  C0BA  F0BA         	movff	exp@x+2,?_exp+2
  6549  0039B2  0012               	return		;funcret
  6550  0039B4                     __end_of_exp:
  6551                           	opt callstack 0
  6552                           
  6553 ;; *************** function _ldexp *****************
  6554 ;; Defined at:
  6555 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\frexp.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;  value           3   60[BANK0 ] unsigned char 
  6558 ;;  newexp          2   63[BANK0 ] int 
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;		None
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  3   60[BANK0 ] int 
  6563 ;; Registers used:
  6564 ;;		wreg, status,2, status,0
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6570 ;;      Params:         0       5       0       0       0       0       0
  6571 ;;      Locals:         0       0       0       0       0       0       0
  6572 ;;      Temps:          0       2       0       0       0       0       0
  6573 ;;      Totals:         0       7       0       0       0       0       0
  6574 ;;Total ram usage:        7 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    5
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_exp
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           	psect	text16
  6585  0047D0                     __ptext16:
  6586                           	opt callstack 0
  6587  0047D0                     _ldexp:
  6588                           	opt callstack 22
  6589                           
  6590                           ;incstack = 0
  6591  0047D0  0100               	movlb	0	; () banked
  6592  0047D2  519C               	movf	ldexp@value& (0+255),w,b
  6593  0047D4  119D               	iorwf	(ldexp@value+1)& (0+255),w,b
  6594  0047D6  119E               	iorwf	(ldexp@value+2)& (0+255),w,b
  6595  0047D8  A4D8               	btfss	status,2,c
  6596  0047DA  D007               	goto	l10577
  6597                           
  6598                           ; BSR set to: 0
  6599  0047DC  0E00               	movlw	0
  6600  0047DE  6F9C               	movwf	?_ldexp& (0+255),b
  6601  0047E0  0E00               	movlw	0
  6602  0047E2  6F9D               	movwf	(?_ldexp+1)& (0+255),b
  6603  0047E4  0E00               	movlw	0
  6604  0047E6  6F9E               	movwf	(?_ldexp+2)& (0+255),b
  6605  0047E8  0012               	return	
  6606  0047EA                     l10577:
  6607                           
  6608                           ; BSR set to: 0
  6609  0047EA  519E               	movf	(ldexp@value+2)& (0+255),w,b
  6610  0047EC  0B7F               	andlw	127
  6611  0047EE  6FA1               	movwf	??_ldexp& (0+255),b
  6612  0047F0  6BA2               	clrf	(??_ldexp+1)& (0+255),b
  6613  0047F2  90D8               	bcf	status,0,c
  6614  0047F4  37A1               	rlcf	??_ldexp& (0+255),f,b
  6615  0047F6  37A2               	rlcf	(??_ldexp+1)& (0+255),f,b
  6616  0047F8  51A1               	movf	??_ldexp& (0+255),w,b
  6617  0047FA  279F               	addwf	ldexp@newexp& (0+255),f,b
  6618  0047FC  51A2               	movf	(??_ldexp+1)& (0+255),w,b
  6619  0047FE  23A0               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  6620  004800  AF9D               	btfss	(ldexp@value+1)& (0+255),7,b
  6621  004802  D003               	goto	u12280
  6622  004804  6BA1               	clrf	??_ldexp& (0+255),b
  6623  004806  2BA1               	incf	??_ldexp& (0+255),f,b
  6624  004808  D002               	goto	u12288
  6625  00480A                     u12280:
  6626  00480A  0100               	movlb	0	; () banked
  6627  00480C  6BA1               	clrf	??_ldexp& (0+255),b
  6628  00480E                     u12288:
  6629  00480E  51A1               	movf	??_ldexp& (0+255),w,b
  6630  004810  279F               	addwf	ldexp@newexp& (0+255),f,b
  6631  004812  0E00               	movlw	0
  6632  004814  23A0               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  6633  004816  AFA0               	btfss	(ldexp@newexp+1)& (0+255),7,b
  6634  004818  D00D               	goto	l10585
  6635                           
  6636                           ; BSR set to: 0
  6637  00481A  0E00               	movlw	0
  6638  00481C  0101               	movlb	1	; () banked
  6639  00481E  6F32               	movwf	(_errno+1)& (0+255),b
  6640  004820  0E22               	movlw	34
  6641  004822  6F31               	movwf	_errno& (0+255),b
  6642  004824  0E00               	movlw	0
  6643  004826  0100               	movlb	0	; () banked
  6644  004828  6F9C               	movwf	?_ldexp& (0+255),b
  6645  00482A  0E00               	movlw	0
  6646  00482C  6F9D               	movwf	(?_ldexp+1)& (0+255),b
  6647  00482E  0E00               	movlw	0
  6648  004830  6F9E               	movwf	(?_ldexp+2)& (0+255),b
  6649  004832  0012               	return	
  6650  004834                     l10585:
  6651                           
  6652                           ; BSR set to: 0
  6653  004834  BFA0               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  6654  004836  D019               	goto	l10601
  6655  004838  05A0               	decf	(ldexp@newexp+1)& (0+255),w,b
  6656  00483A  A0D8               	btfss	status,0,c
  6657  00483C  D016               	goto	l10601
  6658                           
  6659                           ; BSR set to: 0
  6660  00483E  0E00               	movlw	0
  6661  004840  0101               	movlb	1	; () banked
  6662  004842  6F32               	movwf	(_errno+1)& (0+255),b
  6663  004844  0E22               	movlw	34
  6664  004846  6F31               	movwf	_errno& (0+255),b
  6665                           
  6666                           ; BSR set to: 1
  6667  004848  0100               	movlb	0	; () banked
  6668  00484A  AF9E               	btfss	(ldexp@value+2)& (0+255),7,b
  6669  00484C  D007               	goto	l10597
  6670                           
  6671                           ; BSR set to: 0
  6672  00484E  0EFF               	movlw	255
  6673  004850  6F9C               	movwf	?_ldexp& (0+255),b
  6674  004852  0E7F               	movlw	127
  6675  004854  6F9D               	movwf	(?_ldexp+1)& (0+255),b
  6676  004856  0EFF               	movlw	255
  6677  004858  6F9E               	movwf	(?_ldexp+2)& (0+255),b
  6678  00485A  0012               	return	
  6679  00485C                     l10597:
  6680                           
  6681                           ; BSR set to: 0
  6682  00485C  0EFF               	movlw	255
  6683  00485E  6F9C               	movwf	?_ldexp& (0+255),b
  6684  004860  0E7F               	movlw	127
  6685  004862  6F9D               	movwf	(?_ldexp+1)& (0+255),b
  6686  004864  0E7F               	movlw	127
  6687  004866  6F9E               	movwf	(?_ldexp+2)& (0+255),b
  6688  004868  0012               	return	
  6689  00486A                     l10601:
  6690                           
  6691                           ; BSR set to: 0
  6692  00486A  35A0               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  6693  00486C  31A0               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  6694  00486E  6FA2               	movwf	(??_ldexp+1)& (0+255),b
  6695  004870  319F               	rrcf	ldexp@newexp& (0+255),w,b
  6696  004872  6FA1               	movwf	??_ldexp& (0+255),b
  6697  004874  519E               	movf	(ldexp@value+2)& (0+255),w,b
  6698  004876  19A1               	xorwf	??_ldexp& (0+255),w,b
  6699  004878  0B80               	andlw	-128
  6700  00487A  19A1               	xorwf	??_ldexp& (0+255),w,b
  6701  00487C  6F9E               	movwf	(ldexp@value+2)& (0+255),b
  6702  00487E  C09F  F0A1         	movff	ldexp@newexp,??_ldexp
  6703  004882  0E01               	movlw	1
  6704  004884  17A1               	andwf	??_ldexp& (0+255),f,b
  6705  004886  33A1               	rrcf	??_ldexp& (0+255),f,b
  6706  004888  33A1               	rrcf	??_ldexp& (0+255),f,b
  6707  00488A  519D               	movf	(ldexp@value+1)& (0+255),w,b
  6708  00488C  19A1               	xorwf	??_ldexp& (0+255),w,b
  6709  00488E  0B7F               	andlw	-129
  6710  004890  19A1               	xorwf	??_ldexp& (0+255),w,b
  6711  004892  6F9D               	movwf	(ldexp@value+1)& (0+255),b
  6712                           
  6713                           ; BSR set to: 0
  6714  004894  C09C  F09C         	movff	ldexp@value,?_ldexp
  6715  004898  C09D  F09D         	movff	ldexp@value+1,?_ldexp+1
  6716  00489C  C09E  F09E         	movff	ldexp@value+2,?_ldexp+2
  6717                           
  6718                           ; BSR set to: 0
  6719  0048A0  0012               	return		;funcret
  6720  0048A2                     __end_of_ldexp:
  6721                           	opt callstack 0
  6722                           
  6723 ;; *************** function _floor *****************
  6724 ;; Defined at:
  6725 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\floor.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;  x               3   80[BANK0 ] int 
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;  i               3   83[BANK0 ] int 
  6730 ;;  expon           2   86[BANK0 ] int 
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  3   80[BANK0 ] int 
  6733 ;; Registers used:
  6734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6740 ;;      Params:         0       3       0       0       0       0       0
  6741 ;;      Locals:         0       5       0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0
  6743 ;;      Totals:         0       8       0       0       0       0       0
  6744 ;;Total ram usage:        8 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    7
  6747 ;; This function calls:
  6748 ;;		___altoft
  6749 ;;		___ftadd
  6750 ;;		___ftge
  6751 ;;		___fttol
  6752 ;;		_frexp
  6753 ;; This function is called by:
  6754 ;;		_exp
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text17
  6759  004468                     __ptext17:
  6760                           	opt callstack 0
  6761  004468                     _floor:
  6762                           	opt callstack 20
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;incstack = 0
  6766  004468  C0B0  F01A         	movff	floor@x,frexp@value
  6767  00446C  C0B1  F01B         	movff	floor@x+1,frexp@value+1
  6768  004470  C0B2  F01C         	movff	floor@x+2,frexp@value+2
  6769  004474  0EB6               	movlw	low floor@expon
  6770  004476  6E1D               	movwf	frexp@eptr,c
  6771  004478  0E00               	movlw	high floor@expon
  6772  00447A  6E1E               	movwf	frexp@eptr+1,c
  6773  00447C  ECAA  F025         	call	_frexp	;wreg free
  6774  004480  0100               	movlb	0	; () banked
  6775  004482  AFB7               	btfss	(floor@expon+1)& (0+255),7,b
  6776  004484  D010               	goto	l10561
  6777                           
  6778                           ; BSR set to: 0
  6779  004486  AFB2               	btfss	(floor@x+2)& (0+255),7,b
  6780  004488  D007               	goto	l10557
  6781                           
  6782                           ; BSR set to: 0
  6783  00448A  0E00               	movlw	0
  6784  00448C  6FB0               	movwf	?_floor& (0+255),b
  6785  00448E  0E80               	movlw	128
  6786  004490  6FB1               	movwf	(?_floor+1)& (0+255),b
  6787  004492  0EBF               	movlw	191
  6788  004494  6FB2               	movwf	(?_floor+2)& (0+255),b
  6789  004496  0012               	return	
  6790  004498                     l10557:
  6791                           
  6792                           ; BSR set to: 0
  6793  004498  0E00               	movlw	0
  6794  00449A  6FB0               	movwf	?_floor& (0+255),b
  6795  00449C  0E00               	movlw	0
  6796  00449E  6FB1               	movwf	(?_floor+1)& (0+255),b
  6797  0044A0  0E00               	movlw	0
  6798  0044A2  6FB2               	movwf	(?_floor+2)& (0+255),b
  6799  0044A4  0012               	return	
  6800  0044A6                     l10561:
  6801                           
  6802                           ; BSR set to: 0
  6803  0044A6  51B7               	movf	(floor@expon+1)& (0+255),w,b
  6804  0044A8  E104               	bnz	u12250
  6805  0044AA  0E15               	movlw	21
  6806  0044AC  5DB6               	subwf	floor@expon& (0+255),w,b
  6807  0044AE  A0D8               	btfss	status,0,c
  6808  0044B0  D007               	goto	l10565
  6809  0044B2                     u12250:
  6810                           
  6811                           ; BSR set to: 0
  6812  0044B2  C0B0  F0B0         	movff	floor@x,?_floor
  6813  0044B6  C0B1  F0B1         	movff	floor@x+1,?_floor+1
  6814  0044BA  C0B2  F0B2         	movff	floor@x+2,?_floor+2
  6815  0044BE  0012               	return	
  6816  0044C0                     l10565:
  6817                           
  6818                           ; BSR set to: 0
  6819  0044C0  C0B0  F097         	movff	floor@x,___fttol@f1
  6820  0044C4  C0B1  F098         	movff	floor@x+1,___fttol@f1+1
  6821  0044C8  C0B2  F099         	movff	floor@x+2,___fttol@f1+2
  6822  0044CC  EC7D  F023         	call	___fttol	;wreg free
  6823  0044D0  C097  F0A6         	movff	?___fttol,___altoft@c
  6824  0044D4  C098  F0A7         	movff	?___fttol+1,___altoft@c+1
  6825  0044D8  C099  F0A8         	movff	?___fttol+2,___altoft@c+2
  6826  0044DC  C09A  F0A9         	movff	?___fttol+3,___altoft@c+3
  6827  0044E0  EC72  F026         	call	___altoft	;wreg free
  6828  0044E4  C0A6  F0B3         	movff	?___altoft,floor@i
  6829  0044E8  C0A7  F0B4         	movff	?___altoft+1,floor@i+1
  6830  0044EC  C0A8  F0B5         	movff	?___altoft+2,floor@i+2
  6831  0044F0  C0B0  F01A         	movff	floor@x,___ftge@ff1
  6832  0044F4  C0B1  F01B         	movff	floor@x+1,___ftge@ff1+1
  6833  0044F8  C0B2  F01C         	movff	floor@x+2,___ftge@ff1+2
  6834  0044FC  C0B3  F01D         	movff	floor@i,___ftge@ff2
  6835  004500  C0B4  F01E         	movff	floor@i+1,___ftge@ff2+1
  6836  004504  C0B5  F01F         	movff	floor@i+2,___ftge@ff2+2
  6837  004508  EC5F  F027         	call	___ftge	;wreg free
  6838  00450C  B0D8               	btfsc	status,0,c
  6839  00450E  D016               	goto	l2557
  6840  004510  C0B3  F060         	movff	floor@i,___ftadd@f1
  6841  004514  C0B4  F061         	movff	floor@i+1,___ftadd@f1+1
  6842  004518  C0B5  F062         	movff	floor@i+2,___ftadd@f1+2
  6843  00451C  0E00               	movlw	0
  6844  00451E  0100               	movlb	0	; () banked
  6845  004520  6F63               	movwf	___ftadd@f2& (0+255),b
  6846  004522  0E80               	movlw	128
  6847  004524  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  6848  004526  0EBF               	movlw	191
  6849  004528  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  6850  00452A  ECDA  F01C         	call	___ftadd	;wreg free
  6851  00452E  C060  F0B0         	movff	?___ftadd,?_floor
  6852  004532  C061  F0B1         	movff	?___ftadd+1,?_floor+1
  6853  004536  C062  F0B2         	movff	?___ftadd+2,?_floor+2
  6854  00453A  0012               	return	
  6855  00453C                     l2557:
  6856  00453C  C0B3  F0B0         	movff	floor@i,?_floor
  6857  004540  C0B4  F0B1         	movff	floor@i+1,?_floor+1
  6858  004544  C0B5  F0B2         	movff	floor@i+2,?_floor+2
  6859  004548  0012               	return		;funcret
  6860  00454A                     __end_of_floor:
  6861                           	opt callstack 0
  6862                           
  6863 ;; *************** function _frexp *****************
  6864 ;; Defined at:
  6865 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\frexp.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;  value           3   25[COMRAM] int 
  6868 ;;  eptr            2   28[COMRAM] PTR int 
  6869 ;;		 -> floor@expon(2), log@exponent(2), 
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;		None
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  3   25[COMRAM] PTR int 
  6874 ;; Registers used:
  6875 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6881 ;;      Params:         5       0       0       0       0       0       0
  6882 ;;      Locals:         0       0       0       0       0       0       0
  6883 ;;      Temps:          2       0       0       0       0       0       0
  6884 ;;      Totals:         7       0       0       0       0       0       0
  6885 ;;Total ram usage:        7 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    5
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_log
  6892 ;;		_floor
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           	psect	text18
  6897  004B54                     __ptext18:
  6898                           	opt callstack 0
  6899  004B54                     _frexp:
  6900                           	opt callstack 22
  6901                           
  6902                           ;incstack = 0
  6903  004B54  501A               	movf	frexp@value,w,c
  6904  004B56  101B               	iorwf	frexp@value+1,w,c
  6905  004B58  101C               	iorwf	frexp@value+2,w,c
  6906  004B5A  A4D8               	btfss	status,2,c
  6907  004B5C  D00F               	goto	l10051
  6908  004B5E  C01D  FFD9         	movff	frexp@eptr,fsr2l
  6909  004B62  C01E  FFDA         	movff	frexp@eptr+1,fsr2h
  6910  004B66  0E00               	movlw	0
  6911  004B68  6EDE               	movwf	postinc2,c
  6912  004B6A  0E00               	movlw	0
  6913  004B6C  6EDD               	movwf	postdec2,c
  6914  004B6E  0E00               	movlw	0
  6915  004B70  6E1A               	movwf	?_frexp,c
  6916  004B72  0E00               	movlw	0
  6917  004B74  6E1B               	movwf	?_frexp+1,c
  6918  004B76  0E00               	movlw	0
  6919  004B78  6E1C               	movwf	?_frexp+2,c
  6920  004B7A  0012               	return	
  6921  004B7C                     l10051:
  6922  004B7C  501C               	movf	frexp@value+2,w,c
  6923  004B7E  0B7F               	andlw	127
  6924  004B80  6E1F               	movwf	??_frexp& (0+255),c
  6925  004B82  6A20               	clrf	(??_frexp+1)& (0+255),c
  6926  004B84  90D8               	bcf	status,0,c
  6927  004B86  361F               	rlcf	??_frexp,f,c
  6928  004B88  3620               	rlcf	??_frexp+1,f,c
  6929  004B8A  C01D  FFD9         	movff	frexp@eptr,fsr2l
  6930  004B8E  C01E  FFDA         	movff	frexp@eptr+1,fsr2h
  6931  004B92  C01F  FFDE         	movff	??_frexp,postinc2
  6932  004B96  C020  FFDD         	movff	??_frexp+1,postdec2
  6933  004B9A  AE1B               	btfss	frexp@value+1,7,c
  6934  004B9C  D003               	goto	u11280
  6935  004B9E  6A1F               	clrf	??_frexp& (0+255),c
  6936  004BA0  2A1F               	incf	??_frexp& (0+255),f,c
  6937  004BA2  D001               	goto	u11288
  6938  004BA4                     u11280:
  6939  004BA4  6A1F               	clrf	??_frexp& (0+255),c
  6940  004BA6                     u11288:
  6941  004BA6  501F               	movf	??_frexp,w,c
  6942  004BA8  C01D  FFD9         	movff	frexp@eptr,fsr2l
  6943  004BAC  C01E  FFDA         	movff	frexp@eptr+1,fsr2h
  6944  004BB0  12DE               	iorwf	postinc2,f,c
  6945  004BB2  0E00               	movlw	0
  6946  004BB4  12DD               	iorwf	postdec2,f,c
  6947  004BB6  C01D  FFD9         	movff	frexp@eptr,fsr2l
  6948  004BBA  C01E  FFDA         	movff	frexp@eptr+1,fsr2h
  6949  004BBE  0E82               	movlw	130
  6950  004BC0  26DE               	addwf	postinc2,f,c
  6951  004BC2  0EFF               	movlw	255
  6952  004BC4  22DD               	addwfc	postdec2,f,c
  6953  004BC6  501C               	movf	frexp@value+2,w,c
  6954  004BC8  0B80               	andlw	-128
  6955  004BCA  093F               	iorlw	63
  6956  004BCC  6E1C               	movwf	frexp@value+2,c
  6957  004BCE  9E1B               	bcf	frexp@value+1,7,c
  6958  004BD0  C01A  F01A         	movff	frexp@value,?_frexp
  6959  004BD4  C01B  F01B         	movff	frexp@value+1,?_frexp+1
  6960  004BD8  C01C  F01C         	movff	frexp@value+2,?_frexp+2
  6961  004BDC  0012               	return		;funcret
  6962  004BDE                     __end_of_frexp:
  6963                           	opt callstack 0
  6964                           
  6965 ;; *************** function ___altoft *****************
  6966 ;; Defined at:
  6967 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\altoft.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  c               4   70[BANK0 ] long 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  sign            1   79[BANK0 ] unsigned char 
  6972 ;;  exp             1   78[BANK0 ] unsigned char 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  3   70[BANK0 ] float 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6982 ;;      Params:         0       4       0       0       0       0       0
  6983 ;;      Locals:         0       2       0       0       0       0       0
  6984 ;;      Temps:          0       4       0       0       0       0       0
  6985 ;;      Totals:         0      10       0       0       0       0       0
  6986 ;;Total ram usage:       10 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    6
  6989 ;; This function calls:
  6990 ;;		___ftpack
  6991 ;; This function is called by:
  6992 ;;		_floor
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text19
  6997  004CE4                     __ptext19:
  6998                           	opt callstack 0
  6999  004CE4                     ___altoft:
  7000                           	opt callstack 20
  7001                           
  7002                           ;incstack = 0
  7003  004CE4  0E00               	movlw	0
  7004  004CE6  0100               	movlb	0	; () banked
  7005  004CE8  6FAF               	movwf	___altoft@sign& (0+255),b
  7006  004CEA  0E8E               	movlw	142
  7007  004CEC  6FAE               	movwf	___altoft@exp& (0+255),b
  7008                           
  7009                           ; BSR set to: 0
  7010  004CEE  AFA9               	btfss	(___altoft@c+3)& (0+255),7,b
  7011  004CF0  D011               	goto	l9935
  7012                           
  7013                           ; BSR set to: 0
  7014  004CF2  1FA9               	comf	(___altoft@c+3)& (0+255),f,b
  7015  004CF4  1FA8               	comf	(___altoft@c+2)& (0+255),f,b
  7016  004CF6  1FA7               	comf	(___altoft@c+1)& (0+255),f,b
  7017  004CF8  6DA6               	negf	___altoft@c& (0+255),b
  7018  004CFA  0E00               	movlw	0
  7019  004CFC  23A7               	addwfc	(___altoft@c+1)& (0+255),f,b
  7020  004CFE  23A8               	addwfc	(___altoft@c+2)& (0+255),f,b
  7021  004D00  23A9               	addwfc	(___altoft@c+3)& (0+255),f,b
  7022                           
  7023                           ; BSR set to: 0
  7024  004D02  0E01               	movlw	1
  7025  004D04  6FAF               	movwf	___altoft@sign& (0+255),b
  7026  004D06  D006               	goto	l9935
  7027  004D08                     l9933:
  7028                           
  7029                           ; BSR set to: 0
  7030  004D08  90D8               	bcf	status,0,c
  7031  004D0A  33A9               	rrcf	(___altoft@c+3)& (0+255),f,b
  7032  004D0C  33A8               	rrcf	(___altoft@c+2)& (0+255),f,b
  7033  004D0E  33A7               	rrcf	(___altoft@c+1)& (0+255),f,b
  7034  004D10  33A6               	rrcf	___altoft@c& (0+255),f,b
  7035  004D12  2BAE               	incf	___altoft@exp& (0+255),f,b
  7036  004D14                     l9935:
  7037                           
  7038                           ; BSR set to: 0
  7039  004D14  0E00               	movlw	0
  7040  004D16  15A6               	andwf	___altoft@c& (0+255),w,b
  7041  004D18  6FAA               	movwf	??___altoft& (0+255),b
  7042  004D1A  0E00               	movlw	0
  7043  004D1C  15A7               	andwf	(___altoft@c+1)& (0+255),w,b
  7044  004D1E  6FAB               	movwf	(??___altoft+1)& (0+255),b
  7045  004D20  0E00               	movlw	0
  7046  004D22  15A8               	andwf	(___altoft@c+2)& (0+255),w,b
  7047  004D24  6FAC               	movwf	(??___altoft+2)& (0+255),b
  7048  004D26  0EFF               	movlw	255
  7049  004D28  15A9               	andwf	(___altoft@c+3)& (0+255),w,b
  7050  004D2A  6FAD               	movwf	(??___altoft+3)& (0+255),b
  7051  004D2C  51AA               	movf	??___altoft& (0+255),w,b
  7052  004D2E  11AB               	iorwf	(??___altoft+1)& (0+255),w,b
  7053  004D30  11AC               	iorwf	(??___altoft+2)& (0+255),w,b
  7054  004D32  11AD               	iorwf	(??___altoft+3)& (0+255),w,b
  7055  004D34  A4D8               	btfss	status,2,c
  7056  004D36  D7E8               	goto	l9933
  7057                           
  7058                           ; BSR set to: 0
  7059  004D38  C0A6  F01A         	movff	___altoft@c,___ftpack@arg
  7060  004D3C  C0A7  F01B         	movff	___altoft@c+1,___ftpack@arg+1
  7061  004D40  C0A8  F01C         	movff	___altoft@c+2,___ftpack@arg+2
  7062  004D44  C0AE  F01D         	movff	___altoft@exp,___ftpack@exp
  7063  004D48  C0AF  F01E         	movff	___altoft@sign,___ftpack@sign
  7064  004D4C  EC04  F025         	call	___ftpack	;wreg free
  7065  004D50  C01A  F0A6         	movff	?___ftpack,?___altoft
  7066  004D54  C01B  F0A7         	movff	?___ftpack+1,?___altoft+1
  7067  004D58  C01C  F0A8         	movff	?___ftpack+2,?___altoft+2
  7068  004D5C  0012               	return		;funcret
  7069  004D5E                     __end_of___altoft:
  7070                           	opt callstack 0
  7071                           
  7072 ;; *************** function _eval_poly *****************
  7073 ;; Defined at:
  7074 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\evalpoly.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  x               3   48[BANK0 ] float 
  7077 ;;  d               2   51[BANK0 ] PTR const 
  7078 ;;		 -> exp@coeff(30), log@coeff(27), 
  7079 ;;  n               2   53[BANK0 ] int 
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  res             3   57[BANK0 ] int 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  3   48[BANK0 ] int 
  7084 ;; Registers used:
  7085 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7091 ;;      Params:         0       7       0       0       0       0       0
  7092 ;;      Locals:         0       3       0       0       0       0       0
  7093 ;;      Temps:          0       2       0       0       0       0       0
  7094 ;;      Totals:         0      12       0       0       0       0       0
  7095 ;;Total ram usage:       12 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    7
  7098 ;; This function calls:
  7099 ;;		___ftadd
  7100 ;;		___ftmul
  7101 ;;		___wmul
  7102 ;; This function is called by:
  7103 ;;		_log
  7104 ;;		_exp
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           	psect	text20
  7109  00454A                     __ptext20:
  7110                           	opt callstack 0
  7111  00454A                     _eval_poly:
  7112                           	opt callstack 20
  7113                           
  7114                           ;incstack = 0
  7115  00454A  C095  F026         	movff	eval_poly@n,___wmul@multiplier
  7116  00454E  C096  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
  7117  004552  0E00               	movlw	0
  7118  004554  6E29               	movwf	___wmul@multiplicand+1,c
  7119  004556  0E03               	movlw	3
  7120  004558  6E28               	movwf	___wmul@multiplicand,c
  7121  00455A  EC91  F02C         	call	___wmul	;wreg free
  7122  00455E  C093  F097         	movff	eval_poly@d,??_eval_poly
  7123  004562  C094  F098         	movff	eval_poly@d+1,??_eval_poly+1
  7124  004566  5026               	movf	?___wmul,w,c
  7125  004568  0100               	movlb	0	; () banked
  7126  00456A  2797               	addwf	??_eval_poly& (0+255),f,b
  7127  00456C  5027               	movf	?___wmul+1,w,c
  7128  00456E  2398               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7129  004570  C097  FFF6         	movff	??_eval_poly,tblptrl
  7130  004574  C098  FFF7         	movff	??_eval_poly+1,tblptrh
  7131  004578                     	if	0	;tblptru may be non-zero
  7132  004578                     	endif
  7133  004578                     	if	0	;tblptru may be non-zero
  7134  004578                     	endif
  7135  004578  0009               	tblrd		*+
  7136  00457A  CFF5 F099          	movff	tablat,eval_poly@res
  7137  00457E  0009               	tblrd		*+
  7138  004580  CFF5 F09A          	movff	tablat,eval_poly@res+1
  7139  004584  000A               	tblrd		*-
  7140  004586  CFF5 F09B          	movff	tablat,eval_poly@res+2
  7141  00458A  D040               	goto	l10545
  7142  00458C                     l10543:
  7143                           
  7144                           ; BSR set to: 0
  7145  00458C  C099  F084         	movff	eval_poly@res,___ftmul@f2
  7146  004590  C09A  F085         	movff	eval_poly@res+1,___ftmul@f2+1
  7147  004594  C09B  F086         	movff	eval_poly@res+2,___ftmul@f2+2
  7148  004598  C090  F081         	movff	eval_poly@x,___ftmul@f1
  7149  00459C  C091  F082         	movff	eval_poly@x+1,___ftmul@f1+1
  7150  0045A0  C092  F083         	movff	eval_poly@x+2,___ftmul@f1+2
  7151  0045A4  ECCB  F020         	call	___ftmul	;wreg free
  7152  0045A8  C081  F060         	movff	?___ftmul,___ftadd@f1
  7153  0045AC  C082  F061         	movff	?___ftmul+1,___ftadd@f1+1
  7154  0045B0  C083  F062         	movff	?___ftmul+2,___ftadd@f1+2
  7155  0045B4  0E00               	movlw	0
  7156  0045B6  6E29               	movwf	___wmul@multiplicand+1,c
  7157  0045B8  0E03               	movlw	3
  7158  0045BA  6E28               	movwf	___wmul@multiplicand,c
  7159  0045BC  0100               	movlb	0	; () banked
  7160  0045BE  0795               	decf	eval_poly@n& (0+255),f,b
  7161  0045C0  A0D8               	btfss	status,0,c
  7162  0045C2  0796               	decf	(eval_poly@n+1)& (0+255),f,b
  7163  0045C4  C095  F026         	movff	eval_poly@n,___wmul@multiplier
  7164  0045C8  C096  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
  7165  0045CC  EC91  F02C         	call	___wmul	;wreg free
  7166  0045D0  C093  F097         	movff	eval_poly@d,??_eval_poly
  7167  0045D4  C094  F098         	movff	eval_poly@d+1,??_eval_poly+1
  7168  0045D8  5026               	movf	?___wmul,w,c
  7169  0045DA  0100               	movlb	0	; () banked
  7170  0045DC  2797               	addwf	??_eval_poly& (0+255),f,b
  7171  0045DE  5027               	movf	?___wmul+1,w,c
  7172  0045E0  2398               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7173  0045E2  C097  FFF6         	movff	??_eval_poly,tblptrl
  7174  0045E6  C098  FFF7         	movff	??_eval_poly+1,tblptrh
  7175  0045EA                     	if	0	;tblptru may be non-zero
  7176  0045EA                     	endif
  7177  0045EA                     	if	0	;tblptru may be non-zero
  7178  0045EA                     	endif
  7179  0045EA  0009               	tblrd		*+
  7180  0045EC  CFF5 F063          	movff	tablat,___ftadd@f2
  7181  0045F0  0009               	tblrd		*+
  7182  0045F2  CFF5 F064          	movff	tablat,___ftadd@f2+1
  7183  0045F6  000A               	tblrd		*-
  7184  0045F8  CFF5 F065          	movff	tablat,___ftadd@f2+2
  7185  0045FC  ECDA  F01C         	call	___ftadd	;wreg free
  7186  004600  C060  F099         	movff	?___ftadd,eval_poly@res
  7187  004604  C061  F09A         	movff	?___ftadd+1,eval_poly@res+1
  7188  004608  C062  F09B         	movff	?___ftadd+2,eval_poly@res+2
  7189  00460C                     l10545:
  7190  00460C  0100               	movlb	0	; () banked
  7191  00460E  5195               	movf	eval_poly@n& (0+255),w,b
  7192  004610  1196               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7193  004612  A4D8               	btfss	status,2,c
  7194  004614  D7BB               	goto	l10543
  7195                           
  7196                           ; BSR set to: 0
  7197  004616  C099  F090         	movff	eval_poly@res,?_eval_poly
  7198  00461A  C09A  F091         	movff	eval_poly@res+1,?_eval_poly+1
  7199  00461E  C09B  F092         	movff	eval_poly@res+2,?_eval_poly+2
  7200                           
  7201                           ; BSR set to: 0
  7202  004622  0012               	return		;funcret
  7203  004624                     __end_of_eval_poly:
  7204                           	opt callstack 0
  7205                           
  7206 ;; *************** function ___ftdiv *****************
  7207 ;; Defined at:
  7208 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftdiv.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  f1              3   18[BANK0 ] float 
  7211 ;;  f2              3   21[BANK0 ] float 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;  f3              3   28[BANK0 ] float 
  7214 ;;  sign            1   32[BANK0 ] unsigned char 
  7215 ;;  exp             1   31[BANK0 ] unsigned char 
  7216 ;;  cntr            1   27[BANK0 ] unsigned char 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  3   18[BANK0 ] float 
  7219 ;; Registers used:
  7220 ;;		wreg, status,2, status,0, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7226 ;;      Params:         0       6       0       0       0       0       0
  7227 ;;      Locals:         0       6       0       0       0       0       0
  7228 ;;      Temps:          0       3       0       0       0       0       0
  7229 ;;      Totals:         0      15       0       0       0       0       0
  7230 ;;Total ram usage:       15 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    6
  7233 ;; This function calls:
  7234 ;;		___ftpack
  7235 ;; This function is called by:
  7236 ;;		_printAuto
  7237 ;;		_exp
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text21
  7242  004380                     __ptext21:
  7243                           	opt callstack 0
  7244  004380                     ___ftdiv:
  7245                           	opt callstack 21
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;incstack = 0
  7249  004380  C074  F078         	movff	___ftdiv@f1+2,??___ftdiv
  7250  004384  0100               	movlb	0	; () banked
  7251  004386  6B79               	clrf	(??___ftdiv+1)& (0+255),b
  7252  004388  6B7A               	clrf	(??___ftdiv+2)& (0+255),b
  7253  00438A  3573               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  7254  00438C  3778               	rlcf	??___ftdiv& (0+255),f,b
  7255  00438E  E301               	bnc	u12161
  7256  004390  8179               	bsf	(??___ftdiv+1)& (0+255),0,b
  7257  004392                     u12161:
  7258  004392  5178               	movf	??___ftdiv& (0+255),w,b
  7259  004394  6F7F               	movwf	___ftdiv@exp& (0+255),b
  7260  004396  517F               	movf	___ftdiv@exp& (0+255),w,b
  7261  004398  A4D8               	btfss	status,2,c
  7262  00439A  D007               	goto	l10489
  7263                           
  7264                           ; BSR set to: 0
  7265  00439C  0E00               	movlw	0
  7266  00439E  6F72               	movwf	?___ftdiv& (0+255),b
  7267  0043A0  0E00               	movlw	0
  7268  0043A2  6F73               	movwf	(?___ftdiv+1)& (0+255),b
  7269  0043A4  0E00               	movlw	0
  7270  0043A6  6F74               	movwf	(?___ftdiv+2)& (0+255),b
  7271  0043A8  0012               	return	
  7272  0043AA                     l10489:
  7273                           
  7274                           ; BSR set to: 0
  7275  0043AA  C077  F078         	movff	___ftdiv@f2+2,??___ftdiv
  7276  0043AE  6B79               	clrf	(??___ftdiv+1)& (0+255),b
  7277  0043B0  6B7A               	clrf	(??___ftdiv+2)& (0+255),b
  7278  0043B2  3576               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  7279  0043B4  3778               	rlcf	??___ftdiv& (0+255),f,b
  7280  0043B6  E301               	bnc	u12181
  7281  0043B8  8179               	bsf	(??___ftdiv+1)& (0+255),0,b
  7282  0043BA                     u12181:
  7283  0043BA  5178               	movf	??___ftdiv& (0+255),w,b
  7284  0043BC  6F80               	movwf	___ftdiv@sign& (0+255),b
  7285  0043BE  5180               	movf	___ftdiv@sign& (0+255),w,b
  7286  0043C0  A4D8               	btfss	status,2,c
  7287  0043C2  D007               	goto	l10495
  7288                           
  7289                           ; BSR set to: 0
  7290  0043C4  0E00               	movlw	0
  7291  0043C6  6F72               	movwf	?___ftdiv& (0+255),b
  7292  0043C8  0E00               	movlw	0
  7293  0043CA  6F73               	movwf	(?___ftdiv+1)& (0+255),b
  7294  0043CC  0E00               	movlw	0
  7295  0043CE  6F74               	movwf	(?___ftdiv+2)& (0+255),b
  7296  0043D0  0012               	return	
  7297  0043D2                     l10495:
  7298                           
  7299                           ; BSR set to: 0
  7300  0043D2  0E00               	movlw	0
  7301  0043D4  6F7C               	movwf	___ftdiv@f3& (0+255),b
  7302  0043D6  0E00               	movlw	0
  7303  0043D8  6F7D               	movwf	(___ftdiv@f3+1)& (0+255),b
  7304  0043DA  0E00               	movlw	0
  7305  0043DC  6F7E               	movwf	(___ftdiv@f3+2)& (0+255),b
  7306                           
  7307                           ; BSR set to: 0
  7308  0043DE  5180               	movf	___ftdiv@sign& (0+255),w,b
  7309  0043E0  0F89               	addlw	137
  7310  0043E2  5F7F               	subwf	___ftdiv@exp& (0+255),f,b
  7311                           
  7312                           ; BSR set to: 0
  7313  0043E4  C074  F080         	movff	___ftdiv@f1+2,___ftdiv@sign
  7314                           
  7315                           ; BSR set to: 0
  7316  0043E8  5177               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7317  0043EA  1B80               	xorwf	___ftdiv@sign& (0+255),f,b
  7318                           
  7319                           ; BSR set to: 0
  7320  0043EC  0E80               	movlw	128
  7321  0043EE  1780               	andwf	___ftdiv@sign& (0+255),f,b
  7322                           
  7323                           ; BSR set to: 0
  7324  0043F0  8F73               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  7325                           
  7326                           ; BSR set to: 0
  7327  0043F2  0EFF               	movlw	255
  7328  0043F4  1772               	andwf	___ftdiv@f1& (0+255),f,b
  7329  0043F6  0EFF               	movlw	255
  7330  0043F8  1773               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  7331  0043FA  0E00               	movlw	0
  7332  0043FC  1774               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  7333                           
  7334                           ; BSR set to: 0
  7335  0043FE  8F76               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  7336                           
  7337                           ; BSR set to: 0
  7338  004400  0EFF               	movlw	255
  7339  004402  1775               	andwf	___ftdiv@f2& (0+255),f,b
  7340  004404  0EFF               	movlw	255
  7341  004406  1776               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  7342  004408  0E00               	movlw	0
  7343  00440A  1777               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  7344                           
  7345                           ; BSR set to: 0
  7346  00440C  0E18               	movlw	24
  7347  00440E  6F7B               	movwf	___ftdiv@cntr& (0+255),b
  7348  004410                     l10515:
  7349                           
  7350                           ; BSR set to: 0
  7351  004410  90D8               	bcf	status,0,c
  7352  004412  377C               	rlcf	___ftdiv@f3& (0+255),f,b
  7353  004414  377D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7354  004416  377E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7355                           
  7356                           ; BSR set to: 0
  7357  004418  5175               	movf	___ftdiv@f2& (0+255),w,b
  7358  00441A  5D72               	subwf	___ftdiv@f1& (0+255),w,b
  7359  00441C  5176               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7360  00441E  5973               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  7361  004420  5177               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7362  004422  5974               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  7363  004424  A0D8               	btfss	status,0,c
  7364  004426  D007               	goto	l2121
  7365                           
  7366                           ; BSR set to: 0
  7367  004428  5175               	movf	___ftdiv@f2& (0+255),w,b
  7368  00442A  5F72               	subwf	___ftdiv@f1& (0+255),f,b
  7369  00442C  5176               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7370  00442E  5B73               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  7371  004430  5177               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7372  004432  5B74               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  7373                           
  7374                           ; BSR set to: 0
  7375  004434  817C               	bsf	___ftdiv@f3& (0+255),0,b
  7376  004436                     l2121:
  7377                           
  7378                           ; BSR set to: 0
  7379  004436  90D8               	bcf	status,0,c
  7380  004438  3772               	rlcf	___ftdiv@f1& (0+255),f,b
  7381  00443A  3773               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  7382  00443C  3774               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  7383                           
  7384                           ; BSR set to: 0
  7385  00443E  2F7B               	decfsz	___ftdiv@cntr& (0+255),f,b
  7386  004440  D7E7               	goto	l10515
  7387                           
  7388                           ; BSR set to: 0
  7389  004442  C07C  F01A         	movff	___ftdiv@f3,___ftpack@arg
  7390  004446  C07D  F01B         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7391  00444A  C07E  F01C         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7392  00444E  C07F  F01D         	movff	___ftdiv@exp,___ftpack@exp
  7393  004452  C080  F01E         	movff	___ftdiv@sign,___ftpack@sign
  7394  004456  EC04  F025         	call	___ftpack	;wreg free
  7395  00445A  C01A  F072         	movff	?___ftpack,?___ftdiv
  7396  00445E  C01B  F073         	movff	?___ftpack+1,?___ftdiv+1
  7397  004462  C01C  F074         	movff	?___ftpack+2,?___ftdiv+2
  7398  004466  0012               	return		;funcret
  7399  004468                     __end_of___ftdiv:
  7400                           	opt callstack 0
  7401                           
  7402 ;; *************** function ___awtoft *****************
  7403 ;; Defined at:
  7404 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awtoft.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;  c               2   33[COMRAM] int 
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;  sign            1   36[COMRAM] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  3   33[COMRAM] float 
  7411 ;; Registers used:
  7412 ;;		wreg, status,2, status,0, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7418 ;;      Params:         3       0       0       0       0       0       0
  7419 ;;      Locals:         1       0       0       0       0       0       0
  7420 ;;      Temps:          0       0       0       0       0       0       0
  7421 ;;      Totals:         4       0       0       0       0       0       0
  7422 ;;Total ram usage:        4 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    6
  7425 ;; This function calls:
  7426 ;;		___ftpack
  7427 ;; This function is called by:
  7428 ;;		_printAuto
  7429 ;;		_log
  7430 ;;		_exp
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text22
  7435  00568E                     __ptext22:
  7436                           	opt callstack 0
  7437  00568E                     ___awtoft:
  7438                           	opt callstack 21
  7439                           
  7440                           ;incstack = 0
  7441  00568E  0E00               	movlw	0
  7442  005690  6E25               	movwf	___awtoft@sign,c
  7443  005692  AE23               	btfss	___awtoft@c+1,7,c
  7444  005694  D006               	goto	l10537
  7445  005696  6C22               	negf	___awtoft@c,c
  7446  005698  1E23               	comf	___awtoft@c+1,f,c
  7447  00569A  B0D8               	btfsc	status,0,c
  7448  00569C  2A23               	incf	___awtoft@c+1,f,c
  7449  00569E  0E01               	movlw	1
  7450  0056A0  6E25               	movwf	___awtoft@sign,c
  7451  0056A2                     l10537:
  7452  0056A2  C022  F01A         	movff	___awtoft@c,___ftpack@arg
  7453  0056A6  C023  F01B         	movff	___awtoft@c+1,___ftpack@arg+1
  7454  0056AA  6A1C               	clrf	___ftpack@arg+2,c
  7455  0056AC  0E8E               	movlw	142
  7456  0056AE  6E1D               	movwf	___ftpack@exp,c
  7457  0056B0  C025  F01E         	movff	___awtoft@sign,___ftpack@sign
  7458  0056B4  EC04  F025         	call	___ftpack	;wreg free
  7459  0056B8  C01A  F022         	movff	?___ftpack,?___awtoft
  7460  0056BC  C01B  F023         	movff	?___ftpack+1,?___awtoft+1
  7461  0056C0  C01C  F024         	movff	?___ftpack+2,?___awtoft+2
  7462  0056C4  0012               	return		;funcret
  7463  0056C6                     __end_of___awtoft:
  7464                           	opt callstack 0
  7465                           
  7466 ;; *************** function _dcMotor *****************
  7467 ;; Defined at:
  7468 ;;		line 211 in file "main.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  speeed          2   29[COMRAM] int 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;		None
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      void 
  7475 ;; Registers used:
  7476 ;;		wreg, status,2, status,0, cstack
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7482 ;;      Params:         2       0       0       0       0       0       0
  7483 ;;      Locals:         0       0       0       0       0       0       0
  7484 ;;      Temps:          0       0       0       0       0       0       0
  7485 ;;      Totals:         2       0       0       0       0       0       0
  7486 ;;Total ram usage:        2 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:    6
  7489 ;; This function calls:
  7490 ;;		_PWM5_LoadDutyValue
  7491 ;; This function is called by:
  7492 ;;		_main
  7493 ;;		_azoTouchPollManual
  7494 ;;		_printAuto
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text23
  7499  005120                     __ptext23:
  7500                           	opt callstack 0
  7501  005120                     _dcMotor:
  7502                           	opt callstack 22
  7503                           
  7504                           ;main.c: 213: if (speeed == 1)
  7505                           
  7506                           ;incstack = 0
  7507  005120  041E               	decf	dcMotor@speeed,w,c
  7508  005122  101F               	iorwf	dcMotor@speeed+1,w,c
  7509  005124  A4D8               	btfss	status,2,c
  7510  005126  D006               	goto	l10779
  7511                           
  7512                           ;main.c: 214: {;main.c: 215: PWM5_LoadDutyValue(500);
  7513  005128  0E01               	movlw	1
  7514  00512A  6E1B               	movwf	PWM5_LoadDutyValue@dutyValue+1,c
  7515  00512C  0EF4               	movlw	244
  7516  00512E  6E1A               	movwf	PWM5_LoadDutyValue@dutyValue,c
  7517  005130  ECCE  F02B         	call	_PWM5_LoadDutyValue	;wreg free
  7518  005134                     l10779:
  7519                           
  7520                           ;main.c: 216: };main.c: 217: if (speeed == 2)
  7521  005134  0E02               	movlw	2
  7522  005136  181E               	xorwf	dcMotor@speeed,w,c
  7523  005138  101F               	iorwf	dcMotor@speeed+1,w,c
  7524  00513A  A4D8               	btfss	status,2,c
  7525  00513C  D006               	goto	l10783
  7526                           
  7527                           ;main.c: 218: {;main.c: 219: PWM5_LoadDutyValue(330);
  7528  00513E  0E01               	movlw	1
  7529  005140  6E1B               	movwf	PWM5_LoadDutyValue@dutyValue+1,c
  7530  005142  0E4A               	movlw	74
  7531  005144  6E1A               	movwf	PWM5_LoadDutyValue@dutyValue,c
  7532  005146  ECCE  F02B         	call	_PWM5_LoadDutyValue	;wreg free
  7533  00514A                     l10783:
  7534                           
  7535                           ;main.c: 220: };main.c: 221: if (speeed == 3)
  7536  00514A  0E03               	movlw	3
  7537  00514C  181E               	xorwf	dcMotor@speeed,w,c
  7538  00514E  101F               	iorwf	dcMotor@speeed+1,w,c
  7539  005150  A4D8               	btfss	status,2,c
  7540  005152  D006               	goto	l10787
  7541                           
  7542                           ;main.c: 222: {;main.c: 223: PWM5_LoadDutyValue(170);
  7543  005154  0E00               	movlw	0
  7544  005156  6E1B               	movwf	PWM5_LoadDutyValue@dutyValue+1,c
  7545  005158  0EAA               	movlw	170
  7546  00515A  6E1A               	movwf	PWM5_LoadDutyValue@dutyValue,c
  7547  00515C  ECCE  F02B         	call	_PWM5_LoadDutyValue	;wreg free
  7548  005160                     l10787:
  7549                           
  7550                           ;main.c: 224: };main.c: 225: if (speeed == 4)
  7551  005160  0E04               	movlw	4
  7552  005162  181E               	xorwf	dcMotor@speeed,w,c
  7553  005164  101F               	iorwf	dcMotor@speeed+1,w,c
  7554  005166  A4D8               	btfss	status,2,c
  7555  005168  0012               	return	
  7556                           
  7557                           ;main.c: 226: {;main.c: 227: PWM5_LoadDutyValue(0);
  7558  00516A  0E00               	movlw	0
  7559  00516C  6E1B               	movwf	PWM5_LoadDutyValue@dutyValue+1,c
  7560  00516E  0E00               	movlw	0
  7561  005170  6E1A               	movwf	PWM5_LoadDutyValue@dutyValue,c
  7562  005172  ECCE  F02B         	call	_PWM5_LoadDutyValue	;wreg free
  7563  005176  0012               	return		;funcret
  7564  005178                     __end_of_dcMotor:
  7565                           	opt callstack 0
  7566                           
  7567 ;; *************** function _PWM5_LoadDutyValue *****************
  7568 ;; Defined at:
  7569 ;;		line 82 in file "mcc_generated_files/pwm5.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  dutyValue       2   25[COMRAM] unsigned int 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;		None
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      void 
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, status,0
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7583 ;;      Params:         2       0       0       0       0       0       0
  7584 ;;      Locals:         0       0       0       0       0       0       0
  7585 ;;      Temps:          2       0       0       0       0       0       0
  7586 ;;      Totals:         4       0       0       0       0       0       0
  7587 ;;Total ram usage:        4 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    5
  7590 ;; This function calls:
  7591 ;;		Nothing
  7592 ;; This function is called by:
  7593 ;;		_main
  7594 ;;		_dcMotor
  7595 ;;		_printAuto
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           	psect	text24
  7600  00579C                     __ptext24:
  7601                           	opt callstack 0
  7602  00579C                     _PWM5_LoadDutyValue:
  7603                           	opt callstack 22
  7604                           
  7605                           ;pwm5.c: 85: CCPR5L = ((dutyValue & 0x03FC)>>2);
  7606                           
  7607                           ;incstack = 0
  7608  00579C  C01A  F01C         	movff	PWM5_LoadDutyValue@dutyValue,??_PWM5_LoadDutyValue
  7609  0057A0  C01B  F01D         	movff	PWM5_LoadDutyValue@dutyValue+1,??_PWM5_LoadDutyValue+1
  7610  0057A4  90D8               	bcf	status,0,c
  7611  0057A6  321D               	rrcf	??_PWM5_LoadDutyValue+1,f,c
  7612  0057A8  321C               	rrcf	??_PWM5_LoadDutyValue,f,c
  7613  0057AA  90D8               	bcf	status,0,c
  7614  0057AC  321D               	rrcf	??_PWM5_LoadDutyValue+1,f,c
  7615  0057AE  321C               	rrcf	??_PWM5_LoadDutyValue,f,c
  7616  0057B0  501C               	movf	??_PWM5_LoadDutyValue,w,c
  7617  0057B2  010F               	movlb	15	; () banked
  7618  0057B4  6F55               	movwf	85,b	;volatile
  7619                           
  7620                           ;pwm5.c: 88: CCP5CON = ((uint8_t)(CCP5CON & 0xCF) | ((dutyValue & 0x0003)<<4));
  7621  0057B6  C01A  F01C         	movff	PWM5_LoadDutyValue@dutyValue,??_PWM5_LoadDutyValue
  7622  0057BA  0E03               	movlw	3
  7623  0057BC  161C               	andwf	??_PWM5_LoadDutyValue,f,c
  7624  0057BE  3A1C               	swapf	??_PWM5_LoadDutyValue,f,c
  7625  0057C0  0EF0               	movlw	240
  7626  0057C2  161C               	andwf	??_PWM5_LoadDutyValue,f,c
  7627  0057C4  5154               	movf	84,w,b	;volatile
  7628  0057C6  0BCF               	andlw	207
  7629  0057C8  101C               	iorwf	??_PWM5_LoadDutyValue,w,c
  7630  0057CA  6F54               	movwf	84,b	;volatile
  7631                           
  7632                           ; BSR set to: 15
  7633  0057CC  0012               	return		;funcret
  7634  0057CE                     __end_of_PWM5_LoadDutyValue:
  7635                           	opt callstack 0
  7636                           
  7637 ;; *************** function _azoTouchPollAuto *****************
  7638 ;; Defined at:
  7639 ;;		line 290 in file "main.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;		None
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;		None
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      unsigned char 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7653 ;;      Params:         0       0       0       0       0       0       0
  7654 ;;      Locals:         0       0       0       0       0       0       0
  7655 ;;      Temps:          0       2       0       0       0       0       0
  7656 ;;      Totals:         0       2       0       0       0       0       0
  7657 ;;Total ram usage:        2 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:   11
  7660 ;; This function calls:
  7661 ;;		_LCD_clear
  7662 ;;		_LCD_send_string
  7663 ;;		_i2cRead
  7664 ;; This function is called by:
  7665 ;;		_printAuto
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           	psect	text25
  7670  004E4A                     __ptext25:
  7671                           	opt callstack 0
  7672  004E4A                     _azoTouchPollAuto:
  7673                           	opt callstack 18
  7674                           
  7675                           ;main.c: 292: touchBytesAzo = i2cRead(0xC8, 0x03);
  7676                           
  7677                           ; BSR set to: 15
  7678                           ;incstack = 0
  7679  004E4A  0E00               	movlw	0
  7680  004E4C  6E1B               	movwf	i2cRead@i2cAddress+1,c
  7681  004E4E  0EC8               	movlw	200
  7682  004E50  6E1A               	movwf	i2cRead@i2cAddress,c
  7683  004E52  0E00               	movlw	0
  7684  004E54  6E1D               	movwf	i2cRead@registerAdress+1,c
  7685  004E56  0E03               	movlw	3
  7686  004E58  6E1C               	movwf	i2cRead@registerAdress,c
  7687  004E5A  EC12  F023         	call	_i2cRead	;wreg free
  7688  004E5E  C01A  F0EA         	movff	?_i2cRead,_touchBytesAzo
  7689  004E62  C01B  F0EB         	movff	?_i2cRead+1,_touchBytesAzo+1
  7690                           
  7691                           ;main.c: 294: if (touchBytesAzo == 7)
  7692  004E66  0E07               	movlw	7
  7693  004E68  0100               	movlb	0	; () banked
  7694  004E6A  19EA               	xorwf	_touchBytesAzo& (0+255),w,b
  7695  004E6C  11EB               	iorwf	(_touchBytesAzo+1)& (0+255),w,b
  7696  004E6E  A4D8               	btfss	status,2,c
  7697  004E70  D004               	goto	l11125
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;main.c: 295: {;main.c: 296: isOn = 0;
  7701  004E72  0E00               	movlw	0
  7702  004E74  6FEC               	movwf	_isOn& (0+255),b
  7703  004E76                     l11119:
  7704                           
  7705                           ;main.c: 297: return 0;
  7706  004E76  0E00               	movlw	0
  7707  004E78  0012               	return	
  7708  004E7A                     l11125:
  7709                           
  7710                           ; BSR set to: 0
  7711  004E7A  0E03               	movlw	3
  7712  004E7C  19EA               	xorwf	_touchBytesAzo& (0+255),w,b
  7713  004E7E  11EB               	iorwf	(_touchBytesAzo+1)& (0+255),w,b
  7714  004E80  A4D8               	btfss	status,2,c
  7715  004E82  D01B               	goto	l11139
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;main.c: 299: isAuto = 0;
  7719  004E84  0E00               	movlw	0
  7720  004E86  6FED               	movwf	_isAuto& (0+255),b
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;main.c: 300: LCD_clear();
  7724  004E88  EC7E  F02C         	call	_LCD_clear	;wreg free
  7725                           
  7726                           ;main.c: 301: LCD_send_string("Manual mode", 1);
  7727  004E8C  0EA8               	movlw	low STR_5
  7728  004E8E  0100               	movlb	0	; () banked
  7729  004E90  6F60               	movwf	LCD_send_string@str& (0+255),b
  7730  004E92  0E7F               	movlw	high STR_5
  7731  004E94  6F61               	movwf	(LCD_send_string@str+1)& (0+255),b
  7732  004E96  0E01               	movlw	1
  7733  004E98  6F62               	movwf	LCD_send_string@line& (0+255),b
  7734  004E9A  EC20  F013         	call	_LCD_send_string	;wreg free
  7735                           
  7736                           ;main.c: 302: _delay((unsigned long)((1000)*(8000000/4000.0)));
  7737  004E9E  0E0B               	movlw	11
  7738  004EA0  0100               	movlb	0	; () banked
  7739  004EA2  6F6D               	movwf	(??_azoTouchPollAuto+1)& (0+255),b
  7740  004EA4  0E26               	movlw	38
  7741  004EA6  6F6C               	movwf	??_azoTouchPollAuto& (0+255),b
  7742  004EA8  0E5D               	movlw	93
  7743  004EAA                     u14187:
  7744  004EAA  2EE8               	decfsz	wreg,f,c
  7745  004EAC  D7FE               	bra	u14187
  7746  004EAE  2F6C               	decfsz	??_azoTouchPollAuto& (0+255),f,b
  7747  004EB0  D7FC               	bra	u14187
  7748  004EB2  2F6D               	decfsz	(??_azoTouchPollAuto+1)& (0+255),f,b
  7749  004EB4  D7FA               	bra	u14187
  7750  004EB6  D000               	nop2	
  7751  004EB8  D7DE               	goto	l11119
  7752  004EBA                     l11139:
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;main.c: 304: };main.c: 305: return 1;
  7756  004EBA  0E01               	movlw	1
  7757  004EBC  0012               	return		;funcret
  7758  004EBE                     __end_of_azoTouchPollAuto:
  7759                           	opt callstack 0
  7760                           
  7761 ;; *************** function _i2cRead *****************
  7762 ;; Defined at:
  7763 ;;		line 658 in file "main.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  i2cAddress      2   25[COMRAM] unsigned int 
  7766 ;;  registerAdre    2   27[COMRAM] unsigned int 
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  2   25[COMRAM] unsigned int 
  7771 ;; Registers used:
  7772 ;;		wreg, status,2, status,0, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7778 ;;      Params:         4       0       0       0       0       0       0
  7779 ;;      Locals:         0       0       0       0       0       0       0
  7780 ;;      Temps:          0       0       0       0       0       0       0
  7781 ;;      Totals:         4       0       0       0       0       0       0
  7782 ;;Total ram usage:        4 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    6
  7785 ;; This function calls:
  7786 ;;		_i2cRepeatedStart
  7787 ;;		_i2cStart
  7788 ;;		_i2cStop
  7789 ;; This function is called by:
  7790 ;;		_main
  7791 ;;		_azoTouchPollManual
  7792 ;;		_azoTouchPollAuto
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text26
  7797  004624                     __ptext26:
  7798                           	opt callstack 0
  7799  004624                     _i2cRead:
  7800                           	opt callstack 22
  7801                           
  7802                           ;main.c: 660: i2cStart();
  7803                           
  7804                           ;incstack = 0
  7805  004624  EC58  F02C         	call	_i2cStart	;wreg free
  7806                           
  7807                           ;main.c: 662: SSP2BUF = i2cAddress;
  7808  004628  C01A  FF6F         	movff	i2cRead@i2cAddress,3951	;volatile
  7809  00462C                     l1236:
  7810  00462C  B06D               	btfsc	3949,0,c	;volatile
  7811  00462E  D7FE               	goto	l1236
  7812                           
  7813                           ;main.c: 664: timeout = 1000;
  7814  004630  0E03               	movlw	3
  7815  004632  6E43               	movwf	_timeout+1,c
  7816  004634  0EE8               	movlw	232
  7817  004636  6E42               	movwf	_timeout,c
  7818                           
  7819                           ;main.c: 665: while (PIR3bits.SSP2IF == 0 && timeout>0)
  7820  004638  D003               	goto	l10729
  7821  00463A                     l10727:
  7822                           
  7823                           ;main.c: 666: timeout--;
  7824  00463A  0642               	decf	_timeout,f,c
  7825  00463C  A0D8               	btfss	status,0,c
  7826  00463E  0643               	decf	_timeout+1,f,c
  7827  004640                     l10729:
  7828  004640  AEA4               	btfss	4004,7,c	;volatile
  7829  004642  BE43               	btfsc	_timeout+1,7,c
  7830  004644  D005               	goto	u12760
  7831  004646  5043               	movf	_timeout+1,w,c
  7832  004648  E1F8               	bnz	l10727
  7833  00464A  0442               	decf	_timeout,w,c
  7834  00464C  B0D8               	btfsc	status,0,c
  7835  00464E  D7F5               	goto	l10727
  7836  004650                     u12760:
  7837                           
  7838                           ;main.c: 667: PIR3bits.SSP2IF = 0;
  7839  004650  9EA4               	bcf	4004,7,c	;volatile
  7840                           
  7841                           ;main.c: 669: SSP2BUF = registerAdress;
  7842  004652  C01C  FF6F         	movff	i2cRead@registerAdress,3951	;volatile
  7843  004656                     l1244:
  7844  004656  B06D               	btfsc	3949,0,c	;volatile
  7845  004658  D7FE               	goto	l1244
  7846                           
  7847                           ;main.c: 671: timeout = 1000;
  7848  00465A  0E03               	movlw	3
  7849  00465C  6E43               	movwf	_timeout+1,c
  7850  00465E  0EE8               	movlw	232
  7851  004660  6E42               	movwf	_timeout,c
  7852                           
  7853                           ;main.c: 672: while (PIR3bits.SSP2IF == 0 && timeout>0)
  7854  004662  D003               	goto	l10737
  7855  004664                     l10735:
  7856                           
  7857                           ;main.c: 673: timeout--;
  7858  004664  0642               	decf	_timeout,f,c
  7859  004666  A0D8               	btfss	status,0,c
  7860  004668  0643               	decf	_timeout+1,f,c
  7861  00466A                     l10737:
  7862  00466A  AEA4               	btfss	4004,7,c	;volatile
  7863  00466C  BE43               	btfsc	_timeout+1,7,c
  7864  00466E  D005               	goto	u12790
  7865  004670  5043               	movf	_timeout+1,w,c
  7866  004672  E1F8               	bnz	l10735
  7867  004674  0442               	decf	_timeout,w,c
  7868  004676  B0D8               	btfsc	status,0,c
  7869  004678  D7F5               	goto	l10735
  7870  00467A                     u12790:
  7871                           
  7872                           ;main.c: 674: PIR3bits.SSP2IF = 0;
  7873  00467A  9EA4               	bcf	4004,7,c	;volatile
  7874                           
  7875                           ;main.c: 676: i2cRepeatedStart();
  7876  00467C  EC6B  F02C         	call	_i2cRepeatedStart	;wreg free
  7877                           
  7878                           ;main.c: 678: SSP2BUF = i2cAddress+1;
  7879  004680  281A               	incf	i2cRead@i2cAddress,w,c
  7880  004682  6E6F               	movwf	3951,c	;volatile
  7881                           
  7882                           ;main.c: 679: timeout = 1000;
  7883  004684  0E03               	movlw	3
  7884  004686  6E43               	movwf	_timeout+1,c
  7885  004688  0EE8               	movlw	232
  7886  00468A  6E42               	movwf	_timeout,c
  7887                           
  7888                           ;main.c: 680: while (PIR3bits.SSP2IF == 0 && timeout>0)
  7889  00468C  D003               	goto	l10749
  7890  00468E                     l10747:
  7891                           
  7892                           ;main.c: 681: timeout--;
  7893  00468E  0642               	decf	_timeout,f,c
  7894  004690  A0D8               	btfss	status,0,c
  7895  004692  0643               	decf	_timeout+1,f,c
  7896  004694                     l10749:
  7897  004694  AEA4               	btfss	4004,7,c	;volatile
  7898  004696  BE43               	btfsc	_timeout+1,7,c
  7899  004698  D005               	goto	u12810
  7900  00469A  5043               	movf	_timeout+1,w,c
  7901  00469C  E1F8               	bnz	l10747
  7902  00469E  0442               	decf	_timeout,w,c
  7903  0046A0  B0D8               	btfsc	status,0,c
  7904  0046A2  D7F5               	goto	l10747
  7905  0046A4                     u12810:
  7906                           
  7907                           ;main.c: 682: PIR3bits.SSP2IF = 0;
  7908  0046A4  9EA4               	bcf	4004,7,c	;volatile
  7909                           
  7910                           ;main.c: 684: SSP2CON2bits.RCEN = 1;
  7911  0046A6  866B               	bsf	3947,3,c	;volatile
  7912                           
  7913                           ;main.c: 685: timeout = 1000;
  7914  0046A8  0E03               	movlw	3
  7915  0046AA  6E43               	movwf	_timeout+1,c
  7916  0046AC  0EE8               	movlw	232
  7917  0046AE  6E42               	movwf	_timeout,c
  7918                           
  7919                           ;main.c: 686: while (PIR3bits.SSP2IF == 0 && timeout>0)
  7920  0046B0  D003               	goto	l10757
  7921  0046B2                     l10755:
  7922                           
  7923                           ;main.c: 687: timeout--;
  7924  0046B2  0642               	decf	_timeout,f,c
  7925  0046B4  A0D8               	btfss	status,0,c
  7926  0046B6  0643               	decf	_timeout+1,f,c
  7927  0046B8                     l10757:
  7928  0046B8  AEA4               	btfss	4004,7,c	;volatile
  7929  0046BA  BE43               	btfsc	_timeout+1,7,c
  7930  0046BC  D005               	goto	u12830
  7931  0046BE  5043               	movf	_timeout+1,w,c
  7932  0046C0  E1F8               	bnz	l10755
  7933  0046C2  0442               	decf	_timeout,w,c
  7934  0046C4  B0D8               	btfsc	status,0,c
  7935  0046C6  D7F5               	goto	l10755
  7936  0046C8                     u12830:
  7937                           
  7938                           ;main.c: 688: PIR3bits.SSP2IF = 0;
  7939  0046C8  9EA4               	bcf	4004,7,c	;volatile
  7940                           
  7941                           ;main.c: 690: SSP2CON2bits.ACKDT = 1;
  7942  0046CA  8A6B               	bsf	3947,5,c	;volatile
  7943                           
  7944                           ;main.c: 691: SSP2CON2bits.ACKEN = 1;
  7945  0046CC  886B               	bsf	3947,4,c	;volatile
  7946                           
  7947                           ;main.c: 692: timeout = 1000;
  7948  0046CE  0E03               	movlw	3
  7949  0046D0  6E43               	movwf	_timeout+1,c
  7950  0046D2  0EE8               	movlw	232
  7951  0046D4  6E42               	movwf	_timeout,c
  7952                           
  7953                           ;main.c: 693: while (SSP2CON2bits.ACKEN == 1 && timeout>0)
  7954  0046D6  D003               	goto	l10765
  7955  0046D8                     l10763:
  7956                           
  7957                           ;main.c: 694: timeout--;
  7958  0046D8  0642               	decf	_timeout,f,c
  7959  0046DA  A0D8               	btfss	status,0,c
  7960  0046DC  0643               	decf	_timeout+1,f,c
  7961  0046DE                     l10765:
  7962  0046DE  B86B               	btfsc	3947,4,c	;volatile
  7963  0046E0  BE43               	btfsc	_timeout+1,7,c
  7964  0046E2  D005               	goto	u12850
  7965  0046E4  5043               	movf	_timeout+1,w,c
  7966  0046E6  E1F8               	bnz	l10763
  7967  0046E8  0442               	decf	_timeout,w,c
  7968  0046EA  B0D8               	btfsc	status,0,c
  7969  0046EC  D7F5               	goto	l10763
  7970  0046EE                     u12850:
  7971                           
  7972                           ;main.c: 699: i2cStop();
  7973  0046EE  ECDB  F029         	call	_i2cStop	;wreg free
  7974                           
  7975                           ;main.c: 701: return SSP2BUF;
  7976  0046F2  CF6F F01A          	movff	3951,?_i2cRead	;volatile
  7977  0046F6  6A1B               	clrf	?_i2cRead+1,c
  7978  0046F8  0012               	return		;funcret
  7979  0046FA                     __end_of_i2cRead:
  7980                           	opt callstack 0
  7981                           
  7982 ;; *************** function _i2cStop *****************
  7983 ;; Defined at:
  7984 ;;		line 641 in file "main.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;		None
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;		None
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      void 
  7991 ;; Registers used:
  7992 ;;		wreg, status,2, status,0
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7998 ;;      Params:         0       0       0       0       0       0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0
  8001 ;;      Totals:         0       0       0       0       0       0       0
  8002 ;;Total ram usage:        0 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    5
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_i2cRead
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text27
  8013  0053B6                     __ptext27:
  8014                           	opt callstack 0
  8015  0053B6                     _i2cStop:
  8016                           	opt callstack 22
  8017                           
  8018                           ;main.c: 643: SSP2CON2bits.PEN = 1;
  8019                           
  8020                           ;incstack = 0
  8021  0053B6  846B               	bsf	3947,2,c	;volatile
  8022                           
  8023                           ;main.c: 645: timeout = 1000;
  8024  0053B8  0E03               	movlw	3
  8025  0053BA  6E43               	movwf	_timeout+1,c
  8026  0053BC  0EE8               	movlw	232
  8027  0053BE  6E42               	movwf	_timeout,c
  8028                           
  8029                           ;main.c: 646: while (PIR3bits.SSP2IF == 0 && timeout>0)
  8030  0053C0  D003               	goto	l10091
  8031  0053C2                     l10089:
  8032                           
  8033                           ;main.c: 647: timeout--;
  8034  0053C2  0642               	decf	_timeout,f,c
  8035  0053C4  A0D8               	btfss	status,0,c
  8036  0053C6  0643               	decf	_timeout+1,f,c
  8037  0053C8                     l10091:
  8038  0053C8  AEA4               	btfss	4004,7,c	;volatile
  8039  0053CA  BE43               	btfsc	_timeout+1,7,c
  8040  0053CC  D005               	goto	u11340
  8041  0053CE  5043               	movf	_timeout+1,w,c
  8042  0053D0  E1F8               	bnz	l10089
  8043  0053D2  0442               	decf	_timeout,w,c
  8044  0053D4  B0D8               	btfsc	status,0,c
  8045  0053D6  D7F5               	goto	l10089
  8046  0053D8                     u11340:
  8047                           
  8048                           ;main.c: 648: PIR3bits.SSP2IF = 0;
  8049  0053D8  9EA4               	bcf	4004,7,c	;volatile
  8050                           
  8051                           ;main.c: 650: timeout = 1000;
  8052  0053DA  0E03               	movlw	3
  8053  0053DC  6E43               	movwf	_timeout+1,c
  8054  0053DE  0EE8               	movlw	232
  8055  0053E0  6E42               	movwf	_timeout,c
  8056                           
  8057                           ;main.c: 651: while (SSP2CON2bits.PEN == 1 && timeout>0)
  8058  0053E2  D003               	goto	l10099
  8059  0053E4                     l10097:
  8060                           
  8061                           ;main.c: 652: timeout--;
  8062  0053E4  0642               	decf	_timeout,f,c
  8063  0053E6  A0D8               	btfss	status,0,c
  8064  0053E8  0643               	decf	_timeout+1,f,c
  8065  0053EA                     l10099:
  8066  0053EA  A46B               	btfss	3947,2,c	;volatile
  8067  0053EC  0012               	return	
  8068  0053EE  BE43               	btfsc	_timeout+1,7,c
  8069  0053F0  0012               	return	
  8070  0053F2  5043               	movf	_timeout+1,w,c
  8071  0053F4  E1F7               	bnz	l10097
  8072  0053F6  0442               	decf	_timeout,w,c
  8073  0053F8  A0D8               	btfss	status,0,c
  8074  0053FA  0012               	return	
  8075  0053FC  D7F3               	goto	l10097
  8076  0053FE                     __end_of_i2cStop:
  8077                           	opt callstack 0
  8078                           
  8079 ;; *************** function _i2cStart *****************
  8080 ;; Defined at:
  8081 ;;		line 621 in file "main.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;		None
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      void 
  8088 ;; Registers used:
  8089 ;;		wreg, status,2, status,0
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8095 ;;      Params:         0       0       0       0       0       0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0
  8098 ;;      Totals:         0       0       0       0       0       0       0
  8099 ;;Total ram usage:        0 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    5
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_i2cRead
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text28
  8110  0058B0                     __ptext28:
  8111                           	opt callstack 0
  8112  0058B0                     _i2cStart:
  8113                           	opt callstack 22
  8114                           
  8115                           ;main.c: 623: SSP2CON2bits.SEN = 1;
  8116                           
  8117                           ;incstack = 0
  8118  0058B0  806B               	bsf	3947,0,c	;volatile
  8119                           
  8120                           ;main.c: 624: timeout = 1000;
  8121  0058B2  0E03               	movlw	3
  8122  0058B4  6E43               	movwf	_timeout+1,c
  8123  0058B6  0EE8               	movlw	232
  8124  0058B8  6E42               	movwf	_timeout,c
  8125                           
  8126                           ;main.c: 625: while (PIR3bits.SSP2IF == 0 && timeout>0)
  8127  0058BA  D003               	goto	l10071
  8128  0058BC                     l10069:
  8129                           
  8130                           ;main.c: 626: timeout--;
  8131  0058BC  0642               	decf	_timeout,f,c
  8132  0058BE  A0D8               	btfss	status,0,c
  8133  0058C0  0643               	decf	_timeout+1,f,c
  8134  0058C2                     l10071:
  8135  0058C2  AEA4               	btfss	4004,7,c	;volatile
  8136  0058C4  BE43               	btfsc	_timeout+1,7,c
  8137  0058C6  D005               	goto	u11300
  8138  0058C8  5043               	movf	_timeout+1,w,c
  8139  0058CA  E1F8               	bnz	l10069
  8140  0058CC  0442               	decf	_timeout,w,c
  8141  0058CE  B0D8               	btfsc	status,0,c
  8142  0058D0  D7F5               	goto	l10069
  8143  0058D2                     u11300:
  8144                           
  8145                           ;main.c: 627: PIR3bits.SSP2IF = 0;
  8146  0058D2  9EA4               	bcf	4004,7,c	;volatile
  8147                           
  8148                           ;main.c: 628: return ;
  8149  0058D4  0012               	return		;funcret
  8150  0058D6                     __end_of_i2cStart:
  8151                           	opt callstack 0
  8152                           
  8153 ;; *************** function _i2cRepeatedStart *****************
  8154 ;; Defined at:
  8155 ;;		line 630 in file "main.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;		None
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		wreg, status,2, status,0
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8169 ;;      Params:         0       0       0       0       0       0       0
  8170 ;;      Locals:         0       0       0       0       0       0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0
  8172 ;;      Totals:         0       0       0       0       0       0       0
  8173 ;;Total ram usage:        0 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    5
  8176 ;; This function calls:
  8177 ;;		Nothing
  8178 ;; This function is called by:
  8179 ;;		_i2cRead
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           	psect	text29
  8184  0058D6                     __ptext29:
  8185                           	opt callstack 0
  8186  0058D6                     _i2cRepeatedStart:
  8187                           	opt callstack 22
  8188                           
  8189                           ;main.c: 632: SSP2CON2bits.RSEN = 1;
  8190                           
  8191                           ;incstack = 0
  8192  0058D6  826B               	bsf	3947,1,c	;volatile
  8193                           
  8194                           ;main.c: 634: timeout = 1000;
  8195  0058D8  0E03               	movlw	3
  8196  0058DA  6E43               	movwf	_timeout+1,c
  8197  0058DC  0EE8               	movlw	232
  8198  0058DE  6E42               	movwf	_timeout,c
  8199                           
  8200                           ;main.c: 635: while (PIR3bits.SSP2IF == 0 && timeout>0)
  8201  0058E0  D003               	goto	l10081
  8202  0058E2                     l10079:
  8203                           
  8204                           ;main.c: 636: timeout--;
  8205  0058E2  0642               	decf	_timeout,f,c
  8206  0058E4  A0D8               	btfss	status,0,c
  8207  0058E6  0643               	decf	_timeout+1,f,c
  8208  0058E8                     l10081:
  8209  0058E8  AEA4               	btfss	4004,7,c	;volatile
  8210  0058EA  BE43               	btfsc	_timeout+1,7,c
  8211  0058EC  D005               	goto	u11320
  8212  0058EE  5043               	movf	_timeout+1,w,c
  8213  0058F0  E1F8               	bnz	l10079
  8214  0058F2  0442               	decf	_timeout,w,c
  8215  0058F4  B0D8               	btfsc	status,0,c
  8216  0058F6  D7F5               	goto	l10079
  8217  0058F8                     u11320:
  8218                           
  8219                           ;main.c: 637: PIR3bits.SSP2IF = 0;
  8220  0058F8  9EA4               	bcf	4004,7,c	;volatile
  8221                           
  8222                           ;main.c: 638: return ;
  8223  0058FA  0012               	return		;funcret
  8224  0058FC                     __end_of_i2cRepeatedStart:
  8225                           	opt callstack 0
  8226                           
  8227 ;; *************** function _LCD_send_string *****************
  8228 ;; Defined at:
  8229 ;;		line 112 in file "lcd.c"
  8230 ;; Parameters:    Size  Location     Type
  8231 ;;  str             2    0[BANK0 ] PTR unsigned char 
  8232 ;;		 -> STR_28(17), printAuto@str_2672(15), STR_26(15), STR_25(16), 
  8233 ;;		 -> printAuto@str_2667(15), STR_23(17), printAuto@str(15), STR_21(8), 
  8234 ;;		 -> STR_20(8), STR_19(8), STR_18(8), printAuto@strTemp(16), 
  8235 ;;		 -> printAuto@strLux(13), STR_15(8), STR_14(8), STR_13(8), 
  8236 ;;		 -> STR_12(8), STR_11(12), STR_10(10), STR_6(10), 
  8237 ;;		 -> STR_5(12), STR_4(7), STR_3(15), STR_2(26), 
  8238 ;;		 -> STR_1(13), 
  8239 ;;  line            1    2[BANK0 ] unsigned char 
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;  i               2   10[BANK0 ] unsigned int 
  8242 ;;  delay           2    7[BANK0 ] unsigned int 
  8243 ;;  prefix          1    9[BANK0 ] unsigned char 
  8244 ;;  col             1    6[BANK0 ] unsigned char 
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      void 
  8247 ;; Registers used:
  8248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8254 ;;      Params:         0       3       0       0       0       0       0
  8255 ;;      Locals:         0       6       0       0       0       0       0
  8256 ;;      Temps:          0       3       0       0       0       0       0
  8257 ;;      Totals:         0      12       0       0       0       0       0
  8258 ;;Total ram usage:       12 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:   10
  8261 ;; This function calls:
  8262 ;;		_LCD_select_line
  8263 ;;		_LCD_send_data
  8264 ;;		___wmul
  8265 ;; This function is called by:
  8266 ;;		_main
  8267 ;;		_azoTouchPollManual
  8268 ;;		_azoTouchPollAuto
  8269 ;;		_printOn
  8270 ;;		_printAuto
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text30
  8275  002640                     __ptext30:
  8276                           	opt callstack 0
  8277  002640                     _LCD_send_string:
  8278                           	opt callstack 18
  8279                           
  8280                           ;lcd.c: 113: while (*str && line > 0 && line <= _LCD_rows) {
  8281                           
  8282                           ;incstack = 0
  8283  002640  D234               	goto	l10715
  8284  002642                     l10625:
  8285                           
  8286                           ; BSR set to: 1
  8287                           ;lcd.c: 114: LCD_select_line(line++);
  8288  002642  0100               	movlb	0	; () banked
  8289  002644  5162               	movf	LCD_send_string@line& (0+255),w,b
  8290  002646  EC0D  F02B         	call	_LCD_select_line
  8291  00264A  0100               	movlb	0	; () banked
  8292  00264C  2B62               	incf	LCD_send_string@line& (0+255),f,b
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;lcd.c: 115: uint8_t col=0, prefix=0;
  8296  00264E  0E00               	movlw	0
  8297  002650  6F66               	movwf	LCD_send_string@col& (0+255),b
  8298                           
  8299                           ; BSR set to: 0
  8300  002652  0E00               	movlw	0
  8301  002654  6F69               	movwf	LCD_send_string@prefix& (0+255),b
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;lcd.c: 116: uint16_t i, delay = -1;
  8305  002656  6967               	setf	LCD_send_string@delay& (0+255),b
  8306  002658  6968               	setf	(LCD_send_string@delay+1)& (0+255),b
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;lcd.c: 118: if (*str == '|' && *(str + 2) == '|') {
  8310  00265A  C060  FFF6         	movff	LCD_send_string@str,tblptrl
  8311  00265E  C061  FFF7         	movff	LCD_send_string@str+1,tblptrh
  8312  002662  6AF8               	clrf	tblptru,c
  8313  002664  0E05               	movlw	(high __ramtop+-1)
  8314  002666  64F7               	cpfsgt	tblptrh,c
  8315  002668  D003               	bra	u12327
  8316  00266A  0008               	tblrd		*
  8317  00266C  50F5               	movf	tablat,w,c
  8318  00266E  D005               	bra	u12320
  8319  002670                     u12327:
  8320  002670  CFF6 FFE9          	movff	tblptrl,fsr0l
  8321  002674  CFF7 FFEA          	movff	tblptrh,fsr0h
  8322  002678  50EF               	movf	indf0,w,c
  8323  00267A                     u12320:
  8324  00267A  0A7C               	xorlw	124
  8325  00267C  A4D8               	btfss	status,2,c
  8326  00267E  D156               	goto	l10673
  8327  002680  0E02               	movlw	2
  8328  002682  0100               	movlb	0	; () banked
  8329  002684  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8330  002686  6F63               	movwf	??_LCD_send_string& (0+255),b
  8331  002688  0E00               	movlw	0
  8332  00268A  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8333  00268C  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8334  00268E  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8335  002692  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8336  002696  6AF8               	clrf	tblptru,c
  8337  002698  0E05               	movlw	(high __ramtop+-1)
  8338  00269A  64F7               	cpfsgt	tblptrh,c
  8339  00269C  D003               	bra	u12347
  8340  00269E  0008               	tblrd		*
  8341  0026A0  50F5               	movf	tablat,w,c
  8342  0026A2  D005               	bra	u12340
  8343  0026A4                     u12347:
  8344  0026A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  8345  0026A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  8346  0026AC  50EF               	movf	indf0,w,c
  8347  0026AE                     u12340:
  8348  0026AE  0A7C               	xorlw	124
  8349  0026B0  A4D8               	btfss	status,2,c
  8350  0026B2  D13C               	goto	l10673
  8351                           
  8352                           ;lcd.c: 119: if (*(str + 1) == 'c' || *(str + 1) == 'r') {
  8353  0026B4  0E01               	movlw	1
  8354  0026B6  0100               	movlb	0	; () banked
  8355  0026B8  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8356  0026BA  6F63               	movwf	??_LCD_send_string& (0+255),b
  8357  0026BC  0E00               	movlw	0
  8358  0026BE  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8359  0026C0  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8360  0026C2  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8361  0026C6  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8362  0026CA  6AF8               	clrf	tblptru,c
  8363  0026CC  0E05               	movlw	(high __ramtop+-1)
  8364  0026CE  64F7               	cpfsgt	tblptrh,c
  8365  0026D0  D003               	bra	u12367
  8366  0026D2  0008               	tblrd		*
  8367  0026D4  50F5               	movf	tablat,w,c
  8368  0026D6  D005               	bra	u12360
  8369  0026D8                     u12367:
  8370  0026D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  8371  0026DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  8372  0026E0  50EF               	movf	indf0,w,c
  8373  0026E2                     u12360:
  8374  0026E2  0A63               	xorlw	99
  8375  0026E4  B4D8               	btfsc	status,2,c
  8376  0026E6  D01D               	goto	l10645
  8377  0026E8  0E01               	movlw	1
  8378  0026EA  0100               	movlb	0	; () banked
  8379  0026EC  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8380  0026EE  6F63               	movwf	??_LCD_send_string& (0+255),b
  8381  0026F0  0E00               	movlw	0
  8382  0026F2  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8383  0026F4  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8384  0026F6  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8385  0026FA  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8386  0026FE  6AF8               	clrf	tblptru,c
  8387  002700  0E05               	movlw	(high __ramtop+-1)
  8388  002702  64F7               	cpfsgt	tblptrh,c
  8389  002704  D003               	bra	u12387
  8390  002706  0008               	tblrd		*
  8391  002708  50F5               	movf	tablat,w,c
  8392  00270A  D005               	bra	u12380
  8393  00270C                     u12387:
  8394  00270C  CFF6 FFE9          	movff	tblptrl,fsr0l
  8395  002710  CFF7 FFEA          	movff	tblptrh,fsr0h
  8396  002714  50EF               	movf	indf0,w,c
  8397  002716                     u12380:
  8398  002716  0A72               	xorlw	114
  8399  002718  B4D8               	btfsc	status,2,c
  8400  00271A  D003               	goto	l10645
  8401  00271C  D063               	goto	l10659
  8402  00271E                     l10643:
  8403  00271E  0100               	movlb	0	; () banked
  8404  002720  2B69               	incf	LCD_send_string@prefix& (0+255),f,b
  8405  002722                     l10645:
  8406  002722  0100               	movlb	0	; () banked
  8407  002724  5169               	movf	LCD_send_string@prefix& (0+255),w,b
  8408  002726  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8409  002728  6F63               	movwf	??_LCD_send_string& (0+255),b
  8410  00272A  0E00               	movlw	0
  8411  00272C  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8412  00272E  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8413  002730  0E03               	movlw	3
  8414  002732  2763               	addwf	??_LCD_send_string& (0+255),f,b
  8415  002734  0E00               	movlw	0
  8416  002736  2364               	addwfc	(??_LCD_send_string+1)& (0+255),f,b
  8417  002738  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8418  00273C  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8419  002740  6AF8               	clrf	tblptru,c
  8420  002742  0E05               	movlw	(high __ramtop+-1)
  8421  002744  64F7               	cpfsgt	tblptrh,c
  8422  002746  D003               	bra	u12407
  8423  002748  0008               	tblrd		*
  8424  00274A  50F5               	movf	tablat,w,c
  8425  00274C  D005               	bra	u12400
  8426  00274E                     u12407:
  8427  00274E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8428  002752  CFF7 FFEA          	movff	tblptrh,fsr0h
  8429  002756  50EF               	movf	indf0,w,c
  8430  002758                     u12400:
  8431  002758  0900               	iorlw	0
  8432  00275A  B4D8               	btfsc	status,2,c
  8433  00275C  D01E               	goto	u12430
  8434  00275E  0100               	movlb	0	; () banked
  8435  002760  5169               	movf	LCD_send_string@prefix& (0+255),w,b
  8436  002762  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8437  002764  6F63               	movwf	??_LCD_send_string& (0+255),b
  8438  002766  0E00               	movlw	0
  8439  002768  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8440  00276A  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8441  00276C  0E03               	movlw	3
  8442  00276E  2763               	addwf	??_LCD_send_string& (0+255),f,b
  8443  002770  0E00               	movlw	0
  8444  002772  2364               	addwfc	(??_LCD_send_string+1)& (0+255),f,b
  8445  002774  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8446  002778  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8447  00277C  6AF8               	clrf	tblptru,c
  8448  00277E  0E05               	movlw	(high __ramtop+-1)
  8449  002780  64F7               	cpfsgt	tblptrh,c
  8450  002782  D003               	bra	u12427
  8451  002784  0008               	tblrd		*
  8452  002786  50F5               	movf	tablat,w,c
  8453  002788  D005               	bra	u12420
  8454  00278A                     u12427:
  8455  00278A  CFF6 FFE9          	movff	tblptrl,fsr0l
  8456  00278E  CFF7 FFEA          	movff	tblptrh,fsr0h
  8457  002792  50EF               	movf	indf0,w,c
  8458  002794                     u12420:
  8459  002794  0A0A               	xorlw	10
  8460  002796  A4D8               	btfss	status,2,c
  8461  002798  D7C2               	goto	l10643
  8462  00279A                     u12430:
  8463                           
  8464                           ;lcd.c: 121: if (prefix > _LCD_cols) prefix = _LCD_cols;
  8465  00279A  0100               	movlb	0	; () banked
  8466  00279C  5169               	movf	LCD_send_string@prefix& (0+255),w,b
  8467  00279E  5C38               	subwf	__LCD_cols,w,c
  8468  0027A0  A0D8               	btfss	status,0,c
  8469                           
  8470                           ; BSR set to: 0
  8471  0027A2  C038  F069         	movff	__LCD_cols,LCD_send_string@prefix
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;lcd.c: 122: prefix = _LCD_cols - prefix;
  8475  0027A6  5169               	movf	LCD_send_string@prefix& (0+255),w,b
  8476  0027A8  5C38               	subwf	__LCD_cols,w,c
  8477  0027AA  6F69               	movwf	LCD_send_string@prefix& (0+255),b
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;lcd.c: 123: if (*(str + 1) == 'c') prefix /= 2;
  8481  0027AC  0E01               	movlw	1
  8482  0027AE  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8483  0027B0  6F63               	movwf	??_LCD_send_string& (0+255),b
  8484  0027B2  0E00               	movlw	0
  8485  0027B4  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8486  0027B6  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8487  0027B8  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8488  0027BC  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8489  0027C0  6AF8               	clrf	tblptru,c
  8490  0027C2  0E05               	movlw	(high __ramtop+-1)
  8491  0027C4  64F7               	cpfsgt	tblptrh,c
  8492  0027C6  D003               	bra	u12457
  8493  0027C8  0008               	tblrd		*
  8494  0027CA  50F5               	movf	tablat,w,c
  8495  0027CC  D005               	bra	u12450
  8496  0027CE                     u12457:
  8497  0027CE  CFF6 FFE9          	movff	tblptrl,fsr0l
  8498  0027D2  CFF7 FFEA          	movff	tblptrh,fsr0h
  8499  0027D6  50EF               	movf	indf0,w,c
  8500  0027D8                     u12450:
  8501  0027D8  0A63               	xorlw	99
  8502  0027DA  A4D8               	btfss	status,2,c
  8503  0027DC  D003               	goto	l10659
  8504  0027DE  0100               	movlb	0	; () banked
  8505  0027E0  90D8               	bcf	status,0,c
  8506  0027E2  3369               	rrcf	LCD_send_string@prefix& (0+255),f,b
  8507  0027E4                     l10659:
  8508                           
  8509                           ;lcd.c: 124: };lcd.c: 125: if (*(str + 1) == 'd') {
  8510  0027E4  0E01               	movlw	1
  8511  0027E6  0100               	movlb	0	; () banked
  8512  0027E8  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8513  0027EA  6F63               	movwf	??_LCD_send_string& (0+255),b
  8514  0027EC  0E00               	movlw	0
  8515  0027EE  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8516  0027F0  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8517  0027F2  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8518  0027F6  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8519  0027FA  6AF8               	clrf	tblptru,c
  8520  0027FC  0E05               	movlw	(high __ramtop+-1)
  8521  0027FE  64F7               	cpfsgt	tblptrh,c
  8522  002800  D003               	bra	u12477
  8523  002802  0008               	tblrd		*
  8524  002804  50F5               	movf	tablat,w,c
  8525  002806  D005               	bra	u12470
  8526  002808                     u12477:
  8527  002808  CFF6 FFE9          	movff	tblptrl,fsr0l
  8528  00280C  CFF7 FFEA          	movff	tblptrh,fsr0h
  8529  002810  50EF               	movf	indf0,w,c
  8530  002812                     u12470:
  8531  002812  0A64               	xorlw	100
  8532  002814  A4D8               	btfss	status,2,c
  8533  002816  D085               	goto	l1482
  8534                           
  8535                           ;lcd.c: 126: i = 0;
  8536  002818  0E00               	movlw	0
  8537  00281A  0100               	movlb	0	; () banked
  8538  00281C  6F6B               	movwf	(LCD_send_string@i+1)& (0+255),b
  8539  00281E  0E00               	movlw	0
  8540  002820  6F6A               	movwf	LCD_send_string@i& (0+255),b
  8541                           
  8542                           ;lcd.c: 127: delay = 0;
  8543  002822  0E00               	movlw	0
  8544  002824  6F68               	movwf	(LCD_send_string@delay+1)& (0+255),b
  8545  002826  0E00               	movlw	0
  8546  002828  6F67               	movwf	LCD_send_string@delay& (0+255),b
  8547                           
  8548                           ;lcd.c: 128: while(*(str + i + 3) >= '0' && *(str + i + 3) <= '9') {
  8549  00282A  D033               	goto	l10667
  8550  00282C                     l10663:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;lcd.c: 129: delay = delay * 10 + (*(str + (i++) + 3) - 48);
  8554  00282C  C067  F026         	movff	LCD_send_string@delay,___wmul@multiplier
  8555  002830  C068  F027         	movff	LCD_send_string@delay+1,___wmul@multiplier+1
  8556  002834  0E00               	movlw	0
  8557  002836  6E29               	movwf	___wmul@multiplicand+1,c
  8558  002838  0E0A               	movlw	10
  8559  00283A  6E28               	movwf	___wmul@multiplicand,c
  8560  00283C  EC91  F02C         	call	___wmul	;wreg free
  8561  002840  0100               	movlb	0	; () banked
  8562  002842  516A               	movf	LCD_send_string@i& (0+255),w,b
  8563  002844  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8564  002846  6F63               	movwf	??_LCD_send_string& (0+255),b
  8565  002848  516B               	movf	(LCD_send_string@i+1)& (0+255),w,b
  8566  00284A  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8567  00284C  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8568  00284E  0E03               	movlw	3
  8569  002850  2763               	addwf	??_LCD_send_string& (0+255),f,b
  8570  002852  0E00               	movlw	0
  8571  002854  2364               	addwfc	(??_LCD_send_string+1)& (0+255),f,b
  8572  002856  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8573  00285A  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8574  00285E  6AF8               	clrf	tblptru,c
  8575  002860  0E05               	movlw	(high __ramtop+-1)
  8576  002862  64F7               	cpfsgt	tblptrh,c
  8577  002864  D003               	bra	u12497
  8578  002866  0008               	tblrd		*
  8579  002868  50F5               	movf	tablat,w,c
  8580  00286A  D005               	bra	u12490
  8581  00286C                     u12497:
  8582  00286C  CFF6 FFE9          	movff	tblptrl,fsr0l
  8583  002870  CFF7 FFEA          	movff	tblptrh,fsr0h
  8584  002874  50EF               	movf	indf0,w,c
  8585  002876                     u12490:
  8586  002876  0100               	movlb	0	; () banked
  8587  002878  6F65               	movwf	(??_LCD_send_string+2)& (0+255),b
  8588  00287A  5165               	movf	(??_LCD_send_string+2)& (0+255),w,b
  8589  00287C  2626               	addwf	?___wmul,f,c
  8590  00287E  0E00               	movlw	0
  8591  002880  2227               	addwfc	?___wmul+1,f,c
  8592  002882  0ED0               	movlw	208
  8593  002884  2426               	addwf	?___wmul,w,c
  8594  002886  6F67               	movwf	LCD_send_string@delay& (0+255),b
  8595  002888  0EFF               	movlw	255
  8596  00288A  2027               	addwfc	?___wmul+1,w,c
  8597  00288C  6F68               	movwf	(LCD_send_string@delay+1)& (0+255),b
  8598                           
  8599                           ; BSR set to: 0
  8600  00288E  4B6A               	infsnz	LCD_send_string@i& (0+255),f,b
  8601  002890  2B6B               	incf	(LCD_send_string@i+1)& (0+255),f,b
  8602  002892                     l10667:
  8603                           
  8604                           ; BSR set to: 0
  8605  002892  516A               	movf	LCD_send_string@i& (0+255),w,b
  8606  002894  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8607  002896  6F63               	movwf	??_LCD_send_string& (0+255),b
  8608  002898  516B               	movf	(LCD_send_string@i+1)& (0+255),w,b
  8609  00289A  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8610  00289C  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8611  00289E  0E03               	movlw	3
  8612  0028A0  2763               	addwf	??_LCD_send_string& (0+255),f,b
  8613  0028A2  0E00               	movlw	0
  8614  0028A4  2364               	addwfc	(??_LCD_send_string+1)& (0+255),f,b
  8615  0028A6  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8616  0028AA  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8617  0028AE  6AF8               	clrf	tblptru,c
  8618  0028B0  0E05               	movlw	(high __ramtop+-1)
  8619  0028B2  64F7               	cpfsgt	tblptrh,c
  8620  0028B4  D003               	bra	u12507
  8621  0028B6  0008               	tblrd		*
  8622  0028B8  50F5               	movf	tablat,w,c
  8623  0028BA  D005               	bra	u12500
  8624  0028BC                     u12507:
  8625  0028BC  CFF6 FFE9          	movff	tblptrl,fsr0l
  8626  0028C0  CFF7 FFEA          	movff	tblptrh,fsr0h
  8627  0028C4  50EF               	movf	indf0,w,c
  8628  0028C6                     u12500:
  8629  0028C6  0100               	movlb	0	; () banked
  8630  0028C8  6F65               	movwf	(??_LCD_send_string+2)& (0+255),b
  8631  0028CA  0E2F               	movlw	47
  8632  0028CC  6565               	cpfsgt	(??_LCD_send_string+2)& (0+255),b
  8633  0028CE  D01F               	goto	u12530
  8634                           
  8635                           ; BSR set to: 0
  8636  0028D0  516A               	movf	LCD_send_string@i& (0+255),w,b
  8637  0028D2  2560               	addwf	LCD_send_string@str& (0+255),w,b
  8638  0028D4  6F63               	movwf	??_LCD_send_string& (0+255),b
  8639  0028D6  516B               	movf	(LCD_send_string@i+1)& (0+255),w,b
  8640  0028D8  2161               	addwfc	(LCD_send_string@str+1)& (0+255),w,b
  8641  0028DA  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8642  0028DC  0E03               	movlw	3
  8643  0028DE  2763               	addwf	??_LCD_send_string& (0+255),f,b
  8644  0028E0  0E00               	movlw	0
  8645  0028E2  2364               	addwfc	(??_LCD_send_string+1)& (0+255),f,b
  8646  0028E4  C063  FFF6         	movff	??_LCD_send_string,tblptrl
  8647  0028E8  C064  FFF7         	movff	??_LCD_send_string+1,tblptrh
  8648  0028EC  6AF8               	clrf	tblptru,c
  8649  0028EE  0E05               	movlw	(high __ramtop+-1)
  8650  0028F0  64F7               	cpfsgt	tblptrh,c
  8651  0028F2  D003               	bra	u12527
  8652  0028F4  0008               	tblrd		*
  8653  0028F6  50F5               	movf	tablat,w,c
  8654  0028F8  D005               	bra	u12520
  8655  0028FA                     u12527:
  8656  0028FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  8657  0028FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  8658  002902  50EF               	movf	indf0,w,c
  8659  002904                     u12520:
  8660  002904  0100               	movlb	0	; () banked
  8661  002906  6F65               	movwf	(??_LCD_send_string+2)& (0+255),b
  8662  002908  0E39               	movlw	57
  8663  00290A  6565               	cpfsgt	(??_LCD_send_string+2)& (0+255),b
  8664  00290C  D78F               	goto	l10663
  8665  00290E                     u12530:
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;lcd.c: 130: };lcd.c: 131: str += i + 1;
  8669  00290E  0E01               	movlw	1
  8670  002910  256A               	addwf	LCD_send_string@i& (0+255),w,b
  8671  002912  6F63               	movwf	??_LCD_send_string& (0+255),b
  8672  002914  0E00               	movlw	0
  8673  002916  216B               	addwfc	(LCD_send_string@i+1)& (0+255),w,b
  8674  002918  6F64               	movwf	(??_LCD_send_string+1)& (0+255),b
  8675  00291A  5163               	movf	??_LCD_send_string& (0+255),w,b
  8676  00291C  2760               	addwf	LCD_send_string@str& (0+255),f,b
  8677  00291E  5164               	movf	(??_LCD_send_string+1)& (0+255),w,b
  8678  002920  2361               	addwfc	(LCD_send_string@str+1)& (0+255),f,b
  8679  002922                     l1482:
  8680                           
  8681                           ;lcd.c: 132: };lcd.c: 133: str += 3;
  8682  002922  0E03               	movlw	3
  8683  002924  0100               	movlb	0	; () banked
  8684  002926  2760               	addwf	LCD_send_string@str& (0+255),f,b
  8685  002928  0E00               	movlw	0
  8686  00292A  2361               	addwfc	(LCD_send_string@str+1)& (0+255),f,b
  8687  00292C                     l10673:
  8688                           
  8689                           ;lcd.c: 134: };lcd.c: 136: for (i=0; i < prefix; i++) LCD_send_data(' ');
  8690  00292C  0E00               	movlw	0
  8691  00292E  0100               	movlb	0	; () banked
  8692  002930  6F6B               	movwf	(LCD_send_string@i+1)& (0+255),b
  8693  002932  0E00               	movlw	0
  8694  002934  6F6A               	movwf	LCD_send_string@i& (0+255),b
  8695  002936  D006               	goto	l10679
  8696  002938                     l10675:
  8697                           
  8698                           ; BSR set to: 0
  8699  002938  0E20               	movlw	32
  8700  00293A  EC8F  F029         	call	_LCD_send_data
  8701  00293E  0100               	movlb	0	; () banked
  8702  002940  4B6A               	infsnz	LCD_send_string@i& (0+255),f,b
  8703  002942  2B6B               	incf	(LCD_send_string@i+1)& (0+255),f,b
  8704  002944                     l10679:
  8705                           
  8706                           ; BSR set to: 0
  8707  002944  5169               	movf	LCD_send_string@prefix& (0+255),w,b
  8708  002946  6F63               	movwf	??_LCD_send_string& (0+255),b
  8709  002948  6B64               	clrf	(??_LCD_send_string+1)& (0+255),b
  8710  00294A  5163               	movf	??_LCD_send_string& (0+255),w,b
  8711  00294C  5D6A               	subwf	LCD_send_string@i& (0+255),w,b
  8712  00294E  5164               	movf	(??_LCD_send_string+1)& (0+255),w,b
  8713  002950  596B               	subwfb	(LCD_send_string@i+1)& (0+255),w,b
  8714  002952  B0D8               	btfsc	status,0,c
  8715  002954  D037               	goto	u12570
  8716  002956  D7F0               	goto	l10675
  8717  002958                     l10681:
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;lcd.c: 138: LCD_send_data(*str++);
  8721  002958  C060  FFF6         	movff	LCD_send_string@str,tblptrl
  8722  00295C  C061  FFF7         	movff	LCD_send_string@str+1,tblptrh
  8723  002960  6AF8               	clrf	tblptru,c
  8724  002962  0E05               	movlw	(high __ramtop+-1)
  8725  002964  64F7               	cpfsgt	tblptrh,c
  8726  002966  D003               	bra	u12557
  8727  002968  0008               	tblrd		*
  8728  00296A  50F5               	movf	tablat,w,c
  8729  00296C  D005               	bra	u12550
  8730  00296E                     u12557:
  8731  00296E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8732  002972  CFF7 FFEA          	movff	tblptrh,fsr0h
  8733  002976  50EF               	movf	indf0,w,c
  8734  002978                     u12550:
  8735  002978  EC8F  F029         	call	_LCD_send_data
  8736  00297C  0100               	movlb	0	; () banked
  8737  00297E  4B60               	infsnz	LCD_send_string@str& (0+255),f,b
  8738  002980  2B61               	incf	(LCD_send_string@str+1)& (0+255),f,b
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;lcd.c: 139: if (delay == -1) _delay((unsigned long)((500)*(8000000/4000000.0)));
  8742  002982  2967               	incf	LCD_send_string@delay& (0+255),w,b
  8743  002984  E108               	bnz	l10689
  8744  002986  2968               	incf	(LCD_send_string@delay+1)& (0+255),w,b
  8745  002988  A4D8               	btfss	status,2,c
  8746  00298A  D005               	goto	l10689
  8747                           
  8748                           ; BSR set to: 0
  8749  00298C  0EC8               	movlw	200
  8750  00298E                     u14197:
  8751  00298E  D000               	nop2	
  8752  002990  2EE8               	decfsz	wreg,f,c
  8753  002992  D7FD               	bra	u14197
  8754  002994  D017               	goto	u12570
  8755  002996                     l10689:
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;lcd.c: 140: else for(i = 0; i < delay; i++) _delay((unsigned long)((1)*(8000000/4000.0)
      +                          ));
  8759  002996  0E00               	movlw	0
  8760  002998  6F6B               	movwf	(LCD_send_string@i+1)& (0+255),b
  8761  00299A  0E00               	movlw	0
  8762  00299C  6F6A               	movwf	LCD_send_string@i& (0+255),b
  8763  00299E  D00C               	goto	l1495
  8764  0029A0                     l10691:
  8765                           
  8766                           ; BSR set to: 0
  8767  0029A0  0E03               	movlw	3
  8768  0029A2  0100               	movlb	0	; () banked
  8769  0029A4  6F63               	movwf	??_LCD_send_string& (0+255),b
  8770  0029A6  0E97               	movlw	151
  8771  0029A8                     u14207:
  8772  0029A8  2EE8               	decfsz	wreg,f,c
  8773  0029AA  D7FE               	bra	u14207
  8774  0029AC  2F63               	decfsz	??_LCD_send_string& (0+255),f,b
  8775  0029AE  D7FC               	bra	u14207
  8776  0029B0  D000               	nop2	
  8777  0029B2  0100               	movlb	0	; () banked
  8778  0029B4  4B6A               	infsnz	LCD_send_string@i& (0+255),f,b
  8779  0029B6  2B6B               	incf	(LCD_send_string@i+1)& (0+255),f,b
  8780  0029B8                     l1495:
  8781                           
  8782                           ; BSR set to: 0
  8783  0029B8  5167               	movf	LCD_send_string@delay& (0+255),w,b
  8784  0029BA  5D6A               	subwf	LCD_send_string@i& (0+255),w,b
  8785  0029BC  5168               	movf	(LCD_send_string@delay+1)& (0+255),w,b
  8786  0029BE  596B               	subwfb	(LCD_send_string@i+1)& (0+255),w,b
  8787  0029C0  A0D8               	btfss	status,0,c
  8788  0029C2  D7EE               	goto	l10691
  8789  0029C4                     u12570:
  8790  0029C4  C060  FFF6         	movff	LCD_send_string@str,tblptrl
  8791  0029C8  C061  FFF7         	movff	LCD_send_string@str+1,tblptrh
  8792  0029CC  6AF8               	clrf	tblptru,c
  8793  0029CE  0E05               	movlw	(high __ramtop+-1)
  8794  0029D0  64F7               	cpfsgt	tblptrh,c
  8795  0029D2  D003               	bra	u12587
  8796  0029D4  0008               	tblrd		*
  8797  0029D6  50F5               	movf	tablat,w,c
  8798  0029D8  D005               	bra	u12580
  8799  0029DA                     u12587:
  8800  0029DA  CFF6 FFE9          	movff	tblptrl,fsr0l
  8801  0029DE  CFF7 FFEA          	movff	tblptrh,fsr0h
  8802  0029E2  50EF               	movf	indf0,w,c
  8803  0029E4                     u12580:
  8804  0029E4  0900               	iorlw	0
  8805  0029E6  B4D8               	btfsc	status,2,c
  8806  0029E8  D01B               	goto	u12620
  8807  0029EA  C060  FFF6         	movff	LCD_send_string@str,tblptrl
  8808  0029EE  C061  FFF7         	movff	LCD_send_string@str+1,tblptrh
  8809  0029F2  6AF8               	clrf	tblptru,c
  8810  0029F4  0E05               	movlw	(high __ramtop+-1)
  8811  0029F6  64F7               	cpfsgt	tblptrh,c
  8812  0029F8  D003               	bra	u12607
  8813  0029FA  0008               	tblrd		*
  8814  0029FC  50F5               	movf	tablat,w,c
  8815  0029FE  D005               	bra	u12600
  8816  002A00                     u12607:
  8817  002A00  CFF6 FFE9          	movff	tblptrl,fsr0l
  8818  002A04  CFF7 FFEA          	movff	tblptrh,fsr0h
  8819  002A08  50EF               	movf	indf0,w,c
  8820  002A0A                     u12600:
  8821  002A0A  0A0A               	xorlw	10
  8822  002A0C  B4D8               	btfsc	status,2,c
  8823  002A0E  D008               	goto	u12620
  8824  002A10  0100               	movlb	0	; () banked
  8825  002A12  2B66               	incf	LCD_send_string@col& (0+255),f,b
  8826  002A14  0566               	decf	LCD_send_string@col& (0+255),w,b
  8827  002A16  6F63               	movwf	??_LCD_send_string& (0+255),b
  8828  002A18  5038               	movf	__LCD_cols,w,c
  8829  002A1A  5D63               	subwf	??_LCD_send_string& (0+255),w,b
  8830  002A1C  A0D8               	btfss	status,0,c
  8831  002A1E  D79C               	goto	l10681
  8832  002A20                     u12620:
  8833                           
  8834                           ;lcd.c: 141: };lcd.c: 142: if (col >= _LCD_cols) while (*str && *str != '\n') *str++;
  8835  002A20  5038               	movf	__LCD_cols,w,c
  8836  002A22  0100               	movlb	0	; () banked
  8837  002A24  5D66               	subwf	LCD_send_string@col& (0+255),w,b
  8838  002A26  B0D8               	btfsc	status,0,c
  8839  002A28  D004               	goto	l10707
  8840  002A2A  D029               	goto	u12670
  8841  002A2C                     l10705:
  8842  002A2C  0100               	movlb	0	; () banked
  8843  002A2E  4B60               	infsnz	LCD_send_string@str& (0+255),f,b
  8844  002A30  2B61               	incf	(LCD_send_string@str+1)& (0+255),f,b
  8845  002A32                     l10707:
  8846                           
  8847                           ; BSR set to: 0
  8848  002A32  C060  FFF6         	movff	LCD_send_string@str,tblptrl
  8849  002A36  C061  FFF7         	movff	LCD_send_string@str+1,tblptrh
  8850  002A3A  6AF8               	clrf	tblptru,c
  8851  002A3C  0E05               	movlw	(high __ramtop+-1)
  8852  002A3E  64F7               	cpfsgt	tblptrh,c
  8853  002A40  D003               	bra	u12647
  8854  002A42  0008               	tblrd		*
  8855  002A44  50F5               	movf	tablat,w,c
  8856  002A46  D005               	bra	u12640
  8857  002A48                     u12647:
  8858  002A48  CFF6 FFE9          	movff	tblptrl,fsr0l
  8859  002A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
  8860  002A50  50EF               	movf	indf0,w,c
  8861  002A52                     u12640:
  8862  002A52  0900               	iorlw	0
  8863  002A54  B4D8               	btfsc	status,2,c
  8864  002A56  D013               	goto	u12670
  8865  002A58  C060  FFF6         	movff	LCD_send_string@str,tblptrl
  8866  002A5C  C061  FFF7         	movff	LCD_send_string@str+1,tblptrh
  8867  002A60  6AF8               	clrf	tblptru,c
  8868  002A62  0E05               	movlw	(high __ramtop+-1)
  8869  002A64  64F7               	cpfsgt	tblptrh,c
  8870  002A66  D003               	bra	u12667
  8871  002A68  0008               	tblrd		*
  8872  002A6A  50F5               	movf	tablat,w,c
  8873  002A6C  D005               	bra	u12660
  8874  002A6E                     u12667:
  8875  002A6E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8876  002A72  CFF7 FFEA          	movff	tblptrh,fsr0h
  8877  002A76  50EF               	movf	indf0,w,c
  8878  002A78                     u12660:
  8879  002A78  0A0A               	xorlw	10
  8880  002A7A  A4D8               	btfss	status,2,c
  8881  002A7C  D7D7               	goto	l10705
  8882  002A7E                     u12670:
  8883                           
  8884                           ;lcd.c: 143: if (*str == '\n') *str++;
  8885  002A7E  C060  FFF6         	movff	LCD_send_string@str,tblptrl
  8886  002A82  C061  FFF7         	movff	LCD_send_string@str+1,tblptrh
  8887  002A86  6AF8               	clrf	tblptru,c
  8888  002A88  0E05               	movlw	(high __ramtop+-1)
  8889  002A8A  64F7               	cpfsgt	tblptrh,c
  8890  002A8C  D003               	bra	u12687
  8891  002A8E  0008               	tblrd		*
  8892  002A90  50F5               	movf	tablat,w,c
  8893  002A92  D005               	bra	u12680
  8894  002A94                     u12687:
  8895  002A94  CFF6 FFE9          	movff	tblptrl,fsr0l
  8896  002A98  CFF7 FFEA          	movff	tblptrh,fsr0h
  8897  002A9C  50EF               	movf	indf0,w,c
  8898  002A9E                     u12680:
  8899  002A9E  0A0A               	xorlw	10
  8900  002AA0  A4D8               	btfss	status,2,c
  8901  002AA2  D003               	goto	l10715
  8902  002AA4  0100               	movlb	0	; () banked
  8903  002AA6  4B60               	infsnz	LCD_send_string@str& (0+255),f,b
  8904  002AA8  2B61               	incf	(LCD_send_string@str+1)& (0+255),f,b
  8905  002AAA                     l10715:
  8906  002AAA  C060  FFF6         	movff	LCD_send_string@str,tblptrl
  8907  002AAE  C061  FFF7         	movff	LCD_send_string@str+1,tblptrh
  8908  002AB2  6AF8               	clrf	tblptru,c
  8909  002AB4  0E05               	movlw	(high __ramtop+-1)
  8910  002AB6  64F7               	cpfsgt	tblptrh,c
  8911  002AB8  D003               	bra	u12707
  8912  002ABA  0008               	tblrd		*
  8913  002ABC  50F5               	movf	tablat,w,c
  8914  002ABE  D005               	bra	u12700
  8915  002AC0                     u12707:
  8916  002AC0  CFF6 FFE9          	movff	tblptrl,fsr0l
  8917  002AC4  CFF7 FFEA          	movff	tblptrh,fsr0h
  8918  002AC8  50EF               	movf	indf0,w,c
  8919  002ACA                     u12700:
  8920  002ACA  0900               	iorlw	0
  8921  002ACC  B4D8               	btfsc	status,2,c
  8922  002ACE  0012               	return	
  8923  002AD0  0100               	movlb	0	; () banked
  8924  002AD2  5162               	movf	LCD_send_string@line& (0+255),w,b
  8925  002AD4  B4D8               	btfsc	status,2,c
  8926  002AD6  0012               	return	
  8927                           
  8928                           ; BSR set to: 0
  8929  002AD8  5162               	movf	LCD_send_string@line& (0+255),w,b
  8930  002ADA  0101               	movlb	1	; () banked
  8931  002ADC  5D47               	subwf	__LCD_rows& (0+255),w,b
  8932  002ADE  A0D8               	btfss	status,0,c
  8933  002AE0  0012               	return	
  8934  002AE2  D5AF               	goto	l10625
  8935  002AE4                     __end_of_LCD_send_string:
  8936                           	opt callstack 0
  8937                           
  8938 ;; *************** function _LCD_send_data *****************
  8939 ;; Defined at:
  8940 ;;		line 78 in file "lcd.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;  data            1    wreg     unsigned char 
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;  data            1   29[COMRAM] unsigned char 
  8945 ;;  nibble_upper    1   31[COMRAM] unsigned char 
  8946 ;;  nibble_lower    1   30[COMRAM] unsigned char 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  1    wreg      void 
  8949 ;; Registers used:
  8950 ;;		wreg, status,2, status,0, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8956 ;;      Params:         0       0       0       0       0       0       0
  8957 ;;      Locals:         3       0       0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0
  8959 ;;      Totals:         3       0       0       0       0       0       0
  8960 ;;Total ram usage:        3 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    8
  8963 ;; This function calls:
  8964 ;;		_I2C_select
  8965 ;;		_I2C_start
  8966 ;;		_I2C_stop
  8967 ;;		_I2C_write
  8968 ;; This function is called by:
  8969 ;;		_LCD_send_string
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           	psect	text31
  8974  00531E                     __ptext31:
  8975                           	opt callstack 0
  8976  00531E                     _LCD_send_data:
  8977                           	opt callstack 19
  8978                           
  8979                           ;incstack = 0
  8980                           ;LCD_send_data@data stored from wreg
  8981  00531E  6E1E               	movwf	LCD_send_data@data,c
  8982                           
  8983                           ;lcd.c: 79: unsigned char nibble_lower, nibble_upper;;lcd.c: 80: nibble_lower = (data<<4
      +                          ) & 0xF0;
  8984  005320  381E               	swapf	LCD_send_data@data,w,c
  8985  005322  0BF0               	andlw	240
  8986  005324  0BF0               	andlw	240
  8987  005326  6E1F               	movwf	LCD_send_data@nibble_lower,c
  8988                           
  8989                           ;lcd.c: 81: nibble_upper = data & 0xF0;
  8990  005328  501E               	movf	LCD_send_data@data,w,c
  8991  00532A  0BF0               	andlw	240
  8992  00532C  6E20               	movwf	LCD_send_data@nibble_upper,c
  8993                           
  8994                           ;lcd.c: 83: I2C_start();
  8995  00532E  EC7F  F02D         	call	_I2C_start	;wreg free
  8996                           
  8997                           ;lcd.c: 84: I2C_select(_LCD_address, 0x00);
  8998  005332  0E00               	movlw	0
  8999  005334  6E1C               	movwf	I2C_select@mode,c
  9000  005336  5039               	movf	__LCD_address,w,c
  9001  005338  EC42  F02D         	call	_I2C_select
  9002                           
  9003                           ;lcd.c: 86: I2C_write(nibble_upper | _LCD_backlight | 0b00000100 | 0b00000001);
  9004  00533C  5020               	movf	LCD_send_data@nibble_upper,w,c
  9005  00533E  1044               	iorwf	__LCD_backlight,w,c
  9006  005340  0905               	iorlw	5
  9007  005342  EC49  F02D         	call	_I2C_write
  9008                           
  9009                           ;lcd.c: 87: I2C_write(nibble_upper | _LCD_backlight | 0b00000001);
  9010  005346  5020               	movf	LCD_send_data@nibble_upper,w,c
  9011  005348  1044               	iorwf	__LCD_backlight,w,c
  9012  00534A  0901               	iorlw	1
  9013  00534C  EC49  F02D         	call	_I2C_write
  9014                           
  9015                           ;lcd.c: 89: I2C_write(nibble_lower | _LCD_backlight | 0b00000100 | 0b00000001);
  9016  005350  501F               	movf	LCD_send_data@nibble_lower,w,c
  9017  005352  1044               	iorwf	__LCD_backlight,w,c
  9018  005354  0905               	iorlw	5
  9019  005356  EC49  F02D         	call	_I2C_write
  9020                           
  9021                           ;lcd.c: 90: I2C_write(nibble_lower | _LCD_backlight | 0b00000001);
  9022  00535A  501F               	movf	LCD_send_data@nibble_lower,w,c
  9023  00535C  1044               	iorwf	__LCD_backlight,w,c
  9024  00535E  0901               	iorlw	1
  9025  005360  EC49  F02D         	call	_I2C_write
  9026                           
  9027                           ;lcd.c: 92: I2C_stop();
  9028  005364  EC7B  F02D         	call	_I2C_stop	;wreg free
  9029  005368  0012               	return		;funcret
  9030  00536A                     __end_of_LCD_send_data:
  9031                           	opt callstack 0
  9032                           
  9033 ;; *************** function _LCD_select_line *****************
  9034 ;; Defined at:
  9035 ;;		line 95 in file "lcd.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;  line            1    wreg     unsigned char 
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  line            1   32[COMRAM] unsigned char 
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  1    wreg      void 
  9042 ;; Registers used:
  9043 ;;		wreg, status,2, status,0, cstack
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9049 ;;      Params:         0       0       0       0       0       0       0
  9050 ;;      Locals:         1       0       0       0       0       0       0
  9051 ;;      Temps:          0       0       0       0       0       0       0
  9052 ;;      Totals:         1       0       0       0       0       0       0
  9053 ;;Total ram usage:        1 bytes
  9054 ;; Hardware stack levels used:    1
  9055 ;; Hardware stack levels required when called:    9
  9056 ;; This function calls:
  9057 ;;		_LCD_send_cmd
  9058 ;; This function is called by:
  9059 ;;		_LCD_send_string
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text32
  9064  00561A                     __ptext32:
  9065                           	opt callstack 0
  9066  00561A                     _LCD_select_line:
  9067                           	opt callstack 18
  9068                           
  9069                           ;incstack = 0
  9070                           ;LCD_select_line@line stored from wreg
  9071  00561A  6E21               	movwf	LCD_select_line@line,c
  9072                           
  9073                           ;lcd.c: 96: switch(line) {
  9074  00561C  D010               	goto	l10131
  9075  00561E                     l10121:
  9076                           
  9077                           ;lcd.c: 98: LCD_send_cmd(0xC0);
  9078  00561E  0EC0               	movlw	192
  9079  005620  ECFF  F029         	call	_LCD_send_cmd
  9080                           
  9081                           ;lcd.c: 99: break;
  9082  005624  0012               	return	
  9083  005626                     l10123:
  9084                           
  9085                           ;lcd.c: 101: LCD_send_cmd(0x94);
  9086  005626  0E94               	movlw	148
  9087  005628  ECFF  F029         	call	_LCD_send_cmd
  9088                           
  9089                           ;lcd.c: 102: break;
  9090  00562C  0012               	return	
  9091  00562E                     l10125:
  9092                           
  9093                           ;lcd.c: 104: LCD_send_cmd(0xD4);
  9094  00562E  0ED4               	movlw	212
  9095  005630  ECFF  F029         	call	_LCD_send_cmd
  9096                           
  9097                           ;lcd.c: 105: break;
  9098  005634  0012               	return	
  9099  005636                     l10127:
  9100                           
  9101                           ;lcd.c: 107: LCD_send_cmd(0x80);
  9102  005636  0E80               	movlw	128
  9103  005638  ECFF  F029         	call	_LCD_send_cmd
  9104                           
  9105                           ;lcd.c: 108: break;
  9106  00563C  0012               	return	
  9107  00563E                     l10131:
  9108  00563E  5021               	movf	LCD_select_line@line,w,c
  9109                           
  9110                           ; Switch size 1, requested type "simple"
  9111                           ; Number of cases is 3, Range of values is 2 to 4
  9112                           ; switch strategies available:
  9113                           ; Name         Instructions Cycles
  9114                           ; simple_byte           10     6 (average)
  9115                           ;	Chosen strategy is simple_byte
  9116  005640  0A02               	xorlw	2	; case 2
  9117  005642  B4D8               	btfsc	status,2,c
  9118  005644  D7EC               	goto	l10121
  9119  005646  0A01               	xorlw	1	; case 3
  9120  005648  B4D8               	btfsc	status,2,c
  9121  00564A  D7ED               	goto	l10123
  9122  00564C  0A07               	xorlw	7	; case 4
  9123  00564E  B4D8               	btfsc	status,2,c
  9124  005650  D7EE               	goto	l10125
  9125  005652  D7F1               	goto	l10127
  9126  005654                     __end_of_LCD_select_line:
  9127                           	opt callstack 0
  9128                           
  9129 ;; *************** function _LCD_clear *****************
  9130 ;; Defined at:
  9131 ;;		line 46 in file "lcd.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;		None
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;		None
  9136 ;; Return value:  Size  Location     Type
  9137 ;;                  1    wreg      void 
  9138 ;; Registers used:
  9139 ;;		wreg, status,2, status,0, cstack
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9145 ;;      Params:         0       0       0       0       0       0       0
  9146 ;;      Locals:         0       0       0       0       0       0       0
  9147 ;;      Temps:          2       0       0       0       0       0       0
  9148 ;;      Totals:         2       0       0       0       0       0       0
  9149 ;;Total ram usage:        2 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    9
  9152 ;; This function calls:
  9153 ;;		_LCD_send_cmd
  9154 ;; This function is called by:
  9155 ;;		_main
  9156 ;;		_azoTouchPollManual
  9157 ;;		_azoTouchPollAuto
  9158 ;;		_printOn
  9159 ;;		_printAuto
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           	psect	text33
  9164  0058FC                     __ptext33:
  9165                           	opt callstack 0
  9166  0058FC                     _LCD_clear:
  9167                           	opt callstack 19
  9168                           
  9169                           ;lcd.c: 47: LCD_send_cmd(0x01);
  9170                           
  9171                           ;incstack = 0
  9172  0058FC  0E01               	movlw	1
  9173  0058FE  ECFF  F029         	call	_LCD_send_cmd
  9174                           
  9175                           ;lcd.c: 48: LCD_send_cmd(0x02);
  9176  005902  0E02               	movlw	2
  9177  005904  ECFF  F029         	call	_LCD_send_cmd
  9178                           
  9179                           ;lcd.c: 49: _delay((unsigned long)((200)*(8000000/4000.0)));
  9180  005908  0E03               	movlw	3
  9181  00590A  6E22               	movwf	(??_LCD_clear+1)& (0+255),c
  9182  00590C  0E08               	movlw	8
  9183  00590E  6E21               	movwf	??_LCD_clear& (0+255),c
  9184  005910  0E77               	movlw	119
  9185  005912                     u14217:
  9186  005912  2EE8               	decfsz	wreg,f,c
  9187  005914  D7FE               	bra	u14217
  9188  005916  2E21               	decfsz	??_LCD_clear& (0+255),f,c
  9189  005918  D7FC               	bra	u14217
  9190  00591A  2E22               	decfsz	(??_LCD_clear+1)& (0+255),f,c
  9191  00591C  D7FA               	bra	u14217
  9192  00591E  F000               	nop	
  9193  005920  0012               	return		;funcret
  9194  005922                     __end_of_LCD_clear:
  9195                           	opt callstack 0
  9196                           
  9197 ;; *************** function ___lwtoft *****************
  9198 ;; Defined at:
  9199 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwtoft.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  c               2   33[COMRAM] unsigned int 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;		None
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  3   33[COMRAM] float 
  9206 ;; Registers used:
  9207 ;;		wreg, status,2, status,0, cstack
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9213 ;;      Params:         3       0       0       0       0       0       0
  9214 ;;      Locals:         0       0       0       0       0       0       0
  9215 ;;      Temps:          0       0       0       0       0       0       0
  9216 ;;      Totals:         3       0       0       0       0       0       0
  9217 ;;Total ram usage:        3 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    6
  9220 ;; This function calls:
  9221 ;;		___ftpack
  9222 ;; This function is called by:
  9223 ;;		_printAuto
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           	psect	text34
  9228  005948                     __ptext34:
  9229                           	opt callstack 0
  9230  005948                     ___lwtoft:
  9231                           	opt callstack 23
  9232                           
  9233                           ;incstack = 0
  9234  005948  C022  F01A         	movff	___lwtoft@c,___ftpack@arg
  9235  00594C  C023  F01B         	movff	___lwtoft@c+1,___ftpack@arg+1
  9236  005950  6A1C               	clrf	___ftpack@arg+2,c
  9237  005952  0E8E               	movlw	142
  9238  005954  6E1D               	movwf	___ftpack@exp,c
  9239  005956  0E00               	movlw	0
  9240  005958  6E1E               	movwf	___ftpack@sign,c
  9241  00595A  EC04  F025         	call	___ftpack	;wreg free
  9242  00595E  C01A  F022         	movff	?___ftpack,?___lwtoft
  9243  005962  C01B  F023         	movff	?___ftpack+1,?___lwtoft+1
  9244  005966  C01C  F024         	movff	?___ftpack+2,?___lwtoft+2
  9245  00596A  0012               	return		;funcret
  9246  00596C                     __end_of___lwtoft:
  9247                           	opt callstack 0
  9248                           
  9249 ;; *************** function _EUSART1_GetSensorsBool *****************
  9250 ;; Defined at:
  9251 ;;		line 608 in file "mcc_generated_files/eusart1.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;		None
  9254 ;; Auto vars:     Size  Location     Type
  9255 ;;		None
  9256 ;; Return value:  Size  Location     Type
  9257 ;;                  1    wreg      unsigned char 
  9258 ;; Registers used:
  9259 ;;		wreg, status,2
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9265 ;;      Params:         0       0       0       0       0       0       0
  9266 ;;      Locals:         0       0       0       0       0       0       0
  9267 ;;      Temps:          0       0       0       0       0       0       0
  9268 ;;      Totals:         0       0       0       0       0       0       0
  9269 ;;Total ram usage:        0 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; Hardware stack levels required when called:    5
  9272 ;; This function calls:
  9273 ;;		Nothing
  9274 ;; This function is called by:
  9275 ;;		_main
  9276 ;;		_printAuto
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           	psect	text35
  9281  005B06                     __ptext35:
  9282                           	opt callstack 0
  9283  005B06                     _EUSART1_GetSensorsBool:
  9284                           	opt callstack 24
  9285                           
  9286                           ;eusart1.c: 610: return sensorsRead;
  9287                           
  9288                           ;incstack = 0
  9289  005B06  0101               	movlb	1	; () banked
  9290  005B08  514A               	movf	_sensorsRead& (0+255),w,b
  9291                           
  9292                           ; BSR set to: 1
  9293  005B0A  0012               	return		;funcret
  9294  005B0C                     __end_of_EUSART1_GetSensorsBool:
  9295                           	opt callstack 0
  9296                           
  9297 ;; *************** function _EUSART1_GetAutoModeBool *****************
  9298 ;; Defined at:
  9299 ;;		line 618 in file "mcc_generated_files/eusart1.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      unsigned char 
  9306 ;; Registers used:
  9307 ;;		wreg, status,2
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9313 ;;      Params:         0       0       0       0       0       0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0
  9315 ;;      Temps:          0       0       0       0       0       0       0
  9316 ;;      Totals:         0       0       0       0       0       0       0
  9317 ;;Total ram usage:        0 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    5
  9320 ;; This function calls:
  9321 ;;		Nothing
  9322 ;; This function is called by:
  9323 ;;		_printAuto
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           	psect	text36
  9328  005B0C                     __ptext36:
  9329                           	opt callstack 0
  9330  005B0C                     _EUSART1_GetAutoModeBool:
  9331                           	opt callstack 24
  9332                           
  9333                           ;eusart1.c: 620: return autoMode;
  9334                           
  9335                           ; BSR set to: 1
  9336                           ;incstack = 0
  9337  005B0C  0101               	movlb	1	; () banked
  9338  005B0E  5149               	movf	_autoMode& (0+255),w,b
  9339                           
  9340                           ; BSR set to: 1
  9341  005B10  0012               	return		;funcret
  9342  005B12                     __end_of_EUSART1_GetAutoModeBool:
  9343                           	opt callstack 0
  9344                           
  9345 ;; *************** function _ADC_GetConversion *****************
  9346 ;; Defined at:
  9347 ;;		line 108 in file "mcc_generated_files/adc.c"
  9348 ;; Parameters:    Size  Location     Type
  9349 ;;  channel         1    wreg     enum E5846
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;  channel         1   29[COMRAM] enum E5846
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  2   25[COMRAM] unsigned int 
  9354 ;; Registers used:
  9355 ;;		wreg, status,2, status,0
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9361 ;;      Params:         2       0       0       0       0       0       0
  9362 ;;      Locals:         1       0       0       0       0       0       0
  9363 ;;      Temps:          2       0       0       0       0       0       0
  9364 ;;      Totals:         5       0       0       0       0       0       0
  9365 ;;Total ram usage:        5 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    5
  9368 ;; This function calls:
  9369 ;;		Nothing
  9370 ;; This function is called by:
  9371 ;;		_printAuto
  9372 ;; This function uses a non-reentrant model
  9373 ;;
  9374                           
  9375                           	psect	text37
  9376  005800                     __ptext37:
  9377                           	opt callstack 0
  9378  005800                     _ADC_GetConversion:
  9379                           	opt callstack 24
  9380                           
  9381                           ; BSR set to: 1
  9382                           ;incstack = 0
  9383                           ;ADC_GetConversion@channel stored from wreg
  9384  005800  6E1E               	movwf	ADC_GetConversion@channel,c
  9385                           
  9386                           ;adc.c: 111: ADCON0bits.CHS = channel;
  9387  005802  C01E  F01C         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  9388  005806  461C               	rlncf	??_ADC_GetConversion,f,c
  9389  005808  461C               	rlncf	??_ADC_GetConversion,f,c
  9390  00580A  50C2               	movf	4034,w,c	;volatile
  9391  00580C  181C               	xorwf	??_ADC_GetConversion,w,c
  9392  00580E  0B83               	andlw	-125
  9393  005810  181C               	xorwf	??_ADC_GetConversion,w,c
  9394  005812  6EC2               	movwf	4034,c	;volatile
  9395                           
  9396                           ;adc.c: 114: ADCON0bits.ADON = 1;
  9397  005814  80C2               	bsf	4034,0,c	;volatile
  9398                           
  9399                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
  9400  005816  82C2               	bsf	4034,1,c	;volatile
  9401  005818                     l32:
  9402  005818  B2C2               	btfsc	4034,1,c	;volatile
  9403  00581A  D7FE               	goto	l32
  9404                           
  9405                           ;adc.c: 122: };adc.c: 125: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  9406  00581C  50C4               	movf	4036,w,c	;volatile
  9407  00581E  6E1D               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  9408  005820  6A1C               	clrf	??_ADC_GetConversion& (0+255),c
  9409  005822  50C3               	movf	4035,w,c	;volatile
  9410  005824  241C               	addwf	??_ADC_GetConversion,w,c
  9411  005826  6E1A               	movwf	?_ADC_GetConversion,c
  9412  005828  0E00               	movlw	0
  9413  00582A  201D               	addwfc	??_ADC_GetConversion+1,w,c
  9414  00582C  6E1B               	movwf	?_ADC_GetConversion+1,c
  9415  00582E  0012               	return		;funcret
  9416  005830                     __end_of_ADC_GetConversion:
  9417                           	opt callstack 0
  9418                           
  9419 ;; *************** function _initialiseTCP *****************
  9420 ;; Defined at:
  9421 ;;		line 778 in file "main.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;		None
  9424 ;; Auto vars:     Size  Location     Type
  9425 ;;		None
  9426 ;; Return value:  Size  Location     Type
  9427 ;;                  1    wreg      void 
  9428 ;; Registers used:
  9429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9430 ;; Tracked objects:
  9431 ;;		On entry : 0/0
  9432 ;;		On exit  : 0/0
  9433 ;;		Unchanged: 0/0
  9434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9435 ;;      Params:         0       0       0       0       0       0       0
  9436 ;;      Locals:         0       0       0       0       0       0       0
  9437 ;;      Temps:          0       2       0       0       0       0       0
  9438 ;;      Totals:         0       2       0       0       0       0       0
  9439 ;;Total ram usage:        2 bytes
  9440 ;; Hardware stack levels used:    1
  9441 ;; Hardware stack levels required when called:   10
  9442 ;; This function calls:
  9443 ;;		_EUSART1_GetUnitTestCounter
  9444 ;;		_TMR3_StartTimer
  9445 ;;		_printf
  9446 ;; This function is called by:
  9447 ;;		_main
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           	psect	text38
  9452  003E40                     __ptext38:
  9453                           	opt callstack 0
  9454  003E40                     _initialiseTCP:
  9455                           	opt callstack 20
  9456                           
  9457                           ;main.c: 780: printf("AT\r\n");
  9458                           
  9459                           ;incstack = 0
  9460  003E40  0EF0               	movlw	low STR_29
  9461  003E42  0100               	movlb	0	; () banked
  9462  003E44  6FC9               	movwf	printf@f& (0+255),b
  9463  003E46  0E7F               	movlw	high STR_29
  9464  003E48  6FCA               	movwf	(printf@f+1)& (0+255),b
  9465  003E4A  EC2A  F02B         	call	_printf	;wreg free
  9466  003E4E                     l11291:
  9467  003E4E  EC54  F02D         	call	_EUSART1_GetUnitTestCounter	;wreg free
  9468  003E52  041A               	decf	?_EUSART1_GetUnitTestCounter,w,c
  9469  003E54  101B               	iorwf	?_EUSART1_GetUnitTestCounter+1,w,c
  9470  003E56  A4D8               	btfss	status,2,c
  9471  003E58  D7FA               	goto	l11291
  9472                           
  9473                           ;main.c: 782: };main.c: 783: printf("AT+CIPMUX=1\r\n");
  9474  003E5A  0E8D               	movlw	low STR_30
  9475  003E5C  0100               	movlb	0	; () banked
  9476  003E5E  6FC9               	movwf	printf@f& (0+255),b
  9477  003E60  0E7F               	movlw	high STR_30
  9478  003E62  6FCA               	movwf	(printf@f+1)& (0+255),b
  9479  003E64  EC2A  F02B         	call	_printf	;wreg free
  9480  003E68                     l11295:
  9481  003E68  EC54  F02D         	call	_EUSART1_GetUnitTestCounter	;wreg free
  9482  003E6C  0E02               	movlw	2
  9483  003E6E  181A               	xorwf	?_EUSART1_GetUnitTestCounter,w,c
  9484  003E70  101B               	iorwf	?_EUSART1_GetUnitTestCounter+1,w,c
  9485  003E72  A4D8               	btfss	status,2,c
  9486  003E74  D7F9               	goto	l11295
  9487                           
  9488                           ;main.c: 785: };main.c: 786: printf("AT+CIPSERVER=1,222\r\n");
  9489  003E76  0E16               	movlw	low STR_7
  9490  003E78  0100               	movlb	0	; () banked
  9491  003E7A  6FC9               	movwf	printf@f& (0+255),b
  9492  003E7C  0E7F               	movlw	high STR_7
  9493  003E7E  6FCA               	movwf	(printf@f+1)& (0+255),b
  9494  003E80  EC2A  F02B         	call	_printf	;wreg free
  9495                           
  9496                           ;main.c: 787: _delay((unsigned long)((500)*(8000000/4000.0)));
  9497  003E84  0E06               	movlw	6
  9498  003E86  0100               	movlb	0	; () banked
  9499  003E88  6FDA               	movwf	(??_initialiseTCP+1)& (0+255),b
  9500  003E8A  0E13               	movlw	19
  9501  003E8C  6FD9               	movwf	??_initialiseTCP& (0+255),b
  9502  003E8E  0EAD               	movlw	173
  9503  003E90                     u14227:
  9504  003E90  2EE8               	decfsz	wreg,f,c
  9505  003E92  D7FE               	bra	u14227
  9506  003E94  2FD9               	decfsz	??_initialiseTCP& (0+255),f,b
  9507  003E96  D7FC               	bra	u14227
  9508  003E98  2FDA               	decfsz	(??_initialiseTCP+1)& (0+255),f,b
  9509  003E9A  D7FA               	bra	u14227
  9510  003E9C  D000               	nop2	
  9511                           
  9512                           ;main.c: 788: while (EUSART1_GetUnitTestCounter() != 3) {
  9513  003E9E  D02F               	goto	l11311
  9514  003EA0                     l11301:
  9515                           
  9516                           ;main.c: 789: _delay((unsigned long)((1000)*(8000000/4000.0)));
  9517  003EA0  0E0B               	movlw	11
  9518  003EA2  0100               	movlb	0	; () banked
  9519  003EA4  6FDA               	movwf	(??_initialiseTCP+1)& (0+255),b
  9520  003EA6  0E26               	movlw	38
  9521  003EA8  6FD9               	movwf	??_initialiseTCP& (0+255),b
  9522  003EAA  0E5D               	movlw	93
  9523  003EAC                     u14237:
  9524  003EAC  2EE8               	decfsz	wreg,f,c
  9525  003EAE  D7FE               	bra	u14237
  9526  003EB0  2FD9               	decfsz	??_initialiseTCP& (0+255),f,b
  9527  003EB2  D7FC               	bra	u14237
  9528  003EB4  2FDA               	decfsz	(??_initialiseTCP+1)& (0+255),f,b
  9529  003EB6  D7FA               	bra	u14237
  9530  003EB8  D000               	nop2	
  9531                           
  9532                           ;main.c: 790: if (EUSART1_GetUnitTestCounter() != 3) {
  9533  003EBA  EC54  F02D         	call	_EUSART1_GetUnitTestCounter	;wreg free
  9534  003EBE  0E03               	movlw	3
  9535  003EC0  181A               	xorwf	?_EUSART1_GetUnitTestCounter,w,c
  9536  003EC2  101B               	iorwf	?_EUSART1_GetUnitTestCounter+1,w,c
  9537  003EC4  B4D8               	btfsc	status,2,c
  9538  003EC6  D01B               	goto	l11311
  9539                           
  9540                           ;main.c: 792: _delay((unsigned long)((100)*(8000000/4000.0)));
  9541  003EC8  0E02               	movlw	2
  9542  003ECA  0100               	movlb	0	; () banked
  9543  003ECC  6FDA               	movwf	(??_initialiseTCP+1)& (0+255),b
  9544  003ECE  0E04               	movlw	4
  9545  003ED0  6FD9               	movwf	??_initialiseTCP& (0+255),b
  9546  003ED2  0EBA               	movlw	186
  9547  003ED4                     u14247:
  9548  003ED4  2EE8               	decfsz	wreg,f,c
  9549  003ED6  D7FE               	bra	u14247
  9550  003ED8  2FD9               	decfsz	??_initialiseTCP& (0+255),f,b
  9551  003EDA  D7FC               	bra	u14247
  9552  003EDC  2FDA               	decfsz	(??_initialiseTCP+1)& (0+255),f,b
  9553  003EDE  D7FA               	bra	u14247
  9554  003EE0  F000               	nop	
  9555                           
  9556                           ;main.c: 793: printf("AT+CIPMUX=1\r\n");
  9557  003EE2  0E8D               	movlw	low STR_30
  9558  003EE4  0100               	movlb	0	; () banked
  9559  003EE6  6FC9               	movwf	printf@f& (0+255),b
  9560  003EE8  0E7F               	movlw	high STR_30
  9561  003EEA  6FCA               	movwf	(printf@f+1)& (0+255),b
  9562  003EEC  EC2A  F02B         	call	_printf	;wreg free
  9563                           
  9564                           ;main.c: 794: printf("AT+CIPSERVER=1,222\r\n");
  9565  003EF0  0E16               	movlw	low STR_7
  9566  003EF2  0100               	movlb	0	; () banked
  9567  003EF4  6FC9               	movwf	printf@f& (0+255),b
  9568  003EF6  0E7F               	movlw	high STR_7
  9569  003EF8  6FCA               	movwf	(printf@f+1)& (0+255),b
  9570  003EFA  EC2A  F02B         	call	_printf	;wreg free
  9571  003EFE                     l11311:
  9572  003EFE  EC54  F02D         	call	_EUSART1_GetUnitTestCounter	;wreg free
  9573  003F02  0E03               	movlw	3
  9574  003F04  181A               	xorwf	?_EUSART1_GetUnitTestCounter,w,c
  9575  003F06  101B               	iorwf	?_EUSART1_GetUnitTestCounter+1,w,c
  9576  003F08  A4D8               	btfss	status,2,c
  9577  003F0A  D7CA               	goto	l11301
  9578                           
  9579                           ;main.c: 795: };main.c: 796: };main.c: 797: _delay((unsigned long)((200)*(8000000/4000.0
      +                          )));
  9580  003F0C  0E03               	movlw	3
  9581  003F0E  0100               	movlb	0	; () banked
  9582  003F10  6FDA               	movwf	(??_initialiseTCP+1)& (0+255),b
  9583  003F12  0E08               	movlw	8
  9584  003F14  6FD9               	movwf	??_initialiseTCP& (0+255),b
  9585  003F16  0E77               	movlw	119
  9586  003F18                     u14257:
  9587  003F18  2EE8               	decfsz	wreg,f,c
  9588  003F1A  D7FE               	bra	u14257
  9589  003F1C  2FD9               	decfsz	??_initialiseTCP& (0+255),f,b
  9590  003F1E  D7FC               	bra	u14257
  9591  003F20  2FDA               	decfsz	(??_initialiseTCP+1)& (0+255),f,b
  9592  003F22  D7FA               	bra	u14257
  9593                           
  9594                           ;main.c: 798: printf("AT+CIFSR\r\n");
  9595  003F24  0EB4               	movlw	low STR_34
  9596  003F26  0100               	movlb	0	; () banked
  9597  003F28  6FC9               	movwf	printf@f& (0+255),b
  9598  003F2A  0E7F               	movlw	high STR_34
  9599  003F2C  6FCA               	movwf	(printf@f+1)& (0+255),b
  9600  003F2E  EC2A  F02B         	call	_printf	;wreg free
  9601                           
  9602                           ;main.c: 800: _delay((unsigned long)((500)*(8000000/4000.0)));
  9603  003F32  0E06               	movlw	6
  9604  003F34  0100               	movlb	0	; () banked
  9605  003F36  6FDA               	movwf	(??_initialiseTCP+1)& (0+255),b
  9606  003F38  0E13               	movlw	19
  9607  003F3A  6FD9               	movwf	??_initialiseTCP& (0+255),b
  9608  003F3C  0EAD               	movlw	173
  9609  003F3E                     u14267:
  9610  003F3E  2EE8               	decfsz	wreg,f,c
  9611  003F40  D7FE               	bra	u14267
  9612  003F42  2FD9               	decfsz	??_initialiseTCP& (0+255),f,b
  9613  003F44  D7FC               	bra	u14267
  9614  003F46  2FDA               	decfsz	(??_initialiseTCP+1)& (0+255),f,b
  9615  003F48  D7FA               	bra	u14267
  9616  003F4A  D000               	nop2	
  9617                           
  9618                           ;main.c: 801: printf("AT+CIPMUX=1\r\n");
  9619  003F4C  0E8D               	movlw	low STR_30
  9620  003F4E  0100               	movlb	0	; () banked
  9621  003F50  6FC9               	movwf	printf@f& (0+255),b
  9622  003F52  0E7F               	movlw	high STR_30
  9623  003F54  6FCA               	movwf	(printf@f+1)& (0+255),b
  9624  003F56  EC2A  F02B         	call	_printf	;wreg free
  9625                           
  9626                           ;main.c: 802: printf("AT+CIPSERVER=1,222\r\n");
  9627  003F5A  0E16               	movlw	low STR_7
  9628  003F5C  0100               	movlb	0	; () banked
  9629  003F5E  6FC9               	movwf	printf@f& (0+255),b
  9630  003F60  0E7F               	movlw	high STR_7
  9631  003F62  6FCA               	movwf	(printf@f+1)& (0+255),b
  9632  003F64  EC2A  F02B         	call	_printf	;wreg free
  9633                           
  9634                           ;main.c: 804: TMR3_StartTimer();
  9635  003F68  EC91  F02D         	call	_TMR3_StartTimer	;wreg free
  9636  003F6C  0012               	return		;funcret
  9637  003F6E                     __end_of_initialiseTCP:
  9638                           	opt callstack 0
  9639                           
  9640 ;; *************** function _printf *****************
  9641 ;; Defined at:
  9642 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\printf.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;  f               2  105[BANK0 ] PTR const unsigned char 
  9645 ;;		 -> STR_36(21), STR_35(14), STR_34(11), STR_33(21), 
  9646 ;;		 -> STR_32(14), STR_31(21), STR_30(14), STR_29(5), 
  9647 ;;		 -> STR_9(34), STR_8(18), STR_7(21), 
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;  pb              4    2[BANK1 ] struct __prbuf
  9650 ;;  ap              2    0[BANK1 ] PTR void [1]
  9651 ;;		 -> ?_sprintf(2), ?_printf(2), 
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  2  105[BANK0 ] int 
  9654 ;; Registers used:
  9655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9661 ;;      Params:         0      16       0       0       0       0       0
  9662 ;;      Locals:         0       0       6       0       0       0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0
  9664 ;;      Totals:         0      16       6       0       0       0       0
  9665 ;;Total ram usage:       22 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    9
  9668 ;; This function calls:
  9669 ;;		__doprnt
  9670 ;; This function is called by:
  9671 ;;		_main
  9672 ;;		_sendData
  9673 ;;		_initialiseTCP
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text39
  9678  005654                     __ptext39:
  9679                           	opt callstack 0
  9680  005654                     _printf:
  9681                           	opt callstack 20
  9682                           
  9683                           ;incstack = 0
  9684  005654  0E00               	movlw	0
  9685  005656  0101               	movlb	1	; () banked
  9686  005658  6F67               	movwf	printf@pb& (0+255),b
  9687  00565A  0E00               	movlw	0
  9688  00565C  6F68               	movwf	(printf@pb+1)& (0+255),b
  9689  00565E  0E9E               	movlw	low _putch
  9690  005660  6F69               	movwf	(printf@pb+2)& (0+255),b
  9691  005662  0E5A               	movlw	high _putch
  9692  005664  6F6A               	movwf	(printf@pb+3)& (0+255),b
  9693  005666  0ECB               	movlw	low (?_printf+2)
  9694  005668  6F65               	movwf	printf@ap& (0+255),b
  9695  00566A  0E00               	movlw	high (?_printf+2)
  9696  00566C  6F66               	movwf	(printf@ap+1)& (0+255),b
  9697                           
  9698                           ; BSR set to: 1
  9699                           ;	Return value of _printf is never used
  9700  00566E  0E67               	movlw	low printf@pb
  9701  005670  0100               	movlb	0	; () banked
  9702  005672  6FA6               	movwf	__doprnt@pb& (0+255),b
  9703  005674  0E01               	movlw	high printf@pb
  9704  005676  6FA7               	movwf	(__doprnt@pb+1)& (0+255),b
  9705  005678  C0C9  F0A8         	movff	printf@f,__doprnt@f
  9706  00567C  C0CA  F0A9         	movff	printf@f+1,__doprnt@f+1
  9707  005680  0E65               	movlw	low printf@ap
  9708  005682  6FAA               	movwf	__doprnt@ap& (0+255),b
  9709  005684  0E01               	movlw	high printf@ap
  9710  005686  6FAB               	movwf	(__doprnt@ap+1)& (0+255),b
  9711  005688  EC22  F009         	call	__doprnt	;wreg free
  9712  00568C  0012               	return		;funcret
  9713  00568E                     __end_of_printf:
  9714                           	opt callstack 0
  9715                           
  9716 ;; *************** function __doprnt *****************
  9717 ;; Defined at:
  9718 ;;		line 466 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;  pb              2   70[BANK0 ] PTR struct __prbuf
  9721 ;;		 -> sprintf@pb(4), printf@pb(4), 
  9722 ;;  f               2   72[BANK0 ] PTR const unsigned char 
  9723 ;;		 -> STR_36(21), STR_35(14), STR_34(11), STR_33(21), 
  9724 ;;		 -> STR_32(14), STR_31(21), STR_30(14), STR_29(5), 
  9725 ;;		 -> STR_27(5), STR_24(5), STR_22(5), STR_17(5), 
  9726 ;;		 -> STR_16(5), STR_9(34), STR_8(18), STR_7(21), 
  9727 ;;  ap              2   74[BANK0 ] PTR PTR void 
  9728 ;;		 -> sprintf@ap(2), printf@ap(2), 
  9729 ;; Auto vars:     Size  Location     Type
  9730 ;;  tmpval          4   93[BANK0 ] struct .
  9731 ;;  val             4   85[BANK0 ] unsigned long 
  9732 ;;  fval            3   99[BANK0 ] unsigned long 
  9733 ;;  cp              3    0        PTR const unsigned char 
  9734 ;;  prec            2  102[BANK0 ] int 
  9735 ;;  width           2   97[BANK0 ] int 
  9736 ;;  flag            2   91[BANK0 ] unsigned short 
  9737 ;;  eexp            2   89[BANK0 ] int 
  9738 ;;  len             2    0        unsigned int 
  9739 ;;  c               1  104[BANK0 ] unsigned char 
  9740 ;;  d               1    0        unsigned char 
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  2   70[BANK0 ] int 
  9743 ;; Registers used:
  9744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9750 ;;      Params:         0       6       0       0       0       0       0
  9751 ;;      Locals:         0      23       0       0       0       0       0
  9752 ;;      Temps:          0       6       0       0       0       0       0
  9753 ;;      Totals:         0      35       0       0       0       0       0
  9754 ;;Total ram usage:       35 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    8
  9757 ;; This function calls:
  9758 ;;		Absolute function
  9759 ;;		___awdiv
  9760 ;;		___ftadd
  9761 ;;		___ftge
  9762 ;;		___ftmul
  9763 ;;		___ftneg
  9764 ;;		___ftsub
  9765 ;;		___fttol
  9766 ;;		___lldiv
  9767 ;;		___llmod
  9768 ;;		___lltoft
  9769 ;;		___wmul
  9770 ;;		__div_to_l_
  9771 ;;		__tdiv_to_l_
  9772 ;;		_fround
  9773 ;;		_isdigit
  9774 ;;		_putch
  9775 ;;		_scale
  9776 ;; This function is called by:
  9777 ;;		_printf
  9778 ;;		_sprintf
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           	psect	text40
  9783  001244                     __ptext40:
  9784                           	opt callstack 0
  9785  001244                     __doprnt:
  9786                           	opt callstack 20
  9787                           
  9788                           ;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 512: int prec;;doprnt.c: 520
      +                          : unsigned short flag;;doprnt.c: 527: char d;;doprnt.c: 528: double fval;;doprnt.c: 529:
      +                           int eexp;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;doprnt.c: 537: double
      +                           integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned long val;;doprnt.c: 541: unsign
      +                          ed len;;doprnt.c: 542: const char * cp;;doprnt.c: 548: while((c = *f++)) {
  9789                           
  9790                           ;incstack = 0
  9791  001244  EF07  F010         	goto	l10477
  9792  001248                     l10135:
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;doprnt.c: 550: if(c != '%')
  9796  001248  0E25               	movlw	37
  9797  00124A  19C8               	xorwf	__doprnt@c& (0+255),w,b
  9798  00124C  B4D8               	btfsc	status,2,c
  9799  00124E  D02E               	goto	l10145
  9800                           
  9801                           ; BSR set to: 0
  9802  001250  EE20 F002          	lfsr	2,2
  9803  001254  51A6               	movf	__doprnt@pb& (0+255),w,b
  9804  001256  26D9               	addwf	fsr2l,f,c
  9805  001258  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
  9806  00125A  22DA               	addwfc	fsr2h,f,c
  9807  00125C  50DE               	movf	postinc2,w,c
  9808  00125E  10DE               	iorwf	postinc2,w,c
  9809  001260  B4D8               	btfsc	status,2,c
  9810  001262  D014               	goto	l10141
  9811                           
  9812                           ; BSR set to: 0
  9813  001264  EE20 F002          	lfsr	2,2
  9814  001268  51A6               	movf	__doprnt@pb& (0+255),w,b
  9815  00126A  26D9               	addwf	fsr2l,f,c
  9816  00126C  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
  9817  00126E  22DA               	addwfc	fsr2h,f,c
  9818  001270  D802               	call	u11398
  9819  001272  EF07  F010         	goto	l10477
  9820  001276                     u11398:
  9821  001276  0005               	push	
  9822  001278  6EFA               	movwf	pclath,c
  9823  00127A  50DE               	movf	postinc2,w,c
  9824  00127C  6EFD               	movwf	tosl,c
  9825  00127E  50DE               	movf	postinc2,w,c
  9826  001280  6EFE               	movwf	tosh,c
  9827  001282  50F8               	movf	tblptru,w,c
  9828  001284  6EFF               	movwf	tosu,c
  9829  001286  50FA               	movf	pclath,w,c
  9830  001288  51C8               	movf	__doprnt@c& (0+255),w,b
  9831  00128A  0012               	return		;indir
  9832  00128C                     l10141:
  9833                           
  9834                           ; BSR set to: 0
  9835  00128C  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
  9836  001290  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
  9837  001294  CFDE F0AC          	movff	postinc2,??__doprnt
  9838  001298  CFDD F0AD          	movff	postdec2,??__doprnt+1
  9839  00129C  C0AC  FFD9         	movff	??__doprnt,fsr2l
  9840  0012A0  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
  9841  0012A4  C0C8  FFDF         	movff	__doprnt@c,indf2
  9842  0012A8  EF00  F010         	goto	l10475
  9843  0012AC                     l10145:
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  9847  0012AC  0E00               	movlw	0
  9848  0012AE  6FC2               	movwf	(__doprnt@width+1)& (0+255),b
  9849  0012B0  0E00               	movlw	0
  9850  0012B2  6FC1               	movwf	__doprnt@width& (0+255),b
  9851                           
  9852                           ;doprnt.c: 560: flag = 0;
  9853  0012B4  0E00               	movlw	0
  9854  0012B6  6FBC               	movwf	(__doprnt@flag+1)& (0+255),b
  9855  0012B8  0E00               	movlw	0
  9856  0012BA  6FBB               	movwf	__doprnt@flag& (0+255),b
  9857  0012BC  D003               	goto	l10151
  9858  0012BE                     l10147:
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;doprnt.c: 592: flag |= 0x04;
  9862  0012BE  85BB               	bsf	__doprnt@flag& (0+255),2,b
  9863                           
  9864                           ;doprnt.c: 593: f++;
  9865  0012C0  4BA8               	infsnz	__doprnt@f& (0+255),f,b
  9866  0012C2  2BA9               	incf	(__doprnt@f+1)& (0+255),f,b
  9867  0012C4                     l10151:
  9868                           
  9869                           ; BSR set to: 0
  9870  0012C4  C0A8  FFF6         	movff	__doprnt@f,tblptrl
  9871  0012C8  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
  9872  0012CC                     	if	0	;tblptru may be non-zero
  9873  0012CC                     	endif
  9874  0012CC                     	if	0	;tblptru may be non-zero
  9875  0012CC                     	endif
  9876  0012CC  0008               	tblrd		*
  9877  0012CE  50F5               	movf	tablat,w,c
  9878                           
  9879                           ; Switch size 1, requested type "simple"
  9880                           ; Number of cases is 1, Range of values is 48 to 48
  9881                           ; switch strategies available:
  9882                           ; Name         Instructions Cycles
  9883                           ; simple_byte            4     3 (average)
  9884                           ;	Chosen strategy is simple_byte
  9885  0012D0  0A30               	xorlw	48	; case 48
  9886  0012D2  B4D8               	btfsc	status,2,c
  9887  0012D4  D7F4               	goto	l10147
  9888                           
  9889                           ; BSR set to: 0
  9890                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  9891  0012D6  C0A8  FFF6         	movff	__doprnt@f,tblptrl
  9892  0012DA  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
  9893  0012DE                     	if	0	;tblptru may be non-zero
  9894  0012DE                     	endif
  9895  0012DE                     	if	0	;tblptru may be non-zero
  9896  0012DE                     	endif
  9897  0012DE  0008               	tblrd		*
  9898  0012E0  50F5               	movf	tablat,w,c
  9899  0012E2  ECC8  F02C         	call	_isdigit
  9900  0012E6  A0D8               	btfss	status,0,c
  9901  0012E8  D034               	goto	u11410
  9902                           
  9903                           ;doprnt.c: 610: width = 0;
  9904  0012EA  0E00               	movlw	0
  9905  0012EC  0100               	movlb	0	; () banked
  9906  0012EE  6FC2               	movwf	(__doprnt@width+1)& (0+255),b
  9907  0012F0  0E00               	movlw	0
  9908  0012F2  6FC1               	movwf	__doprnt@width& (0+255),b
  9909  0012F4                     l10157:
  9910                           
  9911                           ;doprnt.c: 612: width *= 10;
  9912  0012F4  C0C1  F026         	movff	__doprnt@width,___wmul@multiplier
  9913  0012F8  C0C2  F027         	movff	__doprnt@width+1,___wmul@multiplier+1
  9914  0012FC  0E00               	movlw	0
  9915  0012FE  6E29               	movwf	___wmul@multiplicand+1,c
  9916  001300  0E0A               	movlw	10
  9917  001302  6E28               	movwf	___wmul@multiplicand,c
  9918  001304  EC91  F02C         	call	___wmul	;wreg free
  9919  001308  C026  F0C1         	movff	?___wmul,__doprnt@width
  9920  00130C  C027  F0C2         	movff	?___wmul+1,__doprnt@width+1
  9921                           
  9922                           ;doprnt.c: 613: width += *f++ - '0';
  9923  001310  0ED0               	movlw	208
  9924  001312  0100               	movlb	0	; () banked
  9925  001314  6FAC               	movwf	??__doprnt& (0+255),b
  9926  001316  0EFF               	movlw	255
  9927  001318  6FAD               	movwf	(??__doprnt+1)& (0+255),b
  9928  00131A  C0A8  FFF6         	movff	__doprnt@f,tblptrl
  9929  00131E  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
  9930  001322                     	if	0	;tblptru may be non-zero
  9931  001322                     	endif
  9932  001322                     	if	0	;tblptru may be non-zero
  9933  001322                     	endif
  9934  001322  0008               	tblrd		*
  9935  001324  50F5               	movf	tablat,w,c
  9936  001326  6FAE               	movwf	(??__doprnt+2)& (0+255),b
  9937  001328  6BAF               	clrf	(??__doprnt+3)& (0+255),b
  9938  00132A  51AC               	movf	??__doprnt& (0+255),w,b
  9939  00132C  27AE               	addwf	(??__doprnt+2)& (0+255),f,b
  9940  00132E  51AD               	movf	(??__doprnt+1)& (0+255),w,b
  9941  001330  23AF               	addwfc	(??__doprnt+3)& (0+255),f,b
  9942  001332  51AE               	movf	(??__doprnt+2)& (0+255),w,b
  9943  001334  27C1               	addwf	__doprnt@width& (0+255),f,b
  9944  001336  51AF               	movf	(??__doprnt+3)& (0+255),w,b
  9945  001338  23C2               	addwfc	(__doprnt@width+1)& (0+255),f,b
  9946                           
  9947                           ; BSR set to: 0
  9948  00133A  4BA8               	infsnz	__doprnt@f& (0+255),f,b
  9949  00133C  2BA9               	incf	(__doprnt@f+1)& (0+255),f,b
  9950                           
  9951                           ; BSR set to: 0
  9952                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  9953  00133E  C0A8  FFF6         	movff	__doprnt@f,tblptrl
  9954  001342  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
  9955  001346                     	if	0	;tblptru may be non-zero
  9956  001346                     	endif
  9957  001346                     	if	0	;tblptru may be non-zero
  9958  001346                     	endif
  9959  001346  0008               	tblrd		*
  9960  001348  50F5               	movf	tablat,w,c
  9961  00134A  ECC8  F02C         	call	_isdigit
  9962  00134E  B0D8               	btfsc	status,0,c
  9963  001350  D7D1               	goto	l10157
  9964  001352                     u11410:
  9965                           
  9966                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  9967  001352  C0A8  FFF6         	movff	__doprnt@f,tblptrl
  9968  001356  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
  9969  00135A                     	if	0	;tblptru may be non-zero
  9970  00135A                     	endif
  9971  00135A                     	if	0	;tblptru may be non-zero
  9972  00135A                     	endif
  9973  00135A  0008               	tblrd		*
  9974  00135C  50F5               	movf	tablat,w,c
  9975  00135E  0A2E               	xorlw	46
  9976  001360  A4D8               	btfss	status,2,c
  9977  001362  D030               	goto	l10177
  9978                           
  9979                           ;doprnt.c: 624: flag |= 0x4000;
  9980  001364  0100               	movlb	0	; () banked
  9981  001366  8DBC               	bsf	(__doprnt@flag+1)& (0+255),6,b
  9982                           
  9983                           ;doprnt.c: 625: f++;
  9984  001368  4BA8               	infsnz	__doprnt@f& (0+255),f,b
  9985  00136A  2BA9               	incf	(__doprnt@f+1)& (0+255),f,b
  9986                           
  9987                           ; BSR set to: 0
  9988                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  9989  00136C  0E00               	movlw	0
  9990  00136E  6FC7               	movwf	(__doprnt@prec+1)& (0+255),b
  9991  001370  0E00               	movlw	0
  9992  001372  6FC6               	movwf	__doprnt@prec& (0+255),b
  9993                           
  9994                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  9995  001374  D01C               	goto	l10175
  9996  001376                     l10171:
  9997                           
  9998                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  9999  001376  C0C6  F026         	movff	__doprnt@prec,___wmul@multiplier
 10000  00137A  C0C7  F027         	movff	__doprnt@prec+1,___wmul@multiplier+1
 10001  00137E  0E00               	movlw	0
 10002  001380  6E29               	movwf	___wmul@multiplicand+1,c
 10003  001382  0E0A               	movlw	10
 10004  001384  6E28               	movwf	___wmul@multiplicand,c
 10005  001386  EC91  F02C         	call	___wmul	;wreg free
 10006  00138A  C0A8  FFF6         	movff	__doprnt@f,tblptrl
 10007  00138E  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
 10008  001392                     	if	0	;tblptru may be non-zero
 10009  001392                     	endif
 10010  001392                     	if	0	;tblptru may be non-zero
 10011  001392                     	endif
 10012  001392  0008               	tblrd		*
 10013  001394  50F5               	movf	tablat,w,c
 10014  001396  2626               	addwf	?___wmul,f,c
 10015  001398  0E00               	movlw	0
 10016  00139A  2227               	addwfc	?___wmul+1,f,c
 10017  00139C  0ED0               	movlw	208
 10018  00139E  2426               	addwf	?___wmul,w,c
 10019  0013A0  0100               	movlb	0	; () banked
 10020  0013A2  6FC6               	movwf	__doprnt@prec& (0+255),b
 10021  0013A4  0EFF               	movlw	255
 10022  0013A6  2027               	addwfc	?___wmul+1,w,c
 10023  0013A8  6FC7               	movwf	(__doprnt@prec+1)& (0+255),b
 10024                           
 10025                           ; BSR set to: 0
 10026  0013AA  4BA8               	infsnz	__doprnt@f& (0+255),f,b
 10027  0013AC  2BA9               	incf	(__doprnt@f+1)& (0+255),f,b
 10028  0013AE                     l10175:
 10029                           
 10030                           ; BSR set to: 0
 10031  0013AE  C0A8  FFF6         	movff	__doprnt@f,tblptrl
 10032  0013B2  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
 10033  0013B6                     	if	0	;tblptru may be non-zero
 10034  0013B6                     	endif
 10035  0013B6                     	if	0	;tblptru may be non-zero
 10036  0013B6                     	endif
 10037  0013B6  0008               	tblrd		*
 10038  0013B8  50F5               	movf	tablat,w,c
 10039  0013BA  ECC8  F02C         	call	_isdigit
 10040  0013BE  A0D8               	btfss	status,0,c
 10041  0013C0  D00A               	goto	l10185
 10042  0013C2  D7D9               	goto	l10171
 10043  0013C4                     l10177:
 10044                           
 10045                           ;doprnt.c: 645: prec = 0;
 10046  0013C4  0E00               	movlw	0
 10047  0013C6  0100               	movlb	0	; () banked
 10048  0013C8  6FC7               	movwf	(__doprnt@prec+1)& (0+255),b
 10049  0013CA  0E00               	movlw	0
 10050  0013CC  6FC6               	movwf	__doprnt@prec& (0+255),b
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;doprnt.c: 647: flag |= 0x1000;
 10054  0013CE  89BC               	bsf	(__doprnt@flag+1)& (0+255),4,b
 10055  0013D0  D002               	goto	l10185
 10056  0013D2                     l10181:
 10057                           
 10058                           ; BSR set to: 0
 10059                           ;doprnt.c: 682: flag |= 0x400;
 10060  0013D2  85BC               	bsf	(__doprnt@flag+1)& (0+255),2,b
 10061                           
 10062                           ;doprnt.c: 683: break;
 10063  0013D4  D014               	goto	l10187
 10064  0013D6                     l10185:
 10065  0013D6  C0A8  FFF6         	movff	__doprnt@f,tblptrl
 10066  0013DA  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
 10067  0013DE  0100               	movlb	0	; () banked
 10068  0013E0  4BA8               	infsnz	__doprnt@f& (0+255),f,b
 10069  0013E2  2BA9               	incf	(__doprnt@f+1)& (0+255),f,b
 10070  0013E4                     	if	0	;tblptru may be non-zero
 10071  0013E4                     	endif
 10072  0013E4                     	if	0	;tblptru may be non-zero
 10073  0013E4                     	endif
 10074  0013E4  0008               	tblrd		*
 10075  0013E6  CFF5 F0C8          	movff	tablat,__doprnt@c
 10076  0013EA  51C8               	movf	__doprnt@c& (0+255),w,b
 10077                           
 10078                           ; Switch size 1, requested type "simple"
 10079                           ; Number of cases is 2, Range of values is 0 to 102
 10080                           ; switch strategies available:
 10081                           ; Name         Instructions Cycles
 10082                           ; simple_byte            7     4 (average)
 10083                           ;	Chosen strategy is simple_byte
 10084  0013EC  0A00               	xorlw	0	; case 0
 10085  0013EE  B4D8               	btfsc	status,2,c
 10086  0013F0  EF15  F010         	goto	u12150
 10087  0013F4  0A66               	xorlw	102	; case 102
 10088  0013F6  B4D8               	btfsc	status,2,c
 10089  0013F8  D7EC               	goto	l10181
 10090  0013FA  EF07  F010         	goto	l10477
 10091  0013FE                     l10187:
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;doprnt.c: 844: if(flag & (0x700)) {
 10095  0013FE  0E07               	movlw	7
 10096  001400  15BC               	andwf	(__doprnt@flag+1)& (0+255),w,b
 10097  001402  B4D8               	btfsc	status,2,c
 10098  001404  EFAB  F00E         	goto	l10397
 10099                           
 10100                           ; BSR set to: 0
 10101                           ;doprnt.c: 846: if(flag & 0x1000)
 10102  001408  A9BC               	btfss	(__doprnt@flag+1)& (0+255),4,b
 10103  00140A  D004               	goto	l10193
 10104                           
 10105                           ; BSR set to: 0
 10106                           ;doprnt.c: 848: prec = 6;
 10107  00140C  0E00               	movlw	0
 10108  00140E  6FC7               	movwf	(__doprnt@prec+1)& (0+255),b
 10109  001410  0E06               	movlw	6
 10110  001412  6FC6               	movwf	__doprnt@prec& (0+255),b
 10111  001414                     l10193:
 10112                           
 10113                           ; BSR set to: 0
 10114                           ;doprnt.c: 849: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 10115  001414  C0AA  FFD9         	movff	__doprnt@ap,fsr2l
 10116  001418  C0AB  FFDA         	movff	__doprnt@ap+1,fsr2h
 10117  00141C  CFDF F0AC          	movff	indf2,??__doprnt
 10118  001420  0E03               	movlw	3
 10119  001422  26DE               	addwf	postinc2,f,c
 10120  001424  CFDF F0AD          	movff	indf2,??__doprnt+1
 10121  001428  0E00               	movlw	0
 10122  00142A  22DD               	addwfc	postdec2,f,c
 10123  00142C  C0AC  FFD9         	movff	??__doprnt,fsr2l
 10124  001430  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 10125  001434  CFDE F0C3          	movff	postinc2,__doprnt@fval
 10126  001438  CFDE F0C4          	movff	postinc2,__doprnt@fval+1
 10127  00143C  CFDD F0C5          	movff	postdec2,__doprnt@fval+2
 10128                           
 10129                           ; BSR set to: 0
 10130                           ;doprnt.c: 850: if(fval < 0.0) {
 10131  001440  AFC5               	btfss	(__doprnt@fval+2)& (0+255),7,b
 10132  001442  D011               	goto	l10201
 10133                           
 10134                           ; BSR set to: 0
 10135                           ;doprnt.c: 851: fval = -fval;
 10136  001444  C0C3  F01A         	movff	__doprnt@fval,___ftneg@f1
 10137  001448  C0C4  F01B         	movff	__doprnt@fval+1,___ftneg@f1+1
 10138  00144C  C0C5  F01C         	movff	__doprnt@fval+2,___ftneg@f1+2
 10139  001450  ECB6  F02C         	call	___ftneg	;wreg free
 10140  001454  C01A  F0C3         	movff	?___ftneg,__doprnt@fval
 10141  001458  C01B  F0C4         	movff	?___ftneg+1,__doprnt@fval+1
 10142  00145C  C01C  F0C5         	movff	?___ftneg+2,__doprnt@fval+2
 10143                           
 10144                           ;doprnt.c: 852: flag |= 0x03;
 10145  001460  0E03               	movlw	3
 10146  001462  0100               	movlb	0	; () banked
 10147  001464  13BB               	iorwf	__doprnt@flag& (0+255),f,b
 10148  001466                     l10201:
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;doprnt.c: 853: };doprnt.c: 854: eexp = 0;
 10152  001466  0E00               	movlw	0
 10153  001468  6FBA               	movwf	(__doprnt@eexp+1)& (0+255),b
 10154  00146A  0E00               	movlw	0
 10155  00146C  6FB9               	movwf	__doprnt@eexp& (0+255),b
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;doprnt.c: 855: if( fval!=0) {
 10159  00146E  51C3               	movf	__doprnt@fval& (0+255),w,b
 10160  001470  11C4               	iorwf	(__doprnt@fval+1)& (0+255),w,b
 10161  001472  11C5               	iorwf	(__doprnt@fval+2)& (0+255),w,b
 10162  001474  B4D8               	btfsc	status,2,c
 10163  001476  D086               	goto	l10229
 10164                           
 10165                           ; BSR set to: 0
 10166                           ;doprnt.c: 856: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 10167  001478  0E82               	movlw	130
 10168  00147A  6FAC               	movwf	??__doprnt& (0+255),b
 10169  00147C  0EFF               	movlw	255
 10170  00147E  6FAD               	movwf	(??__doprnt+1)& (0+255),b
 10171  001480  C0C3  F0AE         	movff	__doprnt@fval,??__doprnt+2
 10172  001484  C0C4  F0AF         	movff	__doprnt@fval+1,??__doprnt+3
 10173  001488  C0C5  F0B0         	movff	__doprnt@fval+2,??__doprnt+4
 10174  00148C  C0C6  F0B1         	movff	__doprnt@fval+3,??__doprnt+5
 10175  001490  0E10               	movlw	16
 10176  001492  D005               	goto	u11480
 10177  001494                     u11485:
 10178  001494  90D8               	bcf	status,0,c
 10179  001496  33B1               	rrcf	(??__doprnt+5)& (0+255),f,b
 10180  001498  33B0               	rrcf	(??__doprnt+4)& (0+255),f,b
 10181  00149A  33AF               	rrcf	(??__doprnt+3)& (0+255),f,b
 10182  00149C  33AE               	rrcf	(??__doprnt+2)& (0+255),f,b
 10183  00149E                     u11480:
 10184  00149E  2EE8               	decfsz	wreg,f,c
 10185  0014A0  D7F9               	goto	u11485
 10186  0014A2  51AE               	movf	(??__doprnt+2)& (0+255),w,b
 10187  0014A4  25AC               	addwf	??__doprnt& (0+255),w,b
 10188  0014A6  6FB9               	movwf	__doprnt@eexp& (0+255),b
 10189  0014A8  0E00               	movlw	0
 10190  0014AA  21AD               	addwfc	(??__doprnt+1)& (0+255),w,b
 10191  0014AC  6FBA               	movwf	(__doprnt@eexp+1)& (0+255),b
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;doprnt.c: 857: eexp--;
 10195  0014AE  07B9               	decf	__doprnt@eexp& (0+255),f,b
 10196  0014B0  A0D8               	btfss	status,0,c
 10197  0014B2  07BA               	decf	(__doprnt@eexp+1)& (0+255),f,b
 10198                           
 10199                           ; BSR set to: 0
 10200                           ;doprnt.c: 858: eexp *= 3;
 10201  0014B4  C0B9  F026         	movff	__doprnt@eexp,___wmul@multiplier
 10202  0014B8  C0BA  F027         	movff	__doprnt@eexp+1,___wmul@multiplier+1
 10203  0014BC  0E00               	movlw	0
 10204  0014BE  6E29               	movwf	___wmul@multiplicand+1,c
 10205  0014C0  0E03               	movlw	3
 10206  0014C2  6E28               	movwf	___wmul@multiplicand,c
 10207  0014C4  EC91  F02C         	call	___wmul	;wreg free
 10208  0014C8  C026  F0B9         	movff	?___wmul,__doprnt@eexp
 10209  0014CC  C027  F0BA         	movff	?___wmul+1,__doprnt@eexp+1
 10210                           
 10211                           ;doprnt.c: 859: eexp /= 10;
 10212  0014D0  C0B9  F020         	movff	__doprnt@eexp,___awdiv@dividend
 10213  0014D4  C0BA  F021         	movff	__doprnt@eexp+1,___awdiv@dividend+1
 10214  0014D8  0E00               	movlw	0
 10215  0014DA  6E23               	movwf	___awdiv@divisor+1,c
 10216  0014DC  0E0A               	movlw	10
 10217  0014DE  6E22               	movwf	___awdiv@divisor,c
 10218  0014E0  ECEF  F025         	call	___awdiv	;wreg free
 10219  0014E4  C020  F0B9         	movff	?___awdiv,__doprnt@eexp
 10220  0014E8  C021  F0BA         	movff	?___awdiv+1,__doprnt@eexp+1
 10221                           
 10222                           ;doprnt.c: 860: if(eexp < 0)
 10223  0014EC  0100               	movlb	0	; () banked
 10224  0014EE  AFBA               	btfss	(__doprnt@eexp+1)& (0+255),7,b
 10225  0014F0  D003               	goto	l10217
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;doprnt.c: 861: eexp--;
 10229  0014F2  07B9               	decf	__doprnt@eexp& (0+255),f,b
 10230  0014F4  A0D8               	btfss	status,0,c
 10231  0014F6  07BA               	decf	(__doprnt@eexp+1)& (0+255),f,b
 10232  0014F8                     l10217:
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;doprnt.c: 865: tmpval.integ = scale(-eexp);
 10236  0014F8  51B9               	movf	__doprnt@eexp& (0+255),w,b
 10237  0014FA  0800               	sublw	0
 10238  0014FC  EC72  F015         	call	_scale
 10239  001500  C090  F0BD         	movff	?_scale,__doprnt@tmpval
 10240  001504  C091  F0BE         	movff	?_scale+1,__doprnt@tmpval+1
 10241  001508  C092  F0BF         	movff	?_scale+2,__doprnt@tmpval+2
 10242                           
 10243                           ;doprnt.c: 866: tmpval.integ *= fval;
 10244  00150C  C0BD  F081         	movff	__doprnt@tmpval,___ftmul@f1
 10245  001510  C0BE  F082         	movff	__doprnt@tmpval+1,___ftmul@f1+1
 10246  001514  C0BF  F083         	movff	__doprnt@tmpval+2,___ftmul@f1+2
 10247  001518  C0C3  F084         	movff	__doprnt@fval,___ftmul@f2
 10248  00151C  C0C4  F085         	movff	__doprnt@fval+1,___ftmul@f2+1
 10249  001520  C0C5  F086         	movff	__doprnt@fval+2,___ftmul@f2+2
 10250  001524  ECCB  F020         	call	___ftmul	;wreg free
 10251  001528  C081  F0BD         	movff	?___ftmul,__doprnt@tmpval
 10252  00152C  C082  F0BE         	movff	?___ftmul+1,__doprnt@tmpval+1
 10253  001530  C083  F0BF         	movff	?___ftmul+2,__doprnt@tmpval+2
 10254                           
 10255                           ;doprnt.c: 867: if(tmpval.integ < 1.0)
 10256  001534  C0BD  F01A         	movff	__doprnt@tmpval,___ftge@ff1
 10257  001538  C0BE  F01B         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 10258  00153C  C0BF  F01C         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 10259  001540  0E00               	movlw	0
 10260  001542  6E1D               	movwf	___ftge@ff2,c
 10261  001544  0E80               	movlw	128
 10262  001546  6E1E               	movwf	___ftge@ff2+1,c
 10263  001548  0E3F               	movlw	63
 10264  00154A  6E1F               	movwf	___ftge@ff2+2,c
 10265  00154C  EC5F  F027         	call	___ftge	;wreg free
 10266  001550  B0D8               	btfsc	status,0,c
 10267  001552  D005               	goto	l10225
 10268                           
 10269                           ;doprnt.c: 868: eexp--;
 10270  001554  0100               	movlb	0	; () banked
 10271  001556  07B9               	decf	__doprnt@eexp& (0+255),f,b
 10272  001558  A0D8               	btfss	status,0,c
 10273  00155A  07BA               	decf	(__doprnt@eexp+1)& (0+255),f,b
 10274  00155C  D013               	goto	l10229
 10275  00155E                     l10225:
 10276                           
 10277                           ;doprnt.c: 869: else if(tmpval.integ >= 10.0)
 10278  00155E  C0BD  F01A         	movff	__doprnt@tmpval,___ftge@ff1
 10279  001562  C0BE  F01B         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 10280  001566  C0BF  F01C         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 10281  00156A  0E00               	movlw	0
 10282  00156C  6E1D               	movwf	___ftge@ff2,c
 10283  00156E  0E20               	movlw	32
 10284  001570  6E1E               	movwf	___ftge@ff2+1,c
 10285  001572  0E41               	movlw	65
 10286  001574  6E1F               	movwf	___ftge@ff2+2,c
 10287  001576  EC5F  F027         	call	___ftge	;wreg free
 10288  00157A  A0D8               	btfss	status,0,c
 10289  00157C  D003               	goto	l10229
 10290                           
 10291                           ;doprnt.c: 870: eexp++;
 10292  00157E  0100               	movlb	0	; () banked
 10293  001580  4BB9               	infsnz	__doprnt@eexp& (0+255),f,b
 10294  001582  2BBA               	incf	(__doprnt@eexp+1)& (0+255),f,b
 10295  001584                     l10229:
 10296                           
 10297                           ;doprnt.c: 871: };doprnt.c: 1131: if(prec <= 12)
 10298  001584  0100               	movlb	0	; () banked
 10299  001586  BFC7               	btfsc	(__doprnt@prec+1)& (0+255),7,b
 10300  001588  D006               	goto	u11520
 10301  00158A  51C7               	movf	(__doprnt@prec+1)& (0+255),w,b
 10302  00158C  E11B               	bnz	l10233
 10303  00158E  0E0D               	movlw	13
 10304  001590  5DC6               	subwf	__doprnt@prec& (0+255),w,b
 10305  001592  B0D8               	btfsc	status,0,c
 10306  001594  D017               	goto	l10233
 10307  001596                     u11520:
 10308                           
 10309                           ; BSR set to: 0
 10310                           ;doprnt.c: 1132: fval += fround((unsigned int)prec);
 10311  001596  C0C3  F060         	movff	__doprnt@fval,___ftadd@f1
 10312  00159A  C0C4  F061         	movff	__doprnt@fval+1,___ftadd@f1+1
 10313  00159E  C0C5  F062         	movff	__doprnt@fval+2,___ftadd@f1+2
 10314  0015A2  51C6               	movf	__doprnt@prec& (0+255),w,b
 10315  0015A4  EC2E  F017         	call	_fround
 10316  0015A8  C090  F063         	movff	?_fround,___ftadd@f2
 10317  0015AC  C091  F064         	movff	?_fround+1,___ftadd@f2+1
 10318  0015B0  C092  F065         	movff	?_fround+2,___ftadd@f2+2
 10319  0015B4  ECDA  F01C         	call	___ftadd	;wreg free
 10320  0015B8  C060  F0C3         	movff	?___ftadd,__doprnt@fval
 10321  0015BC  C061  F0C4         	movff	?___ftadd+1,__doprnt@fval+1
 10322  0015C0  C062  F0C5         	movff	?___ftadd+2,__doprnt@fval+2
 10323  0015C4                     l10233:
 10324                           
 10325                           ;doprnt.c: 1135: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
 10326  0015C4  0100               	movlb	0	; () banked
 10327  0015C6  BFBA               	btfsc	(__doprnt@eexp+1)& (0+255),7,b
 10328  0015C8  D006               	goto	u11530
 10329  0015CA  51BA               	movf	(__doprnt@eexp+1)& (0+255),w,b
 10330  0015CC  E11F               	bnz	l10241
 10331  0015CE  0E0A               	movlw	10
 10332  0015D0  5DB9               	subwf	__doprnt@eexp& (0+255),w,b
 10333  0015D2  B0D8               	btfsc	status,0,c
 10334  0015D4  D01B               	goto	u11560
 10335  0015D6                     u11530:
 10336                           
 10337                           ; BSR set to: 0
 10338  0015D6  51C3               	movf	__doprnt@fval& (0+255),w,b
 10339  0015D8  11C4               	iorwf	(__doprnt@fval+1)& (0+255),w,b
 10340  0015DA  11C5               	iorwf	(__doprnt@fval+2)& (0+255),w,b
 10341  0015DC  B4D8               	btfsc	status,2,c
 10342  0015DE  D055               	goto	l10255
 10343                           
 10344                           ; BSR set to: 0
 10345  0015E0  C0C3  F097         	movff	__doprnt@fval,___fttol@f1
 10346  0015E4  C0C4  F098         	movff	__doprnt@fval+1,___fttol@f1+1
 10347  0015E8  C0C5  F099         	movff	__doprnt@fval+2,___fttol@f1+2
 10348  0015EC  EC7D  F023         	call	___fttol	;wreg free
 10349  0015F0  0100               	movlb	0	; () banked
 10350  0015F2  5197               	movf	?___fttol& (0+255),w,b
 10351  0015F4  1198               	iorwf	(?___fttol+1)& (0+255),w,b
 10352  0015F6  1199               	iorwf	(?___fttol+2)& (0+255),w,b
 10353  0015F8  119A               	iorwf	(?___fttol+3)& (0+255),w,b
 10354  0015FA  B4D8               	btfsc	status,2,c
 10355                           
 10356                           ; BSR set to: 0
 10357  0015FC  BFBA               	btfsc	(__doprnt@eexp+1)& (0+255),7,b
 10358  0015FE  D045               	goto	l10255
 10359  001600  51BA               	movf	(__doprnt@eexp+1)& (0+255),w,b
 10360  001602  E104               	bnz	u11560
 10361  001604  0E02               	movlw	2
 10362  001606  5DB9               	subwf	__doprnt@eexp& (0+255),w,b
 10363  001608  A0D8               	btfss	status,0,c
 10364  00160A  D03F               	goto	l10255
 10365  00160C                     u11560:
 10366  00160C                     l10241:
 10367                           
 10368                           ; BSR set to: 0
 10369                           ;doprnt.c: 1139: if(tmpval.integ < 4.294967296){
 10370  00160C  C0BD  F01A         	movff	__doprnt@tmpval,___ftge@ff1
 10371  001610  C0BE  F01B         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 10372  001614  C0BF  F01C         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 10373  001618  0E70               	movlw	112
 10374  00161A  6E1D               	movwf	___ftge@ff2,c
 10375  00161C  0E89               	movlw	137
 10376  00161E  6E1E               	movwf	___ftge@ff2+1,c
 10377  001620  0E40               	movlw	64
 10378  001622  6E1F               	movwf	___ftge@ff2+2,c
 10379  001624  EC5F  F027         	call	___ftge	;wreg free
 10380  001628  B0D8               	btfsc	status,0,c
 10381  00162A  D003               	goto	l10245
 10382                           
 10383                           ;doprnt.c: 1140: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
 10384  00162C  0100               	movlb	0	; () banked
 10385  00162E  0EF7               	movlw	247
 10386  001630  D002               	goto	L2
 10387  001632                     l10245:
 10388                           
 10389                           ;doprnt.c: 1142: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
 10390  001632  0100               	movlb	0	; () banked
 10391  001634  0EF8               	movlw	248
 10392  001636                     L2:
 10393  001636  27B9               	addwf	__doprnt@eexp& (0+255),f,b
 10394  001638  0EFF               	movlw	255
 10395  00163A  23BA               	addwfc	(__doprnt@eexp+1)& (0+255),f,b
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;doprnt.c: 1143: };doprnt.c: 1144: tmpval.integ = scale(eexp);
 10399  00163C  51B9               	movf	__doprnt@eexp& (0+255),w,b
 10400  00163E  EC72  F015         	call	_scale
 10401  001642  C090  F0BD         	movff	?_scale,__doprnt@tmpval
 10402  001646  C091  F0BE         	movff	?_scale+1,__doprnt@tmpval+1
 10403  00164A  C092  F0BF         	movff	?_scale+2,__doprnt@tmpval+2
 10404                           
 10405                           ;doprnt.c: 1145: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 10406  00164E  C0C3  F01A         	movff	__doprnt@fval,__tdiv_to_l_@f1
 10407  001652  C0C4  F01B         	movff	__doprnt@fval+1,__tdiv_to_l_@f1+1
 10408  001656  C0C5  F01C         	movff	__doprnt@fval+2,__tdiv_to_l_@f1+2
 10409  00165A  C0BD  F01D         	movff	__doprnt@tmpval,__tdiv_to_l_@f2
 10410  00165E  C0BE  F01E         	movff	__doprnt@tmpval+1,__tdiv_to_l_@f2+1
 10411  001662  C0BF  F01F         	movff	__doprnt@tmpval+2,__tdiv_to_l_@f2+2
 10412  001666  EC4C  F020         	call	__tdiv_to_l_	;wreg free
 10413  00166A  C01A  F0B5         	movff	?__tdiv_to_l_,__doprnt@val
 10414  00166E  C01B  F0B6         	movff	?__tdiv_to_l_+1,__doprnt@val+1
 10415  001672  C01C  F0B7         	movff	?__tdiv_to_l_+2,__doprnt@val+2
 10416  001676  C01D  F0B8         	movff	?__tdiv_to_l_+3,__doprnt@val+3
 10417                           
 10418                           ;doprnt.c: 1148: fval = 0.0;
 10419  00167A  0E00               	movlw	0
 10420  00167C  0100               	movlb	0	; () banked
 10421  00167E  6FC3               	movwf	__doprnt@fval& (0+255),b
 10422  001680  0E00               	movlw	0
 10423  001682  6FC4               	movwf	(__doprnt@fval+1)& (0+255),b
 10424  001684  0E00               	movlw	0
 10425  001686  6FC5               	movwf	(__doprnt@fval+2)& (0+255),b
 10426                           
 10427                           ;doprnt.c: 1149: } else {
 10428  001688  D033               	goto	l10259
 10429  00168A                     l10255:
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;doprnt.c: 1150: val = (unsigned long)fval;
 10433  00168A  C0C3  F097         	movff	__doprnt@fval,___fttol@f1
 10434  00168E  C0C4  F098         	movff	__doprnt@fval+1,___fttol@f1+1
 10435  001692  C0C5  F099         	movff	__doprnt@fval+2,___fttol@f1+2
 10436  001696  EC7D  F023         	call	___fttol	;wreg free
 10437  00169A  C097  F0B5         	movff	?___fttol,__doprnt@val
 10438  00169E  C098  F0B6         	movff	?___fttol+1,__doprnt@val+1
 10439  0016A2  C099  F0B7         	movff	?___fttol+2,__doprnt@val+2
 10440  0016A6  C09A  F0B8         	movff	?___fttol+3,__doprnt@val+3
 10441                           
 10442                           ;doprnt.c: 1151: fval -= (double)val;
 10443  0016AA  C0C3  F06C         	movff	__doprnt@fval,___ftsub@f1
 10444  0016AE  C0C4  F06D         	movff	__doprnt@fval+1,___ftsub@f1+1
 10445  0016B2  C0C5  F06E         	movff	__doprnt@fval+2,___ftsub@f1+2
 10446  0016B6  C0B5  F022         	movff	__doprnt@val,___lltoft@c
 10447  0016BA  C0B6  F023         	movff	__doprnt@val+1,___lltoft@c+1
 10448  0016BE  C0B7  F024         	movff	__doprnt@val+2,___lltoft@c+2
 10449  0016C2  C0B8  F025         	movff	__doprnt@val+3,___lltoft@c+3
 10450  0016C6  EC36  F028         	call	___lltoft	;wreg free
 10451  0016CA  C022  F06F         	movff	?___lltoft,___ftsub@f2
 10452  0016CE  C023  F070         	movff	?___lltoft+1,___ftsub@f2+1
 10453  0016D2  C024  F071         	movff	?___lltoft+2,___ftsub@f2+2
 10454  0016D6  ECAA  F02A         	call	___ftsub	;wreg free
 10455  0016DA  C06C  F0C3         	movff	?___ftsub,__doprnt@fval
 10456  0016DE  C06D  F0C4         	movff	?___ftsub+1,__doprnt@fval+1
 10457  0016E2  C06E  F0C5         	movff	?___ftsub+2,__doprnt@fval+2
 10458                           
 10459                           ;doprnt.c: 1152: eexp = 0;
 10460  0016E6  0E00               	movlw	0
 10461  0016E8  0100               	movlb	0	; () banked
 10462  0016EA  6FBA               	movwf	(__doprnt@eexp+1)& (0+255),b
 10463  0016EC  0E00               	movlw	0
 10464  0016EE  6FB9               	movwf	__doprnt@eexp& (0+255),b
 10465  0016F0                     l10259:
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;doprnt.c: 1153: };doprnt.c: 1155: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
 10469  0016F0  0E01               	movlw	1
 10470  0016F2  6FC8               	movwf	__doprnt@c& (0+255),b
 10471  0016F4                     l10265:
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;doprnt.c: 1156: if(val < dpowers[c])
 10475  0016F4  51C8               	movf	__doprnt@c& (0+255),w,b
 10476  0016F6  0D04               	mullw	4
 10477  0016F8  0E79               	movlw	low _dpowers
 10478  0016FA  24F3               	addwf	prodl,w,c
 10479  0016FC  6EF6               	movwf	tblptrl,c
 10480  0016FE  0E7E               	movlw	high _dpowers
 10481  001700  20F4               	addwfc	prodh,w,c
 10482  001702  6EF7               	movwf	tblptrh,c
 10483  001704                     	if	0	;There are less than 3 active tblptr bytes
 10484  001704                     	endif
 10485  001704  0009               	tblrd		*+
 10486  001706  50F5               	movf	tablat,w,c
 10487  001708  5DB5               	subwf	__doprnt@val& (0+255),w,b
 10488  00170A  0009               	tblrd		*+
 10489  00170C  50F5               	movf	tablat,w,c
 10490  00170E  59B6               	subwfb	(__doprnt@val+1)& (0+255),w,b
 10491  001710  0009               	tblrd		*+
 10492  001712  50F5               	movf	tablat,w,c
 10493  001714  59B7               	subwfb	(__doprnt@val+2)& (0+255),w,b
 10494  001716  0009               	tblrd		*+
 10495  001718  50F5               	movf	tablat,w,c
 10496  00171A  59B8               	subwfb	(__doprnt@val+3)& (0+255),w,b
 10497  00171C  A0D8               	btfss	status,0,c
 10498  00171E  D005               	goto	u11590
 10499                           
 10500                           ; BSR set to: 0
 10501  001720  2BC8               	incf	__doprnt@c& (0+255),f,b
 10502                           
 10503                           ; BSR set to: 0
 10504  001722  0E0A               	movlw	10
 10505  001724  19C8               	xorwf	__doprnt@c& (0+255),w,b
 10506  001726  A4D8               	btfss	status,2,c
 10507  001728  D7E5               	goto	l10265
 10508  00172A                     u11590:
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;doprnt.c: 1161: width -= prec + c + eexp;
 10512  00172A  51C8               	movf	__doprnt@c& (0+255),w,b
 10513  00172C  25C6               	addwf	__doprnt@prec& (0+255),w,b
 10514  00172E  6FAC               	movwf	??__doprnt& (0+255),b
 10515  001730  0E00               	movlw	0
 10516  001732  21C7               	addwfc	(__doprnt@prec+1)& (0+255),w,b
 10517  001734  6FAD               	movwf	(??__doprnt+1)& (0+255),b
 10518  001736  51B9               	movf	__doprnt@eexp& (0+255),w,b
 10519  001738  27AC               	addwf	??__doprnt& (0+255),f,b
 10520  00173A  51BA               	movf	(__doprnt@eexp+1)& (0+255),w,b
 10521  00173C  23AD               	addwfc	(??__doprnt+1)& (0+255),f,b
 10522  00173E  51AC               	movf	??__doprnt& (0+255),w,b
 10523  001740  5FC1               	subwf	__doprnt@width& (0+255),f,b
 10524  001742  51AD               	movf	(??__doprnt+1)& (0+255),w,b
 10525  001744  5BC2               	subwfb	(__doprnt@width+1)& (0+255),f,b
 10526                           
 10527                           ;doprnt.c: 1162: if(;doprnt.c: 1166: prec)
 10528  001746  51C6               	movf	__doprnt@prec& (0+255),w,b
 10529  001748  11C7               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 10530  00174A  B4D8               	btfsc	status,2,c
 10531  00174C  D003               	goto	l10277
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;doprnt.c: 1167: width--;
 10535  00174E  07C1               	decf	__doprnt@width& (0+255),f,b
 10536  001750  A0D8               	btfss	status,0,c
 10537  001752  07C2               	decf	(__doprnt@width+1)& (0+255),f,b
 10538  001754                     l10277:
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;doprnt.c: 1168: if(flag & 0x03)
 10542  001754  0E03               	movlw	3
 10543  001756  15BB               	andwf	__doprnt@flag& (0+255),w,b
 10544  001758  6FAC               	movwf	??__doprnt& (0+255),b
 10545  00175A  0E00               	movlw	0
 10546  00175C  15BC               	andwf	(__doprnt@flag+1)& (0+255),w,b
 10547  00175E  6FAD               	movwf	(??__doprnt+1)& (0+255),b
 10548  001760  51AC               	movf	??__doprnt& (0+255),w,b
 10549  001762  11AD               	iorwf	(??__doprnt+1)& (0+255),w,b
 10550  001764  B4D8               	btfsc	status,2,c
 10551  001766  D003               	goto	l10281
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;doprnt.c: 1169: width--;
 10555  001768  07C1               	decf	__doprnt@width& (0+255),f,b
 10556  00176A  A0D8               	btfss	status,0,c
 10557  00176C  07C2               	decf	(__doprnt@width+1)& (0+255),f,b
 10558  00176E                     l10281:
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;doprnt.c: 1172: if(flag & 0x04) {
 10562  00176E  A5BB               	btfss	__doprnt@flag& (0+255),2,b
 10563  001770  D0B2               	goto	l10315
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;doprnt.c: 1176: if(flag & 0x03)
 10567  001772  0E03               	movlw	3
 10568  001774  15BB               	andwf	__doprnt@flag& (0+255),w,b
 10569  001776  6FAC               	movwf	??__doprnt& (0+255),b
 10570  001778  0E00               	movlw	0
 10571  00177A  15BC               	andwf	(__doprnt@flag+1)& (0+255),w,b
 10572  00177C  6FAD               	movwf	(??__doprnt+1)& (0+255),b
 10573  00177E  51AC               	movf	??__doprnt& (0+255),w,b
 10574  001780  11AD               	iorwf	(??__doprnt+1)& (0+255),w,b
 10575  001782  B4D8               	btfsc	status,2,c
 10576  001784  D069               	goto	l10303
 10577                           
 10578                           ; BSR set to: 0
 10579  001786  EE20 F002          	lfsr	2,2
 10580  00178A  51A6               	movf	__doprnt@pb& (0+255),w,b
 10581  00178C  26D9               	addwf	fsr2l,f,c
 10582  00178E  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10583  001790  22DA               	addwfc	fsr2h,f,c
 10584  001792  50DE               	movf	postinc2,w,c
 10585  001794  10DE               	iorwf	postinc2,w,c
 10586  001796  B4D8               	btfsc	status,2,c
 10587  001798  D013               	goto	l10289
 10588                           
 10589                           ; BSR set to: 0
 10590  00179A  EE20 F002          	lfsr	2,2
 10591  00179E  51A6               	movf	__doprnt@pb& (0+255),w,b
 10592  0017A0  26D9               	addwf	fsr2l,f,c
 10593  0017A2  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10594  0017A4  22DA               	addwfc	fsr2h,f,c
 10595  0017A6  D801               	call	u11658
 10596  0017A8  D057               	goto	l10303
 10597  0017AA                     u11658:
 10598  0017AA  0005               	push	
 10599  0017AC  6EFA               	movwf	pclath,c
 10600  0017AE  50DE               	movf	postinc2,w,c
 10601  0017B0  6EFD               	movwf	tosl,c
 10602  0017B2  50DE               	movf	postinc2,w,c
 10603  0017B4  6EFE               	movwf	tosh,c
 10604  0017B6  50F8               	movf	tblptru,w,c
 10605  0017B8  6EFF               	movwf	tosu,c
 10606  0017BA  50FA               	movf	pclath,w,c
 10607  0017BC  0E2D               	movlw	45
 10608  0017BE  0012               	return		;indir
 10609  0017C0                     l10289:
 10610                           
 10611                           ; BSR set to: 0
 10612  0017C0  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10613  0017C4  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10614  0017C8  CFDE F0AC          	movff	postinc2,??__doprnt
 10615  0017CC  CFDD F0AD          	movff	postdec2,??__doprnt+1
 10616  0017D0  C0AC  FFD9         	movff	??__doprnt,fsr2l
 10617  0017D4  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 10618  0017D8  0E2D               	movlw	45
 10619  0017DA  6EDF               	movwf	indf2,c
 10620                           
 10621                           ; BSR set to: 0
 10622  0017DC  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10623  0017E0  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10624  0017E4  2ADE               	incf	postinc2,f,c
 10625  0017E6  0E00               	movlw	0
 10626  0017E8  22DD               	addwfc	postdec2,f,c
 10627  0017EA  D036               	goto	l10303
 10628  0017EC                     l10293:
 10629                           
 10630                           ; BSR set to: 0
 10631  0017EC  EE20 F002          	lfsr	2,2
 10632  0017F0  51A6               	movf	__doprnt@pb& (0+255),w,b
 10633  0017F2  26D9               	addwf	fsr2l,f,c
 10634  0017F4  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10635  0017F6  22DA               	addwfc	fsr2h,f,c
 10636  0017F8  50DE               	movf	postinc2,w,c
 10637  0017FA  10DE               	iorwf	postinc2,w,c
 10638  0017FC  B4D8               	btfsc	status,2,c
 10639  0017FE  D013               	goto	l10297
 10640                           
 10641                           ; BSR set to: 0
 10642  001800  EE20 F002          	lfsr	2,2
 10643  001804  51A6               	movf	__doprnt@pb& (0+255),w,b
 10644  001806  26D9               	addwf	fsr2l,f,c
 10645  001808  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10646  00180A  22DA               	addwfc	fsr2h,f,c
 10647  00180C  D801               	call	u11678
 10648  00180E  D020               	goto	l10301
 10649  001810                     u11678:
 10650  001810  0005               	push	
 10651  001812  6EFA               	movwf	pclath,c
 10652  001814  50DE               	movf	postinc2,w,c
 10653  001816  6EFD               	movwf	tosl,c
 10654  001818  50DE               	movf	postinc2,w,c
 10655  00181A  6EFE               	movwf	tosh,c
 10656  00181C  50F8               	movf	tblptru,w,c
 10657  00181E  6EFF               	movwf	tosu,c
 10658  001820  50FA               	movf	pclath,w,c
 10659  001822  0E30               	movlw	48
 10660  001824  0012               	return		;indir
 10661  001826                     l10297:
 10662                           
 10663                           ; BSR set to: 0
 10664  001826  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10665  00182A  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10666  00182E  CFDE F0AC          	movff	postinc2,??__doprnt
 10667  001832  CFDD F0AD          	movff	postdec2,??__doprnt+1
 10668  001836  C0AC  FFD9         	movff	??__doprnt,fsr2l
 10669  00183A  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 10670  00183E  0E30               	movlw	48
 10671  001840  6EDF               	movwf	indf2,c
 10672                           
 10673                           ; BSR set to: 0
 10674  001842  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10675  001846  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10676  00184A  2ADE               	incf	postinc2,f,c
 10677  00184C  0E00               	movlw	0
 10678  00184E  22DD               	addwfc	postdec2,f,c
 10679  001850                     l10301:
 10680                           
 10681                           ;doprnt.c: 1189: width--;
 10682  001850  0100               	movlb	0	; () banked
 10683  001852  07C1               	decf	__doprnt@width& (0+255),f,b
 10684  001854  A0D8               	btfss	status,0,c
 10685  001856  07C2               	decf	(__doprnt@width+1)& (0+255),f,b
 10686  001858                     l10303:
 10687  001858  0100               	movlb	0	; () banked
 10688  00185A  BFC2               	btfsc	(__doprnt@width+1)& (0+255),7,b
 10689  00185C  D0ED               	goto	l10337
 10690  00185E  51C2               	movf	(__doprnt@width+1)& (0+255),w,b
 10691  001860  E1C5               	bnz	l10293
 10692  001862  05C1               	decf	__doprnt@width& (0+255),w,b
 10693  001864  A0D8               	btfss	status,0,c
 10694  001866  D0E8               	goto	l10337
 10695  001868  D7C1               	goto	l10293
 10696  00186A                     l10305:
 10697                           
 10698                           ; BSR set to: 0
 10699  00186A  EE20 F002          	lfsr	2,2
 10700  00186E  51A6               	movf	__doprnt@pb& (0+255),w,b
 10701  001870  26D9               	addwf	fsr2l,f,c
 10702  001872  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10703  001874  22DA               	addwfc	fsr2h,f,c
 10704  001876  50DE               	movf	postinc2,w,c
 10705  001878  10DE               	iorwf	postinc2,w,c
 10706  00187A  B4D8               	btfsc	status,2,c
 10707  00187C  D013               	goto	l10309
 10708                           
 10709                           ; BSR set to: 0
 10710  00187E  EE20 F002          	lfsr	2,2
 10711  001882  51A6               	movf	__doprnt@pb& (0+255),w,b
 10712  001884  26D9               	addwf	fsr2l,f,c
 10713  001886  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10714  001888  22DA               	addwfc	fsr2h,f,c
 10715  00188A  D801               	call	u11708
 10716  00188C  D020               	goto	l10313
 10717  00188E                     u11708:
 10718  00188E  0005               	push	
 10719  001890  6EFA               	movwf	pclath,c
 10720  001892  50DE               	movf	postinc2,w,c
 10721  001894  6EFD               	movwf	tosl,c
 10722  001896  50DE               	movf	postinc2,w,c
 10723  001898  6EFE               	movwf	tosh,c
 10724  00189A  50F8               	movf	tblptru,w,c
 10725  00189C  6EFF               	movwf	tosu,c
 10726  00189E  50FA               	movf	pclath,w,c
 10727  0018A0  0E20               	movlw	32
 10728  0018A2  0012               	return		;indir
 10729  0018A4                     l10309:
 10730                           
 10731                           ; BSR set to: 0
 10732  0018A4  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10733  0018A8  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10734  0018AC  CFDE F0AC          	movff	postinc2,??__doprnt
 10735  0018B0  CFDD F0AD          	movff	postdec2,??__doprnt+1
 10736  0018B4  C0AC  FFD9         	movff	??__doprnt,fsr2l
 10737  0018B8  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 10738  0018BC  0E20               	movlw	32
 10739  0018BE  6EDF               	movwf	indf2,c
 10740                           
 10741                           ; BSR set to: 0
 10742  0018C0  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10743  0018C4  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10744  0018C8  2ADE               	incf	postinc2,f,c
 10745  0018CA  0E00               	movlw	0
 10746  0018CC  22DD               	addwfc	postdec2,f,c
 10747  0018CE                     l10313:
 10748                           
 10749                           ;doprnt.c: 1201: width--;
 10750  0018CE  0100               	movlb	0	; () banked
 10751  0018D0  07C1               	decf	__doprnt@width& (0+255),f,b
 10752  0018D2  A0D8               	btfss	status,0,c
 10753  0018D4  07C2               	decf	(__doprnt@width+1)& (0+255),f,b
 10754  0018D6                     l10315:
 10755                           
 10756                           ; BSR set to: 0
 10757  0018D6  BFC2               	btfsc	(__doprnt@width+1)& (0+255),7,b
 10758  0018D8  D005               	goto	u11710
 10759  0018DA  51C2               	movf	(__doprnt@width+1)& (0+255),w,b
 10760  0018DC  E1C6               	bnz	l10305
 10761  0018DE  05C1               	decf	__doprnt@width& (0+255),w,b
 10762  0018E0  B0D8               	btfsc	status,0,c
 10763  0018E2  D7C3               	goto	l10305
 10764  0018E4                     u11710:
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;doprnt.c: 1202: };doprnt.c: 1207: if(flag & 0x03)
 10768  0018E4  0E03               	movlw	3
 10769  0018E6  15BB               	andwf	__doprnt@flag& (0+255),w,b
 10770  0018E8  6FAC               	movwf	??__doprnt& (0+255),b
 10771  0018EA  0E00               	movlw	0
 10772  0018EC  15BC               	andwf	(__doprnt@flag+1)& (0+255),w,b
 10773  0018EE  6FAD               	movwf	(??__doprnt+1)& (0+255),b
 10774  0018F0  51AC               	movf	??__doprnt& (0+255),w,b
 10775  0018F2  11AD               	iorwf	(??__doprnt+1)& (0+255),w,b
 10776  0018F4  B4D8               	btfsc	status,2,c
 10777  0018F6  D0A0               	goto	l10337
 10778                           
 10779                           ; BSR set to: 0
 10780  0018F8  EE20 F002          	lfsr	2,2
 10781  0018FC  51A6               	movf	__doprnt@pb& (0+255),w,b
 10782  0018FE  26D9               	addwf	fsr2l,f,c
 10783  001900  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10784  001902  22DA               	addwfc	fsr2h,f,c
 10785  001904  50DE               	movf	postinc2,w,c
 10786  001906  10DE               	iorwf	postinc2,w,c
 10787  001908  B4D8               	btfsc	status,2,c
 10788  00190A  D013               	goto	l10323
 10789                           
 10790                           ; BSR set to: 0
 10791  00190C  EE20 F002          	lfsr	2,2
 10792  001910  51A6               	movf	__doprnt@pb& (0+255),w,b
 10793  001912  26D9               	addwf	fsr2l,f,c
 10794  001914  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10795  001916  22DA               	addwfc	fsr2h,f,c
 10796  001918  D801               	call	u11748
 10797  00191A  D08E               	goto	l10337
 10798  00191C                     u11748:
 10799  00191C  0005               	push	
 10800  00191E  6EFA               	movwf	pclath,c
 10801  001920  50DE               	movf	postinc2,w,c
 10802  001922  6EFD               	movwf	tosl,c
 10803  001924  50DE               	movf	postinc2,w,c
 10804  001926  6EFE               	movwf	tosh,c
 10805  001928  50F8               	movf	tblptru,w,c
 10806  00192A  6EFF               	movwf	tosu,c
 10807  00192C  50FA               	movf	pclath,w,c
 10808  00192E  0E2D               	movlw	45
 10809  001930  0012               	return		;indir
 10810  001932                     l10323:
 10811                           
 10812                           ; BSR set to: 0
 10813  001932  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10814  001936  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10815  00193A  CFDE F0AC          	movff	postinc2,??__doprnt
 10816  00193E  CFDD F0AD          	movff	postdec2,??__doprnt+1
 10817  001942  C0AC  FFD9         	movff	??__doprnt,fsr2l
 10818  001946  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 10819  00194A  0E2D               	movlw	45
 10820  00194C  D06D               	goto	L17
 10821  00194E                     l10327:
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;doprnt.c: 1219: {;doprnt.c: 1220: tmpval.vd = val/dpowers[c];
 10825  00194E  C0B5  F01A         	movff	__doprnt@val,___lldiv@dividend
 10826  001952  C0B6  F01B         	movff	__doprnt@val+1,___lldiv@dividend+1
 10827  001956  C0B7  F01C         	movff	__doprnt@val+2,___lldiv@dividend+2
 10828  00195A  C0B8  F01D         	movff	__doprnt@val+3,___lldiv@dividend+3
 10829  00195E  51C8               	movf	__doprnt@c& (0+255),w,b
 10830  001960  0D04               	mullw	4
 10831  001962  0E79               	movlw	low _dpowers
 10832  001964  24F3               	addwf	prodl,w,c
 10833  001966  6EF6               	movwf	tblptrl,c
 10834  001968  0E7E               	movlw	high _dpowers
 10835  00196A  20F4               	addwfc	prodh,w,c
 10836  00196C  6EF7               	movwf	tblptrh,c
 10837  00196E                     	if	0	;There are less than 3 active tblptr bytes
 10838  00196E                     	endif
 10839  00196E  0009               	tblrd		*+
 10840  001970  CFF5 F01E          	movff	tablat,___lldiv@divisor
 10841  001974  0009               	tblrd		*+
 10842  001976  CFF5 F01F          	movff	tablat,___lldiv@divisor+1
 10843  00197A  0009               	tblrd		*+
 10844  00197C  CFF5 F020          	movff	tablat,___lldiv@divisor+2
 10845  001980  000A               	tblrd		*-
 10846  001982  CFF5 F021          	movff	tablat,___lldiv@divisor+3
 10847  001986  EC31  F026         	call	___lldiv
 10848  00198A  C01A  F0BD         	movff	?___lldiv,__doprnt@tmpval
 10849  00198E  C01B  F0BE         	movff	?___lldiv+1,__doprnt@tmpval+1
 10850  001992  C01C  F0BF         	movff	?___lldiv+2,__doprnt@tmpval+2
 10851  001996  C01D  F0C0         	movff	?___lldiv+3,__doprnt@tmpval+3
 10852                           
 10853                           ;doprnt.c: 1221: tmpval.vd %= 10;
 10854  00199A  C0BD  F01A         	movff	__doprnt@tmpval,___llmod@dividend
 10855  00199E  C0BE  F01B         	movff	__doprnt@tmpval+1,___llmod@dividend+1
 10856  0019A2  C0BF  F01C         	movff	__doprnt@tmpval+2,___llmod@dividend+2
 10857  0019A6  C0C0  F01D         	movff	__doprnt@tmpval+3,___llmod@dividend+3
 10858  0019AA  0E0A               	movlw	10
 10859  0019AC  6E1E               	movwf	___llmod@divisor,c
 10860  0019AE  0E00               	movlw	0
 10861  0019B0  6E1F               	movwf	___llmod@divisor+1,c
 10862  0019B2  0E00               	movlw	0
 10863  0019B4  6E20               	movwf	___llmod@divisor+2,c
 10864  0019B6  0E00               	movlw	0
 10865  0019B8  6E21               	movwf	___llmod@divisor+3,c
 10866  0019BA  ECD1  F027         	call	___llmod	;wreg free
 10867  0019BE  C01A  F0BD         	movff	?___llmod,__doprnt@tmpval
 10868  0019C2  C01B  F0BE         	movff	?___llmod+1,__doprnt@tmpval+1
 10869  0019C6  C01C  F0BF         	movff	?___llmod+2,__doprnt@tmpval+2
 10870  0019CA  C01D  F0C0         	movff	?___llmod+3,__doprnt@tmpval+3
 10871  0019CE  0100               	movlb	0	; () banked
 10872  0019D0  EE20 F002          	lfsr	2,2
 10873  0019D4  51A6               	movf	__doprnt@pb& (0+255),w,b
 10874  0019D6  26D9               	addwf	fsr2l,f,c
 10875  0019D8  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10876  0019DA  22DA               	addwfc	fsr2h,f,c
 10877  0019DC  50DE               	movf	postinc2,w,c
 10878  0019DE  10DE               	iorwf	postinc2,w,c
 10879  0019E0  B4D8               	btfsc	status,2,c
 10880  0019E2  D014               	goto	l10335
 10881                           
 10882                           ; BSR set to: 0
 10883  0019E4  EE20 F002          	lfsr	2,2
 10884  0019E8  51A6               	movf	__doprnt@pb& (0+255),w,b
 10885  0019EA  26D9               	addwf	fsr2l,f,c
 10886  0019EC  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10887  0019EE  22DA               	addwfc	fsr2h,f,c
 10888  0019F0  D801               	call	u11768
 10889  0019F2  D022               	goto	l10337
 10890  0019F4                     u11768:
 10891  0019F4  0005               	push	
 10892  0019F6  6EFA               	movwf	pclath,c
 10893  0019F8  50DE               	movf	postinc2,w,c
 10894  0019FA  6EFD               	movwf	tosl,c
 10895  0019FC  50DE               	movf	postinc2,w,c
 10896  0019FE  6EFE               	movwf	tosh,c
 10897  001A00  50F8               	movf	tblptru,w,c
 10898  001A02  6EFF               	movwf	tosu,c
 10899  001A04  50FA               	movf	pclath,w,c
 10900  001A06  51BD               	movf	__doprnt@tmpval& (0+255),w,b
 10901  001A08  0F30               	addlw	48
 10902  001A0A  0012               	return		;indir
 10903  001A0C                     l10335:
 10904                           
 10905                           ; BSR set to: 0
 10906  001A0C  51BD               	movf	__doprnt@tmpval& (0+255),w,b
 10907  001A0E  0F30               	addlw	48
 10908  001A10  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10909  001A14  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10910  001A18  CFDE F0AC          	movff	postinc2,??__doprnt
 10911  001A1C  CFDD F0AD          	movff	postdec2,??__doprnt+1
 10912  001A20  C0AC  FFD9         	movff	??__doprnt,fsr2l
 10913  001A24  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 10914  001A28                     L17:
 10915  001A28  6EDF               	movwf	indf2,c
 10916  001A2A  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10917  001A2E  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10918  001A32  2ADE               	incf	postinc2,f,c
 10919  001A34  0E00               	movlw	0
 10920  001A36  22DD               	addwfc	postdec2,f,c
 10921  001A38                     l10337:
 10922  001A38  0100               	movlb	0	; () banked
 10923  001A3A  07C8               	decf	__doprnt@c& (0+255),f,b
 10924  001A3C  29C8               	incf	__doprnt@c& (0+255),w,b
 10925  001A3E  B4D8               	btfsc	status,2,c
 10926  001A40  D037               	goto	l10349
 10927  001A42  D785               	goto	l10327
 10928  001A44                     l10339:
 10929                           
 10930                           ; BSR set to: 0
 10931  001A44  EE20 F002          	lfsr	2,2
 10932  001A48  51A6               	movf	__doprnt@pb& (0+255),w,b
 10933  001A4A  26D9               	addwf	fsr2l,f,c
 10934  001A4C  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10935  001A4E  22DA               	addwfc	fsr2h,f,c
 10936  001A50  50DE               	movf	postinc2,w,c
 10937  001A52  10DE               	iorwf	postinc2,w,c
 10938  001A54  B4D8               	btfsc	status,2,c
 10939  001A56  D013               	goto	l10343
 10940                           
 10941                           ; BSR set to: 0
 10942  001A58  EE20 F002          	lfsr	2,2
 10943  001A5C  51A6               	movf	__doprnt@pb& (0+255),w,b
 10944  001A5E  26D9               	addwf	fsr2l,f,c
 10945  001A60  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 10946  001A62  22DA               	addwfc	fsr2h,f,c
 10947  001A64  D801               	call	u11798
 10948  001A66  D020               	goto	l10347
 10949  001A68                     u11798:
 10950  001A68  0005               	push	
 10951  001A6A  6EFA               	movwf	pclath,c
 10952  001A6C  50DE               	movf	postinc2,w,c
 10953  001A6E  6EFD               	movwf	tosl,c
 10954  001A70  50DE               	movf	postinc2,w,c
 10955  001A72  6EFE               	movwf	tosh,c
 10956  001A74  50F8               	movf	tblptru,w,c
 10957  001A76  6EFF               	movwf	tosu,c
 10958  001A78  50FA               	movf	pclath,w,c
 10959  001A7A  0E30               	movlw	48
 10960  001A7C  0012               	return		;indir
 10961  001A7E                     l10343:
 10962                           
 10963                           ; BSR set to: 0
 10964  001A7E  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10965  001A82  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10966  001A86  CFDE F0AC          	movff	postinc2,??__doprnt
 10967  001A8A  CFDD F0AD          	movff	postdec2,??__doprnt+1
 10968  001A8E  C0AC  FFD9         	movff	??__doprnt,fsr2l
 10969  001A92  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 10970  001A96  0E30               	movlw	48
 10971  001A98  6EDF               	movwf	indf2,c
 10972                           
 10973                           ; BSR set to: 0
 10974  001A9A  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 10975  001A9E  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 10976  001AA2  2ADE               	incf	postinc2,f,c
 10977  001AA4  0E00               	movlw	0
 10978  001AA6  22DD               	addwfc	postdec2,f,c
 10979  001AA8                     l10347:
 10980                           
 10981                           ;doprnt.c: 1228: eexp--;
 10982  001AA8  0100               	movlb	0	; () banked
 10983  001AAA  07B9               	decf	__doprnt@eexp& (0+255),f,b
 10984  001AAC  A0D8               	btfss	status,0,c
 10985  001AAE  07BA               	decf	(__doprnt@eexp+1)& (0+255),f,b
 10986  001AB0                     l10349:
 10987                           
 10988                           ; BSR set to: 0
 10989  001AB0  BFBA               	btfsc	(__doprnt@eexp+1)& (0+255),7,b
 10990  001AB2  D005               	goto	u11800
 10991  001AB4  51BA               	movf	(__doprnt@eexp+1)& (0+255),w,b
 10992  001AB6  E1C6               	bnz	l10339
 10993  001AB8  05B9               	decf	__doprnt@eexp& (0+255),w,b
 10994  001ABA  B0D8               	btfsc	status,0,c
 10995  001ABC  D7C3               	goto	l10339
 10996  001ABE                     u11800:
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;doprnt.c: 1229: };doprnt.c: 1230: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
 11000  001ABE  BFC7               	btfsc	(__doprnt@prec+1)& (0+255),7,b
 11001  001AC0  D009               	goto	l1702
 11002  001AC2  51C7               	movf	(__doprnt@prec+1)& (0+255),w,b
 11003  001AC4  E104               	bnz	u11810
 11004  001AC6  0E09               	movlw	9
 11005  001AC8  5DC6               	subwf	__doprnt@prec& (0+255),w,b
 11006  001ACA  A0D8               	btfss	status,0,c
 11007  001ACC  D003               	goto	l1702
 11008  001ACE                     u11810:
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;doprnt.c: 1231: c = (sizeof dpowers/sizeof dpowers[0])-2;
 11012  001ACE  0E08               	movlw	8
 11013  001AD0  6FC8               	movwf	__doprnt@c& (0+255),b
 11014  001AD2  D002               	goto	l10355
 11015  001AD4                     l1702:
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;doprnt.c: 1232: else;doprnt.c: 1233: c = (char)prec;
 11019  001AD4  C0C6  F0C8         	movff	__doprnt@prec,__doprnt@c
 11020  001AD8                     l10355:
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;doprnt.c: 1234: prec -= (int)c;
 11024  001AD8  51C8               	movf	__doprnt@c& (0+255),w,b
 11025  001ADA  5FC6               	subwf	__doprnt@prec& (0+255),f,b
 11026  001ADC  0E00               	movlw	0
 11027  001ADE  5BC7               	subwfb	(__doprnt@prec+1)& (0+255),f,b
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;doprnt.c: 1238: if(c)
 11031  001AE0  51C8               	movf	__doprnt@c& (0+255),w,b
 11032  001AE2  B4D8               	btfsc	status,2,c
 11033  001AE4  D032               	goto	l10367
 11034                           
 11035                           ; BSR set to: 0
 11036  001AE6  EE20 F002          	lfsr	2,2
 11037  001AEA  51A6               	movf	__doprnt@pb& (0+255),w,b
 11038  001AEC  26D9               	addwf	fsr2l,f,c
 11039  001AEE  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11040  001AF0  22DA               	addwfc	fsr2h,f,c
 11041  001AF2  50DE               	movf	postinc2,w,c
 11042  001AF4  10DE               	iorwf	postinc2,w,c
 11043  001AF6  B4D8               	btfsc	status,2,c
 11044  001AF8  D013               	goto	l10363
 11045                           
 11046                           ; BSR set to: 0
 11047  001AFA  EE20 F002          	lfsr	2,2
 11048  001AFE  51A6               	movf	__doprnt@pb& (0+255),w,b
 11049  001B00  26D9               	addwf	fsr2l,f,c
 11050  001B02  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11051  001B04  22DA               	addwfc	fsr2h,f,c
 11052  001B06  D801               	call	u11848
 11053  001B08  D020               	goto	l10367
 11054  001B0A                     u11848:
 11055  001B0A  0005               	push	
 11056  001B0C  6EFA               	movwf	pclath,c
 11057  001B0E  50DE               	movf	postinc2,w,c
 11058  001B10  6EFD               	movwf	tosl,c
 11059  001B12  50DE               	movf	postinc2,w,c
 11060  001B14  6EFE               	movwf	tosh,c
 11061  001B16  50F8               	movf	tblptru,w,c
 11062  001B18  6EFF               	movwf	tosu,c
 11063  001B1A  50FA               	movf	pclath,w,c
 11064  001B1C  0E2E               	movlw	46
 11065  001B1E  0012               	return		;indir
 11066  001B20                     l10363:
 11067                           
 11068                           ; BSR set to: 0
 11069  001B20  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11070  001B24  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11071  001B28  CFDE F0AC          	movff	postinc2,??__doprnt
 11072  001B2C  CFDD F0AD          	movff	postdec2,??__doprnt+1
 11073  001B30  C0AC  FFD9         	movff	??__doprnt,fsr2l
 11074  001B34  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 11075  001B38  0E2E               	movlw	46
 11076  001B3A  6EDF               	movwf	indf2,c
 11077                           
 11078                           ; BSR set to: 0
 11079  001B3C  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11080  001B40  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11081  001B44  2ADE               	incf	postinc2,f,c
 11082  001B46  0E00               	movlw	0
 11083  001B48  22DD               	addwfc	postdec2,f,c
 11084  001B4A                     l10367:
 11085                           
 11086                           ;doprnt.c: 1246: val = (unsigned long)(fval * scale((signed char)c));
 11087  001B4A  0100               	movlb	0	; () banked
 11088  001B4C  51C8               	movf	__doprnt@c& (0+255),w,b
 11089  001B4E  EC72  F015         	call	_scale
 11090  001B52  C090  F0B2         	movff	?_scale,__doprnt$4004
 11091  001B56  C091  F0B3         	movff	?_scale+1,__doprnt$4004+1
 11092  001B5A  C092  F0B4         	movff	?_scale+2,__doprnt$4004+2
 11093                           
 11094                           ;doprnt.c: 1246: val = (unsigned long)(fval * scale((signed char)c));
 11095  001B5E  C0C3  F084         	movff	__doprnt@fval,___ftmul@f2
 11096  001B62  C0C4  F085         	movff	__doprnt@fval+1,___ftmul@f2+1
 11097  001B66  C0C5  F086         	movff	__doprnt@fval+2,___ftmul@f2+2
 11098  001B6A  C0B2  F081         	movff	__doprnt$4004,___ftmul@f1
 11099  001B6E  C0B3  F082         	movff	__doprnt$4004+1,___ftmul@f1+1
 11100  001B72  C0B4  F083         	movff	__doprnt$4004+2,___ftmul@f1+2
 11101  001B76  ECCB  F020         	call	___ftmul	;wreg free
 11102  001B7A  C081  F097         	movff	?___ftmul,___fttol@f1
 11103  001B7E  C082  F098         	movff	?___ftmul+1,___fttol@f1+1
 11104  001B82  C083  F099         	movff	?___ftmul+2,___fttol@f1+2
 11105  001B86  EC7D  F023         	call	___fttol	;wreg free
 11106  001B8A  C097  F0B5         	movff	?___fttol,__doprnt@val
 11107  001B8E  C098  F0B6         	movff	?___fttol+1,__doprnt@val+1
 11108  001B92  C099  F0B7         	movff	?___fttol+2,__doprnt@val+2
 11109  001B96  C09A  F0B8         	movff	?___fttol+3,__doprnt@val+3
 11110                           
 11111                           ;doprnt.c: 1247: while(c--) {
 11112  001B9A  D09C               	goto	l10383
 11113  001B9C                     l10371:
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;doprnt.c: 1248: tmpval.vd = val/dpowers[c];
 11117  001B9C  C0B5  F01A         	movff	__doprnt@val,___lldiv@dividend
 11118  001BA0  C0B6  F01B         	movff	__doprnt@val+1,___lldiv@dividend+1
 11119  001BA4  C0B7  F01C         	movff	__doprnt@val+2,___lldiv@dividend+2
 11120  001BA8  C0B8  F01D         	movff	__doprnt@val+3,___lldiv@dividend+3
 11121  001BAC  51C8               	movf	__doprnt@c& (0+255),w,b
 11122  001BAE  0D04               	mullw	4
 11123  001BB0  0E79               	movlw	low _dpowers
 11124  001BB2  24F3               	addwf	prodl,w,c
 11125  001BB4  6EF6               	movwf	tblptrl,c
 11126  001BB6  0E7E               	movlw	high _dpowers
 11127  001BB8  20F4               	addwfc	prodh,w,c
 11128  001BBA  6EF7               	movwf	tblptrh,c
 11129  001BBC                     	if	0	;There are less than 3 active tblptr bytes
 11130  001BBC                     	endif
 11131  001BBC  0009               	tblrd		*+
 11132  001BBE  CFF5 F01E          	movff	tablat,___lldiv@divisor
 11133  001BC2  0009               	tblrd		*+
 11134  001BC4  CFF5 F01F          	movff	tablat,___lldiv@divisor+1
 11135  001BC8  0009               	tblrd		*+
 11136  001BCA  CFF5 F020          	movff	tablat,___lldiv@divisor+2
 11137  001BCE  000A               	tblrd		*-
 11138  001BD0  CFF5 F021          	movff	tablat,___lldiv@divisor+3
 11139  001BD4  EC31  F026         	call	___lldiv	;wreg free
 11140  001BD8  C01A  F0BD         	movff	?___lldiv,__doprnt@tmpval
 11141  001BDC  C01B  F0BE         	movff	?___lldiv+1,__doprnt@tmpval+1
 11142  001BE0  C01C  F0BF         	movff	?___lldiv+2,__doprnt@tmpval+2
 11143  001BE4  C01D  F0C0         	movff	?___lldiv+3,__doprnt@tmpval+3
 11144                           
 11145                           ;doprnt.c: 1249: tmpval.vd %= 10;
 11146  001BE8  C0BD  F01A         	movff	__doprnt@tmpval,___llmod@dividend
 11147  001BEC  C0BE  F01B         	movff	__doprnt@tmpval+1,___llmod@dividend+1
 11148  001BF0  C0BF  F01C         	movff	__doprnt@tmpval+2,___llmod@dividend+2
 11149  001BF4  C0C0  F01D         	movff	__doprnt@tmpval+3,___llmod@dividend+3
 11150  001BF8  0E0A               	movlw	10
 11151  001BFA  6E1E               	movwf	___llmod@divisor,c
 11152  001BFC  0E00               	movlw	0
 11153  001BFE  6E1F               	movwf	___llmod@divisor+1,c
 11154  001C00  0E00               	movlw	0
 11155  001C02  6E20               	movwf	___llmod@divisor+2,c
 11156  001C04  0E00               	movlw	0
 11157  001C06  6E21               	movwf	___llmod@divisor+3,c
 11158  001C08  ECD1  F027         	call	___llmod	;wreg free
 11159  001C0C  C01A  F0BD         	movff	?___llmod,__doprnt@tmpval
 11160  001C10  C01B  F0BE         	movff	?___llmod+1,__doprnt@tmpval+1
 11161  001C14  C01C  F0BF         	movff	?___llmod+2,__doprnt@tmpval+2
 11162  001C18  C01D  F0C0         	movff	?___llmod+3,__doprnt@tmpval+3
 11163  001C1C  0100               	movlb	0	; () banked
 11164  001C1E  EE20 F002          	lfsr	2,2
 11165  001C22  51A6               	movf	__doprnt@pb& (0+255),w,b
 11166  001C24  26D9               	addwf	fsr2l,f,c
 11167  001C26  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11168  001C28  22DA               	addwfc	fsr2h,f,c
 11169  001C2A  50DE               	movf	postinc2,w,c
 11170  001C2C  10DE               	iorwf	postinc2,w,c
 11171  001C2E  B4D8               	btfsc	status,2,c
 11172  001C30  D014               	goto	l10379
 11173                           
 11174                           ; BSR set to: 0
 11175  001C32  EE20 F002          	lfsr	2,2
 11176  001C36  51A6               	movf	__doprnt@pb& (0+255),w,b
 11177  001C38  26D9               	addwf	fsr2l,f,c
 11178  001C3A  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11179  001C3C  22DA               	addwfc	fsr2h,f,c
 11180  001C3E  D801               	call	u11868
 11181  001C40  D022               	goto	l10381
 11182  001C42                     u11868:
 11183  001C42  0005               	push	
 11184  001C44  6EFA               	movwf	pclath,c
 11185  001C46  50DE               	movf	postinc2,w,c
 11186  001C48  6EFD               	movwf	tosl,c
 11187  001C4A  50DE               	movf	postinc2,w,c
 11188  001C4C  6EFE               	movwf	tosh,c
 11189  001C4E  50F8               	movf	tblptru,w,c
 11190  001C50  6EFF               	movwf	tosu,c
 11191  001C52  50FA               	movf	pclath,w,c
 11192  001C54  51BD               	movf	__doprnt@tmpval& (0+255),w,b
 11193  001C56  0F30               	addlw	48
 11194  001C58  0012               	return		;indir
 11195  001C5A                     l10379:
 11196                           
 11197                           ; BSR set to: 0
 11198  001C5A  51BD               	movf	__doprnt@tmpval& (0+255),w,b
 11199  001C5C  0F30               	addlw	48
 11200  001C5E  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11201  001C62  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11202  001C66  CFDE F0AC          	movff	postinc2,??__doprnt
 11203  001C6A  CFDD F0AD          	movff	postdec2,??__doprnt+1
 11204  001C6E  C0AC  FFD9         	movff	??__doprnt,fsr2l
 11205  001C72  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 11206  001C76  6EDF               	movwf	indf2,c
 11207  001C78  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11208  001C7C  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11209  001C80  2ADE               	incf	postinc2,f,c
 11210  001C82  0E00               	movlw	0
 11211  001C84  22DD               	addwfc	postdec2,f,c
 11212  001C86                     l10381:
 11213                           
 11214                           ;doprnt.c: 1251: val %= dpowers[c];
 11215  001C86  C0B5  F01A         	movff	__doprnt@val,___llmod@dividend
 11216  001C8A  C0B6  F01B         	movff	__doprnt@val+1,___llmod@dividend+1
 11217  001C8E  C0B7  F01C         	movff	__doprnt@val+2,___llmod@dividend+2
 11218  001C92  C0B8  F01D         	movff	__doprnt@val+3,___llmod@dividend+3
 11219  001C96  0100               	movlb	0	; () banked
 11220  001C98  51C8               	movf	__doprnt@c& (0+255),w,b
 11221  001C9A  0D04               	mullw	4
 11222  001C9C  0E79               	movlw	low _dpowers
 11223  001C9E  24F3               	addwf	prodl,w,c
 11224  001CA0  6EF6               	movwf	tblptrl,c
 11225  001CA2  0E7E               	movlw	high _dpowers
 11226  001CA4  20F4               	addwfc	prodh,w,c
 11227  001CA6  6EF7               	movwf	tblptrh,c
 11228  001CA8                     	if	0	;There are less than 3 active tblptr bytes
 11229  001CA8                     	endif
 11230  001CA8  0009               	tblrd		*+
 11231  001CAA  CFF5 F01E          	movff	tablat,___llmod@divisor
 11232  001CAE  0009               	tblrd		*+
 11233  001CB0  CFF5 F01F          	movff	tablat,___llmod@divisor+1
 11234  001CB4  0009               	tblrd		*+
 11235  001CB6  CFF5 F020          	movff	tablat,___llmod@divisor+2
 11236  001CBA  000A               	tblrd		*-
 11237  001CBC  CFF5 F021          	movff	tablat,___llmod@divisor+3
 11238  001CC0  ECD1  F027         	call	___llmod
 11239  001CC4  C01A  F0B5         	movff	?___llmod,__doprnt@val
 11240  001CC8  C01B  F0B6         	movff	?___llmod+1,__doprnt@val+1
 11241  001CCC  C01C  F0B7         	movff	?___llmod+2,__doprnt@val+2
 11242  001CD0  C01D  F0B8         	movff	?___llmod+3,__doprnt@val+3
 11243  001CD4                     l10383:
 11244  001CD4  0100               	movlb	0	; () banked
 11245  001CD6  07C8               	decf	__doprnt@c& (0+255),f,b
 11246  001CD8  29C8               	incf	__doprnt@c& (0+255),w,b
 11247  001CDA  B4D8               	btfsc	status,2,c
 11248  001CDC  D037               	goto	l10395
 11249  001CDE  D75E               	goto	l10371
 11250  001CE0                     l10385:
 11251                           
 11252                           ; BSR set to: 0
 11253  001CE0  EE20 F002          	lfsr	2,2
 11254  001CE4  51A6               	movf	__doprnt@pb& (0+255),w,b
 11255  001CE6  26D9               	addwf	fsr2l,f,c
 11256  001CE8  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11257  001CEA  22DA               	addwfc	fsr2h,f,c
 11258  001CEC  50DE               	movf	postinc2,w,c
 11259  001CEE  10DE               	iorwf	postinc2,w,c
 11260  001CF0  B4D8               	btfsc	status,2,c
 11261  001CF2  D013               	goto	l10389
 11262                           
 11263                           ; BSR set to: 0
 11264  001CF4  EE20 F002          	lfsr	2,2
 11265  001CF8  51A6               	movf	__doprnt@pb& (0+255),w,b
 11266  001CFA  26D9               	addwf	fsr2l,f,c
 11267  001CFC  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11268  001CFE  22DA               	addwfc	fsr2h,f,c
 11269  001D00  D801               	call	u11898
 11270  001D02  D020               	goto	l10393
 11271  001D04                     u11898:
 11272  001D04  0005               	push	
 11273  001D06  6EFA               	movwf	pclath,c
 11274  001D08  50DE               	movf	postinc2,w,c
 11275  001D0A  6EFD               	movwf	tosl,c
 11276  001D0C  50DE               	movf	postinc2,w,c
 11277  001D0E  6EFE               	movwf	tosh,c
 11278  001D10  50F8               	movf	tblptru,w,c
 11279  001D12  6EFF               	movwf	tosu,c
 11280  001D14  50FA               	movf	pclath,w,c
 11281  001D16  0E30               	movlw	48
 11282  001D18  0012               	return		;indir
 11283  001D1A                     l10389:
 11284                           
 11285                           ; BSR set to: 0
 11286  001D1A  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11287  001D1E  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11288  001D22  CFDE F0AC          	movff	postinc2,??__doprnt
 11289  001D26  CFDD F0AD          	movff	postdec2,??__doprnt+1
 11290  001D2A  C0AC  FFD9         	movff	??__doprnt,fsr2l
 11291  001D2E  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 11292  001D32  0E30               	movlw	48
 11293  001D34  6EDF               	movwf	indf2,c
 11294                           
 11295                           ; BSR set to: 0
 11296  001D36  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11297  001D3A  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11298  001D3E  2ADE               	incf	postinc2,f,c
 11299  001D40  0E00               	movlw	0
 11300  001D42  22DD               	addwfc	postdec2,f,c
 11301  001D44                     l10393:
 11302                           
 11303                           ;doprnt.c: 1256: prec--;
 11304  001D44  0100               	movlb	0	; () banked
 11305  001D46  07C6               	decf	__doprnt@prec& (0+255),f,b
 11306  001D48  A0D8               	btfss	status,0,c
 11307  001D4A  07C7               	decf	(__doprnt@prec+1)& (0+255),f,b
 11308  001D4C                     l10395:
 11309                           
 11310                           ; BSR set to: 0
 11311  001D4C  51C6               	movf	__doprnt@prec& (0+255),w,b
 11312  001D4E  11C7               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 11313  001D50  B4D8               	btfsc	status,2,c
 11314  001D52  D15D               	goto	l10477
 11315  001D54  D7C5               	goto	l10385
 11316  001D56                     l10397:
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;doprnt.c: 1265: };doprnt.c: 1309: if(prec == 0 && val == 0)
 11320  001D56  51C6               	movf	__doprnt@prec& (0+255),w,b
 11321  001D58  11C7               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 11322  001D5A  A4D8               	btfss	status,2,c
 11323  001D5C  D008               	goto	l10403
 11324                           
 11325                           ; BSR set to: 0
 11326  001D5E  51B5               	movf	__doprnt@val& (0+255),w,b
 11327  001D60  11B6               	iorwf	(__doprnt@val+1)& (0+255),w,b
 11328  001D62  11B7               	iorwf	(__doprnt@val+2)& (0+255),w,b
 11329  001D64  11B8               	iorwf	(__doprnt@val+3)& (0+255),w,b
 11330  001D66  A4D8               	btfss	status,2,c
 11331  001D68  D002               	goto	l10403
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;doprnt.c: 1310: prec++;
 11335  001D6A  4BC6               	infsnz	__doprnt@prec& (0+255),f,b
 11336  001D6C  2BC7               	incf	(__doprnt@prec+1)& (0+255),f,b
 11337  001D6E                     l10403:
 11338                           
 11339                           ; BSR set to: 0
 11340                           ;doprnt.c: 1358: if(c < prec)
 11341  001D6E  51C8               	movf	__doprnt@c& (0+255),w,b
 11342  001D70  6FAC               	movwf	??__doprnt& (0+255),b
 11343  001D72  6BAD               	clrf	(??__doprnt+1)& (0+255),b
 11344  001D74  51C6               	movf	__doprnt@prec& (0+255),w,b
 11345  001D76  5DAC               	subwf	??__doprnt& (0+255),w,b
 11346  001D78  51AD               	movf	(??__doprnt+1)& (0+255),w,b
 11347  001D7A  0A80               	xorlw	128
 11348  001D7C  6FAE               	movwf	(??__doprnt+2)& (0+255),b
 11349  001D7E  51C7               	movf	(__doprnt@prec+1)& (0+255),w,b
 11350  001D80  0A80               	xorlw	128
 11351  001D82  59AE               	subwfb	(??__doprnt+2)& (0+255),w,b
 11352  001D84  B0D8               	btfsc	status,0,c
 11353  001D86  D003               	goto	l10407
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;doprnt.c: 1359: c = prec;
 11357  001D88  C0C6  F0C8         	movff	__doprnt@prec,__doprnt@c
 11358  001D8C  D010               	goto	l10411
 11359  001D8E                     l10407:
 11360                           
 11361                           ; BSR set to: 0
 11362                           ;doprnt.c: 1360: else if(prec < c)
 11363  001D8E  51C8               	movf	__doprnt@c& (0+255),w,b
 11364  001D90  6FAC               	movwf	??__doprnt& (0+255),b
 11365  001D92  6BAD               	clrf	(??__doprnt+1)& (0+255),b
 11366  001D94  51AC               	movf	??__doprnt& (0+255),w,b
 11367  001D96  5DC6               	subwf	__doprnt@prec& (0+255),w,b
 11368  001D98  51C7               	movf	(__doprnt@prec+1)& (0+255),w,b
 11369  001D9A  0A80               	xorlw	128
 11370  001D9C  6FAE               	movwf	(??__doprnt+2)& (0+255),b
 11371  001D9E  51AD               	movf	(??__doprnt+1)& (0+255),w,b
 11372  001DA0  0A80               	xorlw	128
 11373  001DA2  59AE               	subwfb	(??__doprnt+2)& (0+255),w,b
 11374  001DA4  B0D8               	btfsc	status,0,c
 11375  001DA6  D003               	goto	l10411
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;doprnt.c: 1361: prec = c;
 11379  001DA8  C0C8  F0C6         	movff	__doprnt@c,__doprnt@prec
 11380  001DAC  6BC7               	clrf	(__doprnt@prec+1)& (0+255),b
 11381  001DAE                     l10411:
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;doprnt.c: 1364: if(width && flag & 0x03)
 11385  001DAE  51C1               	movf	__doprnt@width& (0+255),w,b
 11386  001DB0  11C2               	iorwf	(__doprnt@width+1)& (0+255),w,b
 11387  001DB2  B4D8               	btfsc	status,2,c
 11388  001DB4  D00D               	goto	l10417
 11389                           
 11390                           ; BSR set to: 0
 11391  001DB6  0E03               	movlw	3
 11392  001DB8  15BB               	andwf	__doprnt@flag& (0+255),w,b
 11393  001DBA  6FAC               	movwf	??__doprnt& (0+255),b
 11394  001DBC  0E00               	movlw	0
 11395  001DBE  15BC               	andwf	(__doprnt@flag+1)& (0+255),w,b
 11396  001DC0  6FAD               	movwf	(??__doprnt+1)& (0+255),b
 11397  001DC2  51AC               	movf	??__doprnt& (0+255),w,b
 11398  001DC4  11AD               	iorwf	(??__doprnt+1)& (0+255),w,b
 11399  001DC6  B4D8               	btfsc	status,2,c
 11400  001DC8  D003               	goto	l10417
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;doprnt.c: 1365: width--;
 11404  001DCA  07C1               	decf	__doprnt@width& (0+255),f,b
 11405  001DCC  A0D8               	btfss	status,0,c
 11406  001DCE  07C2               	decf	(__doprnt@width+1)& (0+255),f,b
 11407  001DD0                     l10417:
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;doprnt.c: 1367: if(flag & 0x4000) {
 11411  001DD0  ADBC               	btfss	(__doprnt@flag+1)& (0+255),6,b
 11412  001DD2  D013               	goto	l10425
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;doprnt.c: 1368: if(width > prec)
 11416  001DD4  51C1               	movf	__doprnt@width& (0+255),w,b
 11417  001DD6  5DC6               	subwf	__doprnt@prec& (0+255),w,b
 11418  001DD8  51C7               	movf	(__doprnt@prec+1)& (0+255),w,b
 11419  001DDA  0A80               	xorlw	128
 11420  001DDC  6FAC               	movwf	??__doprnt& (0+255),b
 11421  001DDE  51C2               	movf	(__doprnt@width+1)& (0+255),w,b
 11422  001DE0  0A80               	xorlw	128
 11423  001DE2  59AC               	subwfb	??__doprnt& (0+255),w,b
 11424  001DE4  B0D8               	btfsc	status,0,c
 11425  001DE6  D005               	goto	l10423
 11426                           
 11427                           ; BSR set to: 0
 11428                           ;doprnt.c: 1369: width -= prec;
 11429  001DE8  51C6               	movf	__doprnt@prec& (0+255),w,b
 11430  001DEA  5FC1               	subwf	__doprnt@width& (0+255),f,b
 11431  001DEC  51C7               	movf	(__doprnt@prec+1)& (0+255),w,b
 11432  001DEE  5BC2               	subwfb	(__doprnt@width+1)& (0+255),f,b
 11433  001DF0  D004               	goto	l10425
 11434  001DF2                     l10423:
 11435                           
 11436                           ; BSR set to: 0
 11437                           ;doprnt.c: 1370: else;doprnt.c: 1371: width = 0;
 11438  001DF2  0E00               	movlw	0
 11439  001DF4  6FC2               	movwf	(__doprnt@width+1)& (0+255),b
 11440  001DF6  0E00               	movlw	0
 11441  001DF8  6FC1               	movwf	__doprnt@width& (0+255),b
 11442  001DFA                     l10425:
 11443                           
 11444                           ; BSR set to: 0
 11445                           ;doprnt.c: 1372: };doprnt.c: 1400: if(width > c)
 11446  001DFA  51C8               	movf	__doprnt@c& (0+255),w,b
 11447  001DFC  6FAC               	movwf	??__doprnt& (0+255),b
 11448  001DFE  6BAD               	clrf	(??__doprnt+1)& (0+255),b
 11449  001E00  51C1               	movf	__doprnt@width& (0+255),w,b
 11450  001E02  5DAC               	subwf	??__doprnt& (0+255),w,b
 11451  001E04  51AD               	movf	(??__doprnt+1)& (0+255),w,b
 11452  001E06  0A80               	xorlw	128
 11453  001E08  6FAE               	movwf	(??__doprnt+2)& (0+255),b
 11454  001E0A  51C2               	movf	(__doprnt@width+1)& (0+255),w,b
 11455  001E0C  0A80               	xorlw	128
 11456  001E0E  59AE               	subwfb	(??__doprnt+2)& (0+255),w,b
 11457  001E10  B0D8               	btfsc	status,0,c
 11458  001E12  D005               	goto	l10429
 11459                           
 11460                           ; BSR set to: 0
 11461                           ;doprnt.c: 1401: width -= c;
 11462  001E14  51C8               	movf	__doprnt@c& (0+255),w,b
 11463  001E16  5FC1               	subwf	__doprnt@width& (0+255),f,b
 11464  001E18  0E00               	movlw	0
 11465  001E1A  5BC2               	subwfb	(__doprnt@width+1)& (0+255),f,b
 11466  001E1C  D004               	goto	l10431
 11467  001E1E                     l10429:
 11468                           
 11469                           ; BSR set to: 0
 11470                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
 11471  001E1E  0E00               	movlw	0
 11472  001E20  6FC2               	movwf	(__doprnt@width+1)& (0+255),b
 11473  001E22  0E00               	movlw	0
 11474  001E24  6FC1               	movwf	__doprnt@width& (0+255),b
 11475  001E26                     l10431:
 11476                           
 11477                           ; BSR set to: 0
 11478                           ;doprnt.c: 1406: if(flag & 0x04) {
 11479  001E26  A5BB               	btfss	__doprnt@flag& (0+255),2,b
 11480  001E28  D078               	goto	l10455
 11481                           
 11482                           ; BSR set to: 0
 11483                           ;doprnt.c: 1411: if(flag & 0x03)
 11484  001E2A  0E03               	movlw	3
 11485  001E2C  15BB               	andwf	__doprnt@flag& (0+255),w,b
 11486  001E2E  6FAC               	movwf	??__doprnt& (0+255),b
 11487  001E30  0E00               	movlw	0
 11488  001E32  15BC               	andwf	(__doprnt@flag+1)& (0+255),w,b
 11489  001E34  6FAD               	movwf	(??__doprnt+1)& (0+255),b
 11490  001E36  51AC               	movf	??__doprnt& (0+255),w,b
 11491  001E38  11AD               	iorwf	(??__doprnt+1)& (0+255),w,b
 11492  001E3A  B4D8               	btfsc	status,2,c
 11493  001E3C  D032               	goto	l10443
 11494                           
 11495                           ; BSR set to: 0
 11496  001E3E  EE20 F002          	lfsr	2,2
 11497  001E42  51A6               	movf	__doprnt@pb& (0+255),w,b
 11498  001E44  26D9               	addwf	fsr2l,f,c
 11499  001E46  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11500  001E48  22DA               	addwfc	fsr2h,f,c
 11501  001E4A  50DE               	movf	postinc2,w,c
 11502  001E4C  10DE               	iorwf	postinc2,w,c
 11503  001E4E  B4D8               	btfsc	status,2,c
 11504  001E50  D013               	goto	l10439
 11505                           
 11506                           ; BSR set to: 0
 11507  001E52  EE20 F002          	lfsr	2,2
 11508  001E56  51A6               	movf	__doprnt@pb& (0+255),w,b
 11509  001E58  26D9               	addwf	fsr2l,f,c
 11510  001E5A  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11511  001E5C  22DA               	addwfc	fsr2h,f,c
 11512  001E5E  D801               	call	u12038
 11513  001E60  D020               	goto	l10443
 11514  001E62                     u12038:
 11515  001E62  0005               	push	
 11516  001E64  6EFA               	movwf	pclath,c
 11517  001E66  50DE               	movf	postinc2,w,c
 11518  001E68  6EFD               	movwf	tosl,c
 11519  001E6A  50DE               	movf	postinc2,w,c
 11520  001E6C  6EFE               	movwf	tosh,c
 11521  001E6E  50F8               	movf	tblptru,w,c
 11522  001E70  6EFF               	movwf	tosu,c
 11523  001E72  50FA               	movf	pclath,w,c
 11524  001E74  0E2D               	movlw	45
 11525  001E76  0012               	return		;indir
 11526  001E78                     l10439:
 11527                           
 11528                           ; BSR set to: 0
 11529  001E78  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11530  001E7C  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11531  001E80  CFDE F0AC          	movff	postinc2,??__doprnt
 11532  001E84  CFDD F0AD          	movff	postdec2,??__doprnt+1
 11533  001E88  C0AC  FFD9         	movff	??__doprnt,fsr2l
 11534  001E8C  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 11535  001E90  0E2D               	movlw	45
 11536  001E92  6EDF               	movwf	indf2,c
 11537                           
 11538                           ; BSR set to: 0
 11539  001E94  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11540  001E98  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11541  001E9C  2ADE               	incf	postinc2,f,c
 11542  001E9E  0E00               	movlw	0
 11543  001EA0  22DD               	addwfc	postdec2,f,c
 11544  001EA2                     l10443:
 11545                           
 11546                           ;doprnt.c: 1434: if(width)
 11547  001EA2  0100               	movlb	0	; () banked
 11548  001EA4  51C1               	movf	__doprnt@width& (0+255),w,b
 11549  001EA6  11C2               	iorwf	(__doprnt@width+1)& (0+255),w,b
 11550  001EA8  B4D8               	btfsc	status,2,c
 11551  001EAA  D0B1               	goto	l10477
 11552                           
 11553                           ; BSR set to: 0
 11554  001EAC  EE20 F002          	lfsr	2,2
 11555  001EB0  51A6               	movf	__doprnt@pb& (0+255),w,b
 11556  001EB2  26D9               	addwf	fsr2l,f,c
 11557  001EB4  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11558  001EB6  22DA               	addwfc	fsr2h,f,c
 11559  001EB8  50DE               	movf	postinc2,w,c
 11560  001EBA  10DE               	iorwf	postinc2,w,c
 11561  001EBC  B4D8               	btfsc	status,2,c
 11562  001EBE  D013               	goto	l10449
 11563                           
 11564                           ; BSR set to: 0
 11565  001EC0  EE20 F002          	lfsr	2,2
 11566  001EC4  51A6               	movf	__doprnt@pb& (0+255),w,b
 11567  001EC6  26D9               	addwf	fsr2l,f,c
 11568  001EC8  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11569  001ECA  22DA               	addwfc	fsr2h,f,c
 11570  001ECC  D801               	call	u12068
 11571  001ECE  D020               	goto	l10453
 11572  001ED0                     u12068:
 11573  001ED0  0005               	push	
 11574  001ED2  6EFA               	movwf	pclath,c
 11575  001ED4  50DE               	movf	postinc2,w,c
 11576  001ED6  6EFD               	movwf	tosl,c
 11577  001ED8  50DE               	movf	postinc2,w,c
 11578  001EDA  6EFE               	movwf	tosh,c
 11579  001EDC  50F8               	movf	tblptru,w,c
 11580  001EDE  6EFF               	movwf	tosu,c
 11581  001EE0  50FA               	movf	pclath,w,c
 11582  001EE2  0E30               	movlw	48
 11583  001EE4  0012               	return		;indir
 11584  001EE6                     l10449:
 11585                           
 11586                           ; BSR set to: 0
 11587  001EE6  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11588  001EEA  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11589  001EEE  CFDE F0AC          	movff	postinc2,??__doprnt
 11590  001EF2  CFDD F0AD          	movff	postdec2,??__doprnt+1
 11591  001EF6  C0AC  FFD9         	movff	??__doprnt,fsr2l
 11592  001EFA  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 11593  001EFE  0E30               	movlw	48
 11594  001F00  6EDF               	movwf	indf2,c
 11595                           
 11596                           ; BSR set to: 0
 11597  001F02  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11598  001F06  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11599  001F0A  2ADE               	incf	postinc2,f,c
 11600  001F0C  0E00               	movlw	0
 11601  001F0E  22DD               	addwfc	postdec2,f,c
 11602  001F10                     l10453:
 11603                           
 11604                           ;doprnt.c: 1437: while(--width);
 11605  001F10  0100               	movlb	0	; () banked
 11606  001F12  07C1               	decf	__doprnt@width& (0+255),f,b
 11607  001F14  A0D8               	btfss	status,0,c
 11608  001F16  07C2               	decf	(__doprnt@width+1)& (0+255),f,b
 11609  001F18  D7C5               	goto	L18
 11610  001F1A                     l10455:
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
 11614  001F1A  51C1               	movf	__doprnt@width& (0+255),w,b
 11615  001F1C  11C2               	iorwf	(__doprnt@width+1)& (0+255),w,b
 11616  001F1E  B4D8               	btfsc	status,2,c
 11617  001F20  D03A               	goto	u12110
 11618  001F22                     u12080:
 11619                           
 11620                           ; BSR set to: 0
 11621  001F22  EE20 F002          	lfsr	2,2
 11622  001F26  51A6               	movf	__doprnt@pb& (0+255),w,b
 11623  001F28  26D9               	addwf	fsr2l,f,c
 11624  001F2A  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11625  001F2C  22DA               	addwfc	fsr2h,f,c
 11626  001F2E  50DE               	movf	postinc2,w,c
 11627  001F30  10DE               	iorwf	postinc2,w,c
 11628  001F32  B4D8               	btfsc	status,2,c
 11629  001F34  D013               	goto	l10461
 11630                           
 11631                           ; BSR set to: 0
 11632  001F36  EE20 F002          	lfsr	2,2
 11633  001F3A  51A6               	movf	__doprnt@pb& (0+255),w,b
 11634  001F3C  26D9               	addwf	fsr2l,f,c
 11635  001F3E  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11636  001F40  22DA               	addwfc	fsr2h,f,c
 11637  001F42  D801               	call	u12108
 11638  001F44  D020               	goto	l10465
 11639  001F46                     u12108:
 11640  001F46  0005               	push	
 11641  001F48  6EFA               	movwf	pclath,c
 11642  001F4A  50DE               	movf	postinc2,w,c
 11643  001F4C  6EFD               	movwf	tosl,c
 11644  001F4E  50DE               	movf	postinc2,w,c
 11645  001F50  6EFE               	movwf	tosh,c
 11646  001F52  50F8               	movf	tblptru,w,c
 11647  001F54  6EFF               	movwf	tosu,c
 11648  001F56  50FA               	movf	pclath,w,c
 11649  001F58  0E20               	movlw	32
 11650  001F5A  0012               	return		;indir
 11651  001F5C                     l10461:
 11652                           
 11653                           ; BSR set to: 0
 11654  001F5C  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11655  001F60  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11656  001F64  CFDE F0AC          	movff	postinc2,??__doprnt
 11657  001F68  CFDD F0AD          	movff	postdec2,??__doprnt+1
 11658  001F6C  C0AC  FFD9         	movff	??__doprnt,fsr2l
 11659  001F70  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 11660  001F74  0E20               	movlw	32
 11661  001F76  6EDF               	movwf	indf2,c
 11662                           
 11663                           ; BSR set to: 0
 11664  001F78  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11665  001F7C  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11666  001F80  2ADE               	incf	postinc2,f,c
 11667  001F82  0E00               	movlw	0
 11668  001F84  22DD               	addwfc	postdec2,f,c
 11669  001F86                     l10465:
 11670                           
 11671                           ;doprnt.c: 1450: while(--width);
 11672  001F86  0100               	movlb	0	; () banked
 11673  001F88  07C1               	decf	__doprnt@width& (0+255),f,b
 11674  001F8A  A0D8               	btfss	status,0,c
 11675  001F8C  07C2               	decf	(__doprnt@width+1)& (0+255),f,b
 11676  001F8E  51C1               	movf	__doprnt@width& (0+255),w,b
 11677  001F90  11C2               	iorwf	(__doprnt@width+1)& (0+255),w,b
 11678  001F92  A4D8               	btfss	status,2,c
 11679  001F94  D7C6               	goto	u12080
 11680  001F96                     u12110:
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;doprnt.c: 1457: if(flag & 0x03)
 11684  001F96  0E03               	movlw	3
 11685  001F98  15BB               	andwf	__doprnt@flag& (0+255),w,b
 11686  001F9A  6FAC               	movwf	??__doprnt& (0+255),b
 11687  001F9C  0E00               	movlw	0
 11688  001F9E  15BC               	andwf	(__doprnt@flag+1)& (0+255),w,b
 11689  001FA0  6FAD               	movwf	(??__doprnt+1)& (0+255),b
 11690  001FA2  51AC               	movf	??__doprnt& (0+255),w,b
 11691  001FA4  11AD               	iorwf	(??__doprnt+1)& (0+255),w,b
 11692  001FA6  B4D8               	btfsc	status,2,c
 11693  001FA8  D032               	goto	l10477
 11694                           
 11695                           ; BSR set to: 0
 11696  001FAA  EE20 F002          	lfsr	2,2
 11697  001FAE  51A6               	movf	__doprnt@pb& (0+255),w,b
 11698  001FB0  26D9               	addwf	fsr2l,f,c
 11699  001FB2  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11700  001FB4  22DA               	addwfc	fsr2h,f,c
 11701  001FB6  50DE               	movf	postinc2,w,c
 11702  001FB8  10DE               	iorwf	postinc2,w,c
 11703  001FBA  B4D8               	btfsc	status,2,c
 11704  001FBC  D013               	goto	l10473
 11705                           
 11706                           ; BSR set to: 0
 11707  001FBE  EE20 F002          	lfsr	2,2
 11708  001FC2  51A6               	movf	__doprnt@pb& (0+255),w,b
 11709  001FC4  26D9               	addwf	fsr2l,f,c
 11710  001FC6  51A7               	movf	(__doprnt@pb+1)& (0+255),w,b
 11711  001FC8  22DA               	addwfc	fsr2h,f,c
 11712  001FCA  D801               	call	u12148
 11713  001FCC  D020               	goto	l10477
 11714  001FCE                     u12148:
 11715  001FCE  0005               	push	
 11716  001FD0  6EFA               	movwf	pclath,c
 11717  001FD2  50DE               	movf	postinc2,w,c
 11718  001FD4  6EFD               	movwf	tosl,c
 11719  001FD6  50DE               	movf	postinc2,w,c
 11720  001FD8  6EFE               	movwf	tosh,c
 11721  001FDA  50F8               	movf	tblptru,w,c
 11722  001FDC  6EFF               	movwf	tosu,c
 11723  001FDE  50FA               	movf	pclath,w,c
 11724  001FE0  0E2D               	movlw	45
 11725  001FE2  0012               	return		;indir
 11726  001FE4                     l10473:
 11727                           
 11728                           ; BSR set to: 0
 11729  001FE4  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11730  001FE8  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11731  001FEC  CFDE F0AC          	movff	postinc2,??__doprnt
 11732  001FF0  CFDD F0AD          	movff	postdec2,??__doprnt+1
 11733  001FF4  C0AC  FFD9         	movff	??__doprnt,fsr2l
 11734  001FF8  C0AD  FFDA         	movff	??__doprnt+1,fsr2h
 11735  001FFC  0E2D               	movlw	45
 11736  001FFE  6EDF               	movwf	indf2,c
 11737  002000                     l10475:
 11738                           
 11739                           ; BSR set to: 0
 11740  002000  C0A6  FFD9         	movff	__doprnt@pb,fsr2l
 11741  002004  C0A7  FFDA         	movff	__doprnt@pb+1,fsr2h
 11742  002008  2ADE               	incf	postinc2,f,c
 11743  00200A  0E00               	movlw	0
 11744  00200C  22DD               	addwfc	postdec2,f,c
 11745  00200E                     l10477:
 11746  00200E  C0A8  FFF6         	movff	__doprnt@f,tblptrl
 11747  002012  C0A9  FFF7         	movff	__doprnt@f+1,tblptrh
 11748  002016  0100               	movlb	0	; () banked
 11749  002018  4BA8               	infsnz	__doprnt@f& (0+255),f,b
 11750  00201A  2BA9               	incf	(__doprnt@f+1)& (0+255),f,b
 11751  00201C                     	if	0	;tblptru may be non-zero
 11752  00201C                     	endif
 11753  00201C                     	if	0	;tblptru may be non-zero
 11754  00201C                     	endif
 11755  00201C  0008               	tblrd		*
 11756  00201E  CFF5 F0C8          	movff	tablat,__doprnt@c
 11757  002022  51C8               	movf	__doprnt@c& (0+255),w,b
 11758  002024  A4D8               	btfss	status,2,c
 11759  002026  EF24  F009         	goto	l10135
 11760  00202A                     u12150:
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;doprnt.c: 1559: return 0;
 11764  00202A  0E00               	movlw	0
 11765  00202C  6FA7               	movwf	(?__doprnt+1)& (0+255),b
 11766  00202E  0E00               	movlw	0
 11767  002030  6FA6               	movwf	?__doprnt& (0+255),b
 11768                           
 11769                           ; BSR set to: 0
 11770  002032  0012               	return		;funcret
 11771  002034                     __end_of__doprnt:
 11772                           	opt callstack 0
 11773                           
 11774 ;; *************** function _scale *****************
 11775 ;; Defined at:
 11776 ;;		line 433 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
 11777 ;; Parameters:    Size  Location     Type
 11778 ;;  scl             1    wreg     char 
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;  scl             1   54[BANK0 ] char 
 11781 ;; Return value:  Size  Location     Type
 11782 ;;                  3   48[BANK0 ] char 
 11783 ;; Registers used:
 11784 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11785 ;; Tracked objects:
 11786 ;;		On entry : 0/0
 11787 ;;		On exit  : 0/0
 11788 ;;		Unchanged: 0/0
 11789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11790 ;;      Params:         0       3       0       0       0       0       0
 11791 ;;      Locals:         0       4       0       0       0       0       0
 11792 ;;      Temps:          0       0       0       0       0       0       0
 11793 ;;      Totals:         0       7       0       0       0       0       0
 11794 ;;Total ram usage:        7 bytes
 11795 ;; Hardware stack levels used:    1
 11796 ;; Hardware stack levels required when called:    7
 11797 ;; This function calls:
 11798 ;;		___awdiv
 11799 ;;		___awmod
 11800 ;;		___ftmul
 11801 ;; This function is called by:
 11802 ;;		__doprnt
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           	psect	text41
 11807  002AE4                     __ptext41:
 11808                           	opt callstack 0
 11809  002AE4                     _scale:
 11810                           	opt callstack 20
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;incstack = 0
 11814                           ;scale@scl stored from wreg
 11815  002AE4  0100               	movlb	0	; () banked
 11816  002AE6  6F96               	movwf	scale@scl& (0+255),b
 11817                           
 11818                           ;doprnt.c: 436: if(scl < 0) {
 11819  002AE8  0100               	movlb	0	; () banked
 11820  002AEA  AF96               	btfss	scale@scl& (0+255),7,b
 11821  002AEC  D0DC               	goto	l9757
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;doprnt.c: 437: scl = -scl;
 11825  002AEE  6D96               	negf	scale@scl& (0+255),b
 11826                           
 11827                           ;doprnt.c: 438: if(scl>=110)
 11828  002AF0  5196               	movf	scale@scl& (0+255),w,b
 11829  002AF2  0A80               	xorlw	128
 11830  002AF4  0F12               	addlw	-238
 11831  002AF6  A0D8               	btfss	status,0,c
 11832  002AF8  D07B               	goto	l9747
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
 11836  002AFA  0E00               	movlw	0
 11837  002AFC  6E23               	movwf	___awdiv@divisor+1,c
 11838  002AFE  0E0A               	movlw	10
 11839  002B00  6E22               	movwf	___awdiv@divisor,c
 11840  002B02  0E00               	movlw	0
 11841  002B04  6E1D               	movwf	___awmod@divisor+1,c
 11842  002B06  0E64               	movlw	100
 11843  002B08  6E1C               	movwf	___awmod@divisor,c
 11844  002B0A  5196               	movf	scale@scl& (0+255),w,b
 11845  002B0C  6E1A               	movwf	___awmod@dividend,c
 11846  002B0E  6A1B               	clrf	___awmod@dividend+1,c
 11847  002B10  BE1A               	btfsc	___awmod@dividend,7,c
 11848  002B12  061B               	decf	___awmod@dividend+1,f,c
 11849  002B14  EC99  F027         	call	___awmod
 11850  002B18  C01A  F020         	movff	?___awmod,___awdiv@dividend
 11851  002B1C  C01B  F021         	movff	?___awmod+1,___awdiv@dividend+1
 11852  002B20  ECEF  F025         	call	___awdiv	;wreg free
 11853  002B24  0E09               	movlw	9
 11854  002B26  2620               	addwf	?___awdiv,f,c
 11855  002B28  5020               	movf	?___awdiv,w,c
 11856  002B2A  0D03               	mullw	3
 11857  002B2C  0E52               	movlw	low __npowers_
 11858  002B2E  24F3               	addwf	prodl,w,c
 11859  002B30  6EF6               	movwf	tblptrl,c
 11860  002B32  0E7E               	movlw	high __npowers_
 11861  002B34  20F4               	addwfc	prodh,w,c
 11862  002B36  6EF7               	movwf	tblptrh,c
 11863  002B38                     	if	0	;There are less than 3 active tblptr bytes
 11864  002B38                     	endif
 11865  002B38  0009               	tblrd		*+
 11866  002B3A  CFF5 F084          	movff	tablat,___ftmul@f2
 11867  002B3E  0009               	tblrd		*+
 11868  002B40  CFF5 F085          	movff	tablat,___ftmul@f2+1
 11869  002B44  000A               	tblrd		*-
 11870  002B46  CFF5 F086          	movff	tablat,___ftmul@f2+2
 11871  002B4A  0E00               	movlw	0
 11872  002B4C  6E23               	movwf	___awdiv@divisor+1,c
 11873  002B4E  0E64               	movlw	100
 11874  002B50  6E22               	movwf	___awdiv@divisor,c
 11875  002B52  0100               	movlb	0	; () banked
 11876  002B54  5196               	movf	scale@scl& (0+255),w,b
 11877  002B56  6E20               	movwf	___awdiv@dividend,c
 11878  002B58  6A21               	clrf	___awdiv@dividend+1,c
 11879  002B5A  BE20               	btfsc	___awdiv@dividend,7,c
 11880  002B5C  0621               	decf	___awdiv@dividend+1,f,c
 11881  002B5E  ECEF  F025         	call	___awdiv	;wreg free
 11882  002B62  0E12               	movlw	18
 11883  002B64  2620               	addwf	?___awdiv,f,c
 11884  002B66  5020               	movf	?___awdiv,w,c
 11885  002B68  0D03               	mullw	3
 11886  002B6A  0E52               	movlw	low __npowers_
 11887  002B6C  24F3               	addwf	prodl,w,c
 11888  002B6E  6EF6               	movwf	tblptrl,c
 11889  002B70  0E7E               	movlw	high __npowers_
 11890  002B72  20F4               	addwfc	prodh,w,c
 11891  002B74  6EF7               	movwf	tblptrh,c
 11892  002B76                     	if	0	;There are less than 3 active tblptr bytes
 11893  002B76                     	endif
 11894  002B76  0009               	tblrd		*+
 11895  002B78  CFF5 F081          	movff	tablat,___ftmul@f1
 11896  002B7C  0009               	tblrd		*+
 11897  002B7E  CFF5 F082          	movff	tablat,___ftmul@f1+1
 11898  002B82  000A               	tblrd		*-
 11899  002B84  CFF5 F083          	movff	tablat,___ftmul@f1+2
 11900  002B88  ECCB  F020         	call	___ftmul	;wreg free
 11901  002B8C  C081  F093         	movff	?___ftmul,_scale$4003
 11902  002B90  C082  F094         	movff	?___ftmul+1,_scale$4003+1
 11903  002B94  C083  F095         	movff	?___ftmul+2,_scale$4003+2
 11904                           
 11905                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
 11906  002B98  C093  F081         	movff	_scale$4003,___ftmul@f1
 11907  002B9C  C094  F082         	movff	_scale$4003+1,___ftmul@f1+1
 11908  002BA0  C095  F083         	movff	_scale$4003+2,___ftmul@f1+2
 11909  002BA4  0E00               	movlw	0
 11910  002BA6  6E1D               	movwf	___awmod@divisor+1,c
 11911  002BA8  0E0A               	movlw	10
 11912  002BAA  6E1C               	movwf	___awmod@divisor,c
 11913  002BAC  0100               	movlb	0	; () banked
 11914  002BAE  5196               	movf	scale@scl& (0+255),w,b
 11915  002BB0  6E1A               	movwf	___awmod@dividend,c
 11916  002BB2  6A1B               	clrf	___awmod@dividend+1,c
 11917  002BB4  BE1A               	btfsc	___awmod@dividend,7,c
 11918  002BB6  061B               	decf	___awmod@dividend+1,f,c
 11919  002BB8  EC99  F027         	call	___awmod	;wreg free
 11920  002BBC  501A               	movf	?___awmod,w,c
 11921  002BBE  0D03               	mullw	3
 11922  002BC0  0E52               	movlw	low __npowers_
 11923  002BC2  24F3               	addwf	prodl,w,c
 11924  002BC4  6EF6               	movwf	tblptrl,c
 11925  002BC6  0E7E               	movlw	high __npowers_
 11926  002BC8  20F4               	addwfc	prodh,w,c
 11927  002BCA  6EF7               	movwf	tblptrh,c
 11928  002BCC                     	if	0	;There are less than 3 active tblptr bytes
 11929  002BCC                     	endif
 11930  002BCC  0009               	tblrd		*+
 11931  002BCE  CFF5 F084          	movff	tablat,___ftmul@f2
 11932  002BD2  0009               	tblrd		*+
 11933  002BD4  CFF5 F085          	movff	tablat,___ftmul@f2+1
 11934  002BD8  000A               	tblrd		*-
 11935  002BDA  CFF5 F086          	movff	tablat,___ftmul@f2+2
 11936  002BDE  ECCB  F020         	call	___ftmul	;wreg free
 11937  002BE2  C081  F090         	movff	?___ftmul,?_scale
 11938  002BE6  C082  F091         	movff	?___ftmul+1,?_scale+1
 11939  002BEA  C083  F092         	movff	?___ftmul+2,?_scale+2
 11940  002BEE  0012               	return	
 11941  002BF0                     l9747:
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;doprnt.c: 440: else if(scl > 10)
 11945  002BF0  5196               	movf	scale@scl& (0+255),w,b
 11946  002BF2  0A80               	xorlw	128
 11947  002BF4  0F75               	addlw	-139
 11948  002BF6  A0D8               	btfss	status,0,c
 11949  002BF8  D044               	goto	l9753
 11950                           
 11951                           ; BSR set to: 0
 11952                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
 11953  002BFA  0E00               	movlw	0
 11954  002BFC  6E23               	movwf	___awdiv@divisor+1,c
 11955  002BFE  0E0A               	movlw	10
 11956  002C00  6E22               	movwf	___awdiv@divisor,c
 11957  002C02  5196               	movf	scale@scl& (0+255),w,b
 11958  002C04  6E20               	movwf	___awdiv@dividend,c
 11959  002C06  6A21               	clrf	___awdiv@dividend+1,c
 11960  002C08  BE20               	btfsc	___awdiv@dividend,7,c
 11961  002C0A  0621               	decf	___awdiv@dividend+1,f,c
 11962  002C0C  ECEF  F025         	call	___awdiv	;wreg free
 11963  002C10  0E09               	movlw	9
 11964  002C12  2620               	addwf	?___awdiv,f,c
 11965  002C14  5020               	movf	?___awdiv,w,c
 11966  002C16  0D03               	mullw	3
 11967  002C18  0E52               	movlw	low __npowers_
 11968  002C1A  24F3               	addwf	prodl,w,c
 11969  002C1C  6EF6               	movwf	tblptrl,c
 11970  002C1E  0E7E               	movlw	high __npowers_
 11971  002C20  20F4               	addwfc	prodh,w,c
 11972  002C22  6EF7               	movwf	tblptrh,c
 11973  002C24                     	if	0	;There are less than 3 active tblptr bytes
 11974  002C24                     	endif
 11975  002C24  0009               	tblrd		*+
 11976  002C26  CFF5 F081          	movff	tablat,___ftmul@f1
 11977  002C2A  0009               	tblrd		*+
 11978  002C2C  CFF5 F082          	movff	tablat,___ftmul@f1+1
 11979  002C30  000A               	tblrd		*-
 11980  002C32  CFF5 F083          	movff	tablat,___ftmul@f1+2
 11981  002C36  0E00               	movlw	0
 11982  002C38  6E1D               	movwf	___awmod@divisor+1,c
 11983  002C3A  0E0A               	movlw	10
 11984  002C3C  6E1C               	movwf	___awmod@divisor,c
 11985  002C3E  0100               	movlb	0	; () banked
 11986  002C40  5196               	movf	scale@scl& (0+255),w,b
 11987  002C42  6E1A               	movwf	___awmod@dividend,c
 11988  002C44  6A1B               	clrf	___awmod@dividend+1,c
 11989  002C46  BE1A               	btfsc	___awmod@dividend,7,c
 11990  002C48  061B               	decf	___awmod@dividend+1,f,c
 11991  002C4A  EC99  F027         	call	___awmod	;wreg free
 11992  002C4E  501A               	movf	?___awmod,w,c
 11993  002C50  0D03               	mullw	3
 11994  002C52  0E52               	movlw	low __npowers_
 11995  002C54  24F3               	addwf	prodl,w,c
 11996  002C56  6EF6               	movwf	tblptrl,c
 11997  002C58  0E7E               	movlw	high __npowers_
 11998  002C5A  20F4               	addwfc	prodh,w,c
 11999  002C5C  6EF7               	movwf	tblptrh,c
 12000  002C5E                     	if	0	;There are less than 3 active tblptr bytes
 12001  002C5E                     	endif
 12002  002C5E  0009               	tblrd		*+
 12003  002C60  CFF5 F084          	movff	tablat,___ftmul@f2
 12004  002C64  0009               	tblrd		*+
 12005  002C66  CFF5 F085          	movff	tablat,___ftmul@f2+1
 12006  002C6A  000A               	tblrd		*-
 12007  002C6C  CFF5 F086          	movff	tablat,___ftmul@f2+2
 12008  002C70  ECCB  F020         	call	___ftmul	;wreg free
 12009  002C74  C081  F090         	movff	?___ftmul,?_scale
 12010  002C78  C082  F091         	movff	?___ftmul+1,?_scale+1
 12011  002C7C  C083  F092         	movff	?___ftmul+2,?_scale+2
 12012  002C80  0012               	return	
 12013  002C82                     l9753:
 12014                           
 12015                           ; BSR set to: 0
 12016                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
 12017  002C82  5196               	movf	scale@scl& (0+255),w,b
 12018  002C84  0D03               	mullw	3
 12019  002C86  0E52               	movlw	low __npowers_
 12020  002C88  24F3               	addwf	prodl,w,c
 12021  002C8A  6EF6               	movwf	tblptrl,c
 12022  002C8C  0E7E               	movlw	high __npowers_
 12023  002C8E  20F4               	addwfc	prodh,w,c
 12024  002C90  6EF7               	movwf	tblptrh,c
 12025  002C92                     	if	0	;There are less than 3 active tblptr bytes
 12026  002C92                     	endif
 12027  002C92  0009               	tblrd		*+
 12028  002C94  CFF5 F090          	movff	tablat,?_scale
 12029  002C98  0009               	tblrd		*+
 12030  002C9A  CFF5 F091          	movff	tablat,?_scale+1
 12031  002C9E  000A               	tblrd		*-
 12032  002CA0  CFF5 F092          	movff	tablat,?_scale+2
 12033  002CA4  0012               	return	
 12034  002CA6                     l9757:
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
 12038  002CA6  5196               	movf	scale@scl& (0+255),w,b
 12039  002CA8  0A80               	xorlw	128
 12040  002CAA  0F12               	addlw	-238
 12041  002CAC  A0D8               	btfss	status,0,c
 12042  002CAE  D07B               	goto	l9765
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
 12046  002CB0  0E00               	movlw	0
 12047  002CB2  6E23               	movwf	___awdiv@divisor+1,c
 12048  002CB4  0E0A               	movlw	10
 12049  002CB6  6E22               	movwf	___awdiv@divisor,c
 12050  002CB8  0E00               	movlw	0
 12051  002CBA  6E1D               	movwf	___awmod@divisor+1,c
 12052  002CBC  0E64               	movlw	100
 12053  002CBE  6E1C               	movwf	___awmod@divisor,c
 12054  002CC0  5196               	movf	scale@scl& (0+255),w,b
 12055  002CC2  6E1A               	movwf	___awmod@dividend,c
 12056  002CC4  6A1B               	clrf	___awmod@dividend+1,c
 12057  002CC6  BE1A               	btfsc	___awmod@dividend,7,c
 12058  002CC8  061B               	decf	___awmod@dividend+1,f,c
 12059  002CCA  EC99  F027         	call	___awmod	;wreg free
 12060  002CCE  C01A  F020         	movff	?___awmod,___awdiv@dividend
 12061  002CD2  C01B  F021         	movff	?___awmod+1,___awdiv@dividend+1
 12062  002CD6  ECEF  F025         	call	___awdiv	;wreg free
 12063  002CDA  0E09               	movlw	9
 12064  002CDC  2620               	addwf	?___awdiv,f,c
 12065  002CDE  5020               	movf	?___awdiv,w,c
 12066  002CE0  0D03               	mullw	3
 12067  002CE2  0E2B               	movlw	low __powers_
 12068  002CE4  24F3               	addwf	prodl,w,c
 12069  002CE6  6EF6               	movwf	tblptrl,c
 12070  002CE8  0E7E               	movlw	high __powers_
 12071  002CEA  20F4               	addwfc	prodh,w,c
 12072  002CEC  6EF7               	movwf	tblptrh,c
 12073  002CEE                     	if	0	;There are less than 3 active tblptr bytes
 12074  002CEE                     	endif
 12075  002CEE  0009               	tblrd		*+
 12076  002CF0  CFF5 F084          	movff	tablat,___ftmul@f2
 12077  002CF4  0009               	tblrd		*+
 12078  002CF6  CFF5 F085          	movff	tablat,___ftmul@f2+1
 12079  002CFA  000A               	tblrd		*-
 12080  002CFC  CFF5 F086          	movff	tablat,___ftmul@f2+2
 12081  002D00  0E00               	movlw	0
 12082  002D02  6E23               	movwf	___awdiv@divisor+1,c
 12083  002D04  0E64               	movlw	100
 12084  002D06  6E22               	movwf	___awdiv@divisor,c
 12085  002D08  0100               	movlb	0	; () banked
 12086  002D0A  5196               	movf	scale@scl& (0+255),w,b
 12087  002D0C  6E20               	movwf	___awdiv@dividend,c
 12088  002D0E  6A21               	clrf	___awdiv@dividend+1,c
 12089  002D10  BE20               	btfsc	___awdiv@dividend,7,c
 12090  002D12  0621               	decf	___awdiv@dividend+1,f,c
 12091  002D14  ECEF  F025         	call	___awdiv	;wreg free
 12092  002D18  0E12               	movlw	18
 12093  002D1A  2620               	addwf	?___awdiv,f,c
 12094  002D1C  5020               	movf	?___awdiv,w,c
 12095  002D1E  0D03               	mullw	3
 12096  002D20  0E2B               	movlw	low __powers_
 12097  002D22  24F3               	addwf	prodl,w,c
 12098  002D24  6EF6               	movwf	tblptrl,c
 12099  002D26  0E7E               	movlw	high __powers_
 12100  002D28  20F4               	addwfc	prodh,w,c
 12101  002D2A  6EF7               	movwf	tblptrh,c
 12102  002D2C                     	if	0	;There are less than 3 active tblptr bytes
 12103  002D2C                     	endif
 12104  002D2C  0009               	tblrd		*+
 12105  002D2E  CFF5 F081          	movff	tablat,___ftmul@f1
 12106  002D32  0009               	tblrd		*+
 12107  002D34  CFF5 F082          	movff	tablat,___ftmul@f1+1
 12108  002D38  000A               	tblrd		*-
 12109  002D3A  CFF5 F083          	movff	tablat,___ftmul@f1+2
 12110  002D3E  ECCB  F020         	call	___ftmul	;wreg free
 12111  002D42  C081  F093         	movff	?___ftmul,_scale$4003
 12112  002D46  C082  F094         	movff	?___ftmul+1,_scale$4003+1
 12113  002D4A  C083  F095         	movff	?___ftmul+2,_scale$4003+2
 12114                           
 12115                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
 12116  002D4E  C093  F081         	movff	_scale$4003,___ftmul@f1
 12117  002D52  C094  F082         	movff	_scale$4003+1,___ftmul@f1+1
 12118  002D56  C095  F083         	movff	_scale$4003+2,___ftmul@f1+2
 12119  002D5A  0E00               	movlw	0
 12120  002D5C  6E1D               	movwf	___awmod@divisor+1,c
 12121  002D5E  0E0A               	movlw	10
 12122  002D60  6E1C               	movwf	___awmod@divisor,c
 12123  002D62  0100               	movlb	0	; () banked
 12124  002D64  5196               	movf	scale@scl& (0+255),w,b
 12125  002D66  6E1A               	movwf	___awmod@dividend,c
 12126  002D68  6A1B               	clrf	___awmod@dividend+1,c
 12127  002D6A  BE1A               	btfsc	___awmod@dividend,7,c
 12128  002D6C  061B               	decf	___awmod@dividend+1,f,c
 12129  002D6E  EC99  F027         	call	___awmod	;wreg free
 12130  002D72  501A               	movf	?___awmod,w,c
 12131  002D74  0D03               	mullw	3
 12132  002D76  0E2B               	movlw	low __powers_
 12133  002D78  24F3               	addwf	prodl,w,c
 12134  002D7A  6EF6               	movwf	tblptrl,c
 12135  002D7C  0E7E               	movlw	high __powers_
 12136  002D7E  20F4               	addwfc	prodh,w,c
 12137  002D80  6EF7               	movwf	tblptrh,c
 12138  002D82                     	if	0	;There are less than 3 active tblptr bytes
 12139  002D82                     	endif
 12140  002D82  0009               	tblrd		*+
 12141  002D84  CFF5 F084          	movff	tablat,___ftmul@f2
 12142  002D88  0009               	tblrd		*+
 12143  002D8A  CFF5 F085          	movff	tablat,___ftmul@f2+1
 12144  002D8E  000A               	tblrd		*-
 12145  002D90  CFF5 F086          	movff	tablat,___ftmul@f2+2
 12146  002D94  ECCB  F020         	call	___ftmul	;wreg free
 12147  002D98  C081  F090         	movff	?___ftmul,?_scale
 12148  002D9C  C082  F091         	movff	?___ftmul+1,?_scale+1
 12149  002DA0  C083  F092         	movff	?___ftmul+2,?_scale+2
 12150  002DA4  0012               	return	
 12151  002DA6                     l9765:
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;doprnt.c: 446: else if(scl > 10)
 12155  002DA6  5196               	movf	scale@scl& (0+255),w,b
 12156  002DA8  0A80               	xorlw	128
 12157  002DAA  0F75               	addlw	-139
 12158  002DAC  A0D8               	btfss	status,0,c
 12159  002DAE  D044               	goto	l9771
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
 12163  002DB0  0E00               	movlw	0
 12164  002DB2  6E23               	movwf	___awdiv@divisor+1,c
 12165  002DB4  0E0A               	movlw	10
 12166  002DB6  6E22               	movwf	___awdiv@divisor,c
 12167  002DB8  5196               	movf	scale@scl& (0+255),w,b
 12168  002DBA  6E20               	movwf	___awdiv@dividend,c
 12169  002DBC  6A21               	clrf	___awdiv@dividend+1,c
 12170  002DBE  BE20               	btfsc	___awdiv@dividend,7,c
 12171  002DC0  0621               	decf	___awdiv@dividend+1,f,c
 12172  002DC2  ECEF  F025         	call	___awdiv	;wreg free
 12173  002DC6  0E09               	movlw	9
 12174  002DC8  2620               	addwf	?___awdiv,f,c
 12175  002DCA  5020               	movf	?___awdiv,w,c
 12176  002DCC  0D03               	mullw	3
 12177  002DCE  0E2B               	movlw	low __powers_
 12178  002DD0  24F3               	addwf	prodl,w,c
 12179  002DD2  6EF6               	movwf	tblptrl,c
 12180  002DD4  0E7E               	movlw	high __powers_
 12181  002DD6  20F4               	addwfc	prodh,w,c
 12182  002DD8  6EF7               	movwf	tblptrh,c
 12183  002DDA                     	if	0	;There are less than 3 active tblptr bytes
 12184  002DDA                     	endif
 12185  002DDA  0009               	tblrd		*+
 12186  002DDC  CFF5 F081          	movff	tablat,___ftmul@f1
 12187  002DE0  0009               	tblrd		*+
 12188  002DE2  CFF5 F082          	movff	tablat,___ftmul@f1+1
 12189  002DE6  000A               	tblrd		*-
 12190  002DE8  CFF5 F083          	movff	tablat,___ftmul@f1+2
 12191  002DEC  0E00               	movlw	0
 12192  002DEE  6E1D               	movwf	___awmod@divisor+1,c
 12193  002DF0  0E0A               	movlw	10
 12194  002DF2  6E1C               	movwf	___awmod@divisor,c
 12195  002DF4  0100               	movlb	0	; () banked
 12196  002DF6  5196               	movf	scale@scl& (0+255),w,b
 12197  002DF8  6E1A               	movwf	___awmod@dividend,c
 12198  002DFA  6A1B               	clrf	___awmod@dividend+1,c
 12199  002DFC  BE1A               	btfsc	___awmod@dividend,7,c
 12200  002DFE  061B               	decf	___awmod@dividend+1,f,c
 12201  002E00  EC99  F027         	call	___awmod	;wreg free
 12202  002E04  501A               	movf	?___awmod,w,c
 12203  002E06  0D03               	mullw	3
 12204  002E08  0E2B               	movlw	low __powers_
 12205  002E0A  24F3               	addwf	prodl,w,c
 12206  002E0C  6EF6               	movwf	tblptrl,c
 12207  002E0E  0E7E               	movlw	high __powers_
 12208  002E10  20F4               	addwfc	prodh,w,c
 12209  002E12  6EF7               	movwf	tblptrh,c
 12210  002E14                     	if	0	;There are less than 3 active tblptr bytes
 12211  002E14                     	endif
 12212  002E14  0009               	tblrd		*+
 12213  002E16  CFF5 F084          	movff	tablat,___ftmul@f2
 12214  002E1A  0009               	tblrd		*+
 12215  002E1C  CFF5 F085          	movff	tablat,___ftmul@f2+1
 12216  002E20  000A               	tblrd		*-
 12217  002E22  CFF5 F086          	movff	tablat,___ftmul@f2+2
 12218  002E26  ECCB  F020         	call	___ftmul	;wreg free
 12219  002E2A  C081  F090         	movff	?___ftmul,?_scale
 12220  002E2E  C082  F091         	movff	?___ftmul+1,?_scale+1
 12221  002E32  C083  F092         	movff	?___ftmul+2,?_scale+2
 12222  002E36  0012               	return	
 12223  002E38                     l9771:
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
 12227  002E38  5196               	movf	scale@scl& (0+255),w,b
 12228  002E3A  0D03               	mullw	3
 12229  002E3C  0E2B               	movlw	low __powers_
 12230  002E3E  24F3               	addwf	prodl,w,c
 12231  002E40  6EF6               	movwf	tblptrl,c
 12232  002E42  0E7E               	movlw	high __powers_
 12233  002E44  20F4               	addwfc	prodh,w,c
 12234  002E46  6EF7               	movwf	tblptrh,c
 12235  002E48                     	if	0	;There are less than 3 active tblptr bytes
 12236  002E48                     	endif
 12237  002E48  0009               	tblrd		*+
 12238  002E4A  CFF5 F090          	movff	tablat,?_scale
 12239  002E4E  0009               	tblrd		*+
 12240  002E50  CFF5 F091          	movff	tablat,?_scale+1
 12241  002E54  000A               	tblrd		*-
 12242  002E56  CFF5 F092          	movff	tablat,?_scale+2
 12243  002E5A  0012               	return		;funcret
 12244  002E5C                     __end_of_scale:
 12245                           	opt callstack 0
 12246                           
 12247 ;; *************** function ___awmod *****************
 12248 ;; Defined at:
 12249 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
 12250 ;; Parameters:    Size  Location     Type
 12251 ;;  dividend        2   25[COMRAM] int 
 12252 ;;  divisor         2   27[COMRAM] int 
 12253 ;; Auto vars:     Size  Location     Type
 12254 ;;  sign            1   30[COMRAM] unsigned char 
 12255 ;;  counter         1   29[COMRAM] unsigned char 
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  2   25[COMRAM] int 
 12258 ;; Registers used:
 12259 ;;		wreg, status,2, status,0
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12265 ;;      Params:         4       0       0       0       0       0       0
 12266 ;;      Locals:         2       0       0       0       0       0       0
 12267 ;;      Temps:          0       0       0       0       0       0       0
 12268 ;;      Totals:         6       0       0       0       0       0       0
 12269 ;;Total ram usage:        6 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:    5
 12272 ;; This function calls:
 12273 ;;		Nothing
 12274 ;; This function is called by:
 12275 ;;		_scale
 12276 ;; This function uses a non-reentrant model
 12277 ;;
 12278                           
 12279                           	psect	text42
 12280  004F32                     __ptext42:
 12281                           	opt callstack 0
 12282  004F32                     ___awmod:
 12283                           	opt callstack 21
 12284                           
 12285                           ;incstack = 0
 12286  004F32  0E00               	movlw	0
 12287  004F34  6E1F               	movwf	___awmod@sign,c
 12288  004F36  AE1B               	btfss	___awmod@dividend+1,7,c
 12289  004F38  D006               	goto	l9631
 12290  004F3A  6C1A               	negf	___awmod@dividend,c
 12291  004F3C  1E1B               	comf	___awmod@dividend+1,f,c
 12292  004F3E  B0D8               	btfsc	status,0,c
 12293  004F40  2A1B               	incf	___awmod@dividend+1,f,c
 12294  004F42  0E01               	movlw	1
 12295  004F44  6E1F               	movwf	___awmod@sign,c
 12296  004F46                     l9631:
 12297  004F46  AE1D               	btfss	___awmod@divisor+1,7,c
 12298  004F48  D004               	goto	l9635
 12299  004F4A  6C1C               	negf	___awmod@divisor,c
 12300  004F4C  1E1D               	comf	___awmod@divisor+1,f,c
 12301  004F4E  B0D8               	btfsc	status,0,c
 12302  004F50  2A1D               	incf	___awmod@divisor+1,f,c
 12303  004F52                     l9635:
 12304  004F52  501C               	movf	___awmod@divisor,w,c
 12305  004F54  101D               	iorwf	___awmod@divisor+1,w,c
 12306  004F56  B4D8               	btfsc	status,2,c
 12307  004F58  D018               	goto	l9651
 12308  004F5A  0E01               	movlw	1
 12309  004F5C  6E1E               	movwf	___awmod@counter,c
 12310  004F5E  D004               	goto	l9641
 12311  004F60                     l9639:
 12312  004F60  90D8               	bcf	status,0,c
 12313  004F62  361C               	rlcf	___awmod@divisor,f,c
 12314  004F64  361D               	rlcf	___awmod@divisor+1,f,c
 12315  004F66  2A1E               	incf	___awmod@counter,f,c
 12316  004F68                     l9641:
 12317  004F68  AE1D               	btfss	___awmod@divisor+1,7,c
 12318  004F6A  D7FA               	goto	l9639
 12319  004F6C                     u10710:
 12320  004F6C  501C               	movf	___awmod@divisor,w,c
 12321  004F6E  5C1A               	subwf	___awmod@dividend,w,c
 12322  004F70  501D               	movf	___awmod@divisor+1,w,c
 12323  004F72  581B               	subwfb	___awmod@dividend+1,w,c
 12324  004F74  A0D8               	btfss	status,0,c
 12325  004F76  D004               	goto	l9647
 12326  004F78  501C               	movf	___awmod@divisor,w,c
 12327  004F7A  5E1A               	subwf	___awmod@dividend,f,c
 12328  004F7C  501D               	movf	___awmod@divisor+1,w,c
 12329  004F7E  5A1B               	subwfb	___awmod@dividend+1,f,c
 12330  004F80                     l9647:
 12331  004F80  90D8               	bcf	status,0,c
 12332  004F82  321D               	rrcf	___awmod@divisor+1,f,c
 12333  004F84  321C               	rrcf	___awmod@divisor,f,c
 12334  004F86  2E1E               	decfsz	___awmod@counter,f,c
 12335  004F88  D7F1               	goto	u10710
 12336  004F8A                     l9651:
 12337  004F8A  501F               	movf	___awmod@sign,w,c
 12338  004F8C  B4D8               	btfsc	status,2,c
 12339  004F8E  D004               	goto	l9655
 12340  004F90  6C1A               	negf	___awmod@dividend,c
 12341  004F92  1E1B               	comf	___awmod@dividend+1,f,c
 12342  004F94  B0D8               	btfsc	status,0,c
 12343  004F96  2A1B               	incf	___awmod@dividend+1,f,c
 12344  004F98                     l9655:
 12345  004F98  C01A  F01A         	movff	___awmod@dividend,?___awmod
 12346  004F9C  C01B  F01B         	movff	___awmod@dividend+1,?___awmod+1
 12347  004FA0  0012               	return		;funcret
 12348  004FA2                     __end_of___awmod:
 12349                           	opt callstack 0
 12350                           
 12351 ;; *************** function ___awdiv *****************
 12352 ;; Defined at:
 12353 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;  dividend        2   31[COMRAM] int 
 12356 ;;  divisor         2   33[COMRAM] int 
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  quotient        2   37[COMRAM] int 
 12359 ;;  sign            1   36[COMRAM] unsigned char 
 12360 ;;  counter         1   35[COMRAM] unsigned char 
 12361 ;; Return value:  Size  Location     Type
 12362 ;;                  2   31[COMRAM] int 
 12363 ;; Registers used:
 12364 ;;		wreg, status,2, status,0
 12365 ;; Tracked objects:
 12366 ;;		On entry : 0/0
 12367 ;;		On exit  : 0/0
 12368 ;;		Unchanged: 0/0
 12369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12370 ;;      Params:         4       0       0       0       0       0       0
 12371 ;;      Locals:         4       0       0       0       0       0       0
 12372 ;;      Temps:          0       0       0       0       0       0       0
 12373 ;;      Totals:         8       0       0       0       0       0       0
 12374 ;;Total ram usage:        8 bytes
 12375 ;; Hardware stack levels used:    1
 12376 ;; Hardware stack levels required when called:    5
 12377 ;; This function calls:
 12378 ;;		Nothing
 12379 ;; This function is called by:
 12380 ;;		_scale
 12381 ;;		__doprnt
 12382 ;; This function uses a non-reentrant model
 12383 ;;
 12384                           
 12385                           	psect	text43
 12386  004BDE                     __ptext43:
 12387                           	opt callstack 0
 12388  004BDE                     ___awdiv:
 12389                           	opt callstack 21
 12390                           
 12391                           ;incstack = 0
 12392  004BDE  0E00               	movlw	0
 12393  004BE0  6E25               	movwf	___awdiv@sign,c
 12394  004BE2  AE23               	btfss	___awdiv@divisor+1,7,c
 12395  004BE4  D006               	goto	l9587
 12396  004BE6  6C22               	negf	___awdiv@divisor,c
 12397  004BE8  1E23               	comf	___awdiv@divisor+1,f,c
 12398  004BEA  B0D8               	btfsc	status,0,c
 12399  004BEC  2A23               	incf	___awdiv@divisor+1,f,c
 12400  004BEE  0E01               	movlw	1
 12401  004BF0  6E25               	movwf	___awdiv@sign,c
 12402  004BF2                     l9587:
 12403  004BF2  AE21               	btfss	___awdiv@dividend+1,7,c
 12404  004BF4  D006               	goto	l9593
 12405  004BF6  6C20               	negf	___awdiv@dividend,c
 12406  004BF8  1E21               	comf	___awdiv@dividend+1,f,c
 12407  004BFA  B0D8               	btfsc	status,0,c
 12408  004BFC  2A21               	incf	___awdiv@dividend+1,f,c
 12409  004BFE  0E01               	movlw	1
 12410  004C00  1A25               	xorwf	___awdiv@sign,f,c
 12411  004C02                     l9593:
 12412  004C02  0E00               	movlw	0
 12413  004C04  6E27               	movwf	___awdiv@quotient+1,c
 12414  004C06  0E00               	movlw	0
 12415  004C08  6E26               	movwf	___awdiv@quotient,c
 12416  004C0A  5022               	movf	___awdiv@divisor,w,c
 12417  004C0C  1023               	iorwf	___awdiv@divisor+1,w,c
 12418  004C0E  B4D8               	btfsc	status,2,c
 12419  004C10  D01C               	goto	l9615
 12420  004C12  0E01               	movlw	1
 12421  004C14  6E24               	movwf	___awdiv@counter,c
 12422  004C16  D004               	goto	l9601
 12423  004C18                     l9599:
 12424  004C18  90D8               	bcf	status,0,c
 12425  004C1A  3622               	rlcf	___awdiv@divisor,f,c
 12426  004C1C  3623               	rlcf	___awdiv@divisor+1,f,c
 12427  004C1E  2A24               	incf	___awdiv@counter,f,c
 12428  004C20                     l9601:
 12429  004C20  AE23               	btfss	___awdiv@divisor+1,7,c
 12430  004C22  D7FA               	goto	l9599
 12431  004C24                     u10650:
 12432  004C24  90D8               	bcf	status,0,c
 12433  004C26  3626               	rlcf	___awdiv@quotient,f,c
 12434  004C28  3627               	rlcf	___awdiv@quotient+1,f,c
 12435  004C2A  5022               	movf	___awdiv@divisor,w,c
 12436  004C2C  5C20               	subwf	___awdiv@dividend,w,c
 12437  004C2E  5023               	movf	___awdiv@divisor+1,w,c
 12438  004C30  5821               	subwfb	___awdiv@dividend+1,w,c
 12439  004C32  A0D8               	btfss	status,0,c
 12440  004C34  D005               	goto	l9611
 12441  004C36  5022               	movf	___awdiv@divisor,w,c
 12442  004C38  5E20               	subwf	___awdiv@dividend,f,c
 12443  004C3A  5023               	movf	___awdiv@divisor+1,w,c
 12444  004C3C  5A21               	subwfb	___awdiv@dividend+1,f,c
 12445  004C3E  8026               	bsf	___awdiv@quotient,0,c
 12446  004C40                     l9611:
 12447  004C40  90D8               	bcf	status,0,c
 12448  004C42  3223               	rrcf	___awdiv@divisor+1,f,c
 12449  004C44  3222               	rrcf	___awdiv@divisor,f,c
 12450  004C46  2E24               	decfsz	___awdiv@counter,f,c
 12451  004C48  D7ED               	goto	u10650
 12452  004C4A                     l9615:
 12453  004C4A  5025               	movf	___awdiv@sign,w,c
 12454  004C4C  B4D8               	btfsc	status,2,c
 12455  004C4E  D004               	goto	l9619
 12456  004C50  6C26               	negf	___awdiv@quotient,c
 12457  004C52  1E27               	comf	___awdiv@quotient+1,f,c
 12458  004C54  B0D8               	btfsc	status,0,c
 12459  004C56  2A27               	incf	___awdiv@quotient+1,f,c
 12460  004C58                     l9619:
 12461  004C58  C026  F020         	movff	___awdiv@quotient,?___awdiv
 12462  004C5C  C027  F021         	movff	___awdiv@quotient+1,?___awdiv+1
 12463  004C60  0012               	return		;funcret
 12464  004C62                     __end_of___awdiv:
 12465                           	opt callstack 0
 12466                           
 12467 ;; *************** function _putch *****************
 12468 ;; Defined at:
 12469 ;;		line 295 in file "mcc_generated_files/eusart1.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;  txData          1    wreg     unsigned char 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;  txData          1   26[COMRAM] unsigned char 
 12474 ;; Return value:  Size  Location     Type
 12475 ;;                  1    wreg      void 
 12476 ;; Registers used:
 12477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12478 ;; Tracked objects:
 12479 ;;		On entry : 0/0
 12480 ;;		On exit  : 0/0
 12481 ;;		Unchanged: 0/0
 12482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12483 ;;      Params:         0       0       0       0       0       0       0
 12484 ;;      Locals:         1       0       0       0       0       0       0
 12485 ;;      Temps:          0       0       0       0       0       0       0
 12486 ;;      Totals:         1       0       0       0       0       0       0
 12487 ;;Total ram usage:        1 bytes
 12488 ;; Hardware stack levels used:    1
 12489 ;; Hardware stack levels required when called:    6
 12490 ;; This function calls:
 12491 ;;		_EUSART1_Write
 12492 ;; This function is called by:
 12493 ;;		_printf
 12494 ;;		__doprnt
 12495 ;; This function uses a non-reentrant model
 12496 ;;
 12497                           
 12498                           	psect	text44
 12499  005A9E                     __ptext44:
 12500                           	opt callstack 0
 12501  005A9E                     _putch:
 12502                           	opt callstack 21
 12503                           
 12504                           ;incstack = 0
 12505                           ;putch@txData stored from wreg
 12506  005A9E  6E1B               	movwf	putch@txData,c
 12507                           
 12508                           ;eusart1.c: 297: EUSART1_Write(txData);
 12509  005AA0  501B               	movf	putch@txData,w,c
 12510  005AA2  EC63  F02B         	call	_EUSART1_Write
 12511  005AA6  0012               	return		;funcret
 12512  005AA8                     __end_of_putch:
 12513                           	opt callstack 0
 12514                           
 12515 ;; *************** function _EUSART1_Write *****************
 12516 ;; Defined at:
 12517 ;;		line 267 in file "mcc_generated_files/eusart1.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;  txData          1    wreg     unsigned char 
 12520 ;; Auto vars:     Size  Location     Type
 12521 ;;  txData          1   25[COMRAM] unsigned char 
 12522 ;; Return value:  Size  Location     Type
 12523 ;;                  1    wreg      void 
 12524 ;; Registers used:
 12525 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12531 ;;      Params:         0       0       0       0       0       0       0
 12532 ;;      Locals:         1       0       0       0       0       0       0
 12533 ;;      Temps:          0       0       0       0       0       0       0
 12534 ;;      Totals:         1       0       0       0       0       0       0
 12535 ;;Total ram usage:        1 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; Hardware stack levels required when called:    5
 12538 ;; This function calls:
 12539 ;;		Nothing
 12540 ;; This function is called by:
 12541 ;;		_putch
 12542 ;; This function uses a non-reentrant model
 12543 ;;
 12544                           
 12545                           	psect	text45
 12546  0056C6                     __ptext45:
 12547                           	opt callstack 0
 12548  0056C6                     _EUSART1_Write:
 12549                           	opt callstack 21
 12550                           
 12551                           ;incstack = 0
 12552                           ;EUSART1_Write@txData stored from wreg
 12553  0056C6  6E1A               	movwf	EUSART1_Write@txData,c
 12554  0056C8                     
 12555                           ;eusart1.c: 269: while(0 == eusart1TxBufferRemaining)
 12556  0056C8  0101               	movlb	1	; () banked
 12557  0056CA  5183               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 12558  0056CC  B4D8               	btfsc	status,2,c
 12559  0056CE  D7FC               	goto	l9427
 12560                           
 12561                           ; BSR set to: 1
 12562                           ;eusart1.c: 271: };eusart1.c: 273: if(0 == PIE1bits.TX1IE)
 12563  0056D0  B89D               	btfsc	3997,4,c	;volatile
 12564  0056D2  D003               	goto	l256
 12565                           
 12566                           ; BSR set to: 1
 12567                           ;eusart1.c: 274: {;eusart1.c: 275: TXREG1 = txData;
 12568  0056D4  C01A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 12569                           
 12570                           ;eusart1.c: 276: }
 12571  0056D8  D010               	goto	l9443
 12572  0056DA                     l256:
 12573                           
 12574                           ; BSR set to: 1
 12575                           ;eusart1.c: 277: else;eusart1.c: 278: {;eusart1.c: 279: PIE1bits.TX1IE = 0;
 12576  0056DA  989D               	bcf	3997,4,c	;volatile
 12577                           
 12578                           ; BSR set to: 1
 12579                           ;eusart1.c: 280: eusart1TxBuffer[eusart1TxHead++] = txData;
 12580  0056DC  0E78               	movlw	low _eusart1TxBuffer
 12581  0056DE  243D               	addwf	_eusart1TxHead,w,c	;volatile
 12582  0056E0  6ED9               	movwf	fsr2l,c
 12583  0056E2  6ADA               	clrf	fsr2h,c
 12584  0056E4  0E02               	movlw	high _eusart1TxBuffer
 12585  0056E6  22DA               	addwfc	fsr2h,f,c
 12586  0056E8  C01A  FFDF         	movff	EUSART1_Write@txData,indf2
 12587                           
 12588                           ; BSR set to: 1
 12589  0056EC  2A3D               	incf	_eusart1TxHead,f,c	;volatile
 12590                           
 12591                           ; BSR set to: 1
 12592                           ;eusart1.c: 281: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 12593  0056EE  0E07               	movlw	7
 12594  0056F0  643D               	cpfsgt	_eusart1TxHead,c	;volatile
 12595  0056F2  D002               	goto	l9441
 12596                           
 12597                           ; BSR set to: 1
 12598                           ;eusart1.c: 282: {;eusart1.c: 283: eusart1TxHead = 0;
 12599  0056F4  0E00               	movlw	0
 12600  0056F6  6E3D               	movwf	_eusart1TxHead,c	;volatile
 12601  0056F8                     l9441:
 12602                           
 12603                           ; BSR set to: 1
 12604                           ;eusart1.c: 284: };eusart1.c: 285: eusart1TxBufferRemaining--;
 12605  0056F8  0783               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 12606  0056FA                     l9443:
 12607                           
 12608                           ; BSR set to: 1
 12609                           ;eusart1.c: 286: };eusart1.c: 287: PIE1bits.TX1IE = 1;
 12610  0056FA  889D               	bsf	3997,4,c	;volatile
 12611                           
 12612                           ; BSR set to: 1
 12613  0056FC  0012               	return		;funcret
 12614  0056FE                     __end_of_EUSART1_Write:
 12615                           	opt callstack 0
 12616                           
 12617 ;; *************** function _isdigit *****************
 12618 ;; Defined at:
 12619 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\isdigit.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  c               1    wreg     unsigned char 
 12622 ;; Auto vars:     Size  Location     Type
 12623 ;;  c               1   27[COMRAM] unsigned char 
 12624 ;; Return value:  Size  Location     Type
 12625 ;;		None               void
 12626 ;; Registers used:
 12627 ;;		wreg, status,2, status,0
 12628 ;; Tracked objects:
 12629 ;;		On entry : 0/0
 12630 ;;		On exit  : 0/0
 12631 ;;		Unchanged: 0/0
 12632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12633 ;;      Params:         0       0       0       0       0       0       0
 12634 ;;      Locals:         2       0       0       0       0       0       0
 12635 ;;      Temps:          1       0       0       0       0       0       0
 12636 ;;      Totals:         3       0       0       0       0       0       0
 12637 ;;Total ram usage:        3 bytes
 12638 ;; Hardware stack levels used:    1
 12639 ;; Hardware stack levels required when called:    5
 12640 ;; This function calls:
 12641 ;;		Nothing
 12642 ;; This function is called by:
 12643 ;;		__doprnt
 12644 ;; This function uses a non-reentrant model
 12645 ;;
 12646                           
 12647                           	psect	text46
 12648  005990                     __ptext46:
 12649                           	opt callstack 0
 12650  005990                     _isdigit:
 12651                           	opt callstack 22
 12652                           
 12653                           ; BSR set to: 1
 12654                           ;incstack = 0
 12655                           ;isdigit@c stored from wreg
 12656  005990  6E1C               	movwf	isdigit@c,c
 12657  005992  0E00               	movlw	0
 12658  005994  6E1B               	movwf	_isdigit$3515,c
 12659  005996  0E3A               	movlw	58
 12660  005998  601C               	cpfslt	isdigit@c,c
 12661  00599A  D005               	goto	l9783
 12662  00599C  0E2F               	movlw	47
 12663  00599E  641C               	cpfsgt	isdigit@c,c
 12664  0059A0  D002               	goto	l9783
 12665  0059A2  0E01               	movlw	1
 12666  0059A4  6E1B               	movwf	_isdigit$3515,c
 12667  0059A6                     l9783:
 12668  0059A6  C01B  F01A         	movff	_isdigit$3515,??_isdigit
 12669  0059AA  301A               	rrcf	??_isdigit,w,c
 12670  0059AC  0012               	return		;funcret
 12671  0059AE                     __end_of_isdigit:
 12672                           	opt callstack 0
 12673                           
 12674 ;; *************** function _fround *****************
 12675 ;; Defined at:
 12676 ;;		line 417 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  prec            1    wreg     unsigned char 
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;  prec            1   57[BANK0 ] unsigned char 
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  3   48[BANK0 ] unsigned char 
 12683 ;; Registers used:
 12684 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12690 ;;      Params:         0       3       0       0       0       0       0
 12691 ;;      Locals:         0       7       0       0       0       0       0
 12692 ;;      Temps:          0       0       0       0       0       0       0
 12693 ;;      Totals:         0      10       0       0       0       0       0
 12694 ;;Total ram usage:       10 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; Hardware stack levels required when called:    7
 12697 ;; This function calls:
 12698 ;;		___ftmul
 12699 ;;		___lwdiv
 12700 ;;		___lwmod
 12701 ;;		___wmul
 12702 ;; This function is called by:
 12703 ;;		__doprnt
 12704 ;; This function uses a non-reentrant model
 12705 ;;
 12706                           
 12707                           	psect	text47
 12708  002E5C                     __ptext47:
 12709                           	opt callstack 0
 12710  002E5C                     _fround:
 12711                           	opt callstack 20
 12712                           
 12713                           ;incstack = 0
 12714                           ;fround@prec stored from wreg
 12715  002E5C  0100               	movlb	0	; () banked
 12716  002E5E  6F99               	movwf	fround@prec& (0+255),b
 12717                           
 12718                           ;doprnt.c: 421: if(prec>=110)
 12719  002E60  0E6D               	movlw	109
 12720  002E62  0100               	movlb	0	; () banked
 12721  002E64  6599               	cpfsgt	fround@prec& (0+255),b
 12722  002E66  D0A4               	goto	l9725
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
 12726  002E68  0E00               	movlw	0
 12727  002E6A  6E29               	movwf	___wmul@multiplicand+1,c
 12728  002E6C  0E03               	movlw	3
 12729  002E6E  6E28               	movwf	___wmul@multiplicand,c
 12730  002E70  0E00               	movlw	0
 12731  002E72  6E22               	movwf	___lwdiv@divisor+1,c
 12732  002E74  0E0A               	movlw	10
 12733  002E76  6E21               	movwf	___lwdiv@divisor,c
 12734  002E78  0E00               	movlw	0
 12735  002E7A  6E1D               	movwf	___lwmod@divisor+1,c
 12736  002E7C  0E64               	movlw	100
 12737  002E7E  6E1C               	movwf	___lwmod@divisor,c
 12738  002E80  C099  F01A         	movff	fround@prec,___lwmod@dividend
 12739  002E84  6A1B               	clrf	___lwmod@dividend+1,c
 12740  002E86  EC89  F02A         	call	___lwmod	;wreg free
 12741  002E8A  C01A  F01F         	movff	?___lwmod,___lwdiv@dividend
 12742  002E8E  C01B  F020         	movff	?___lwmod+1,___lwdiv@dividend+1
 12743  002E92  EC3E  F029         	call	___lwdiv	;wreg free
 12744  002E96  C01F  F026         	movff	?___lwdiv,___wmul@multiplier
 12745  002E9A  C020  F027         	movff	?___lwdiv+1,___wmul@multiplier+1
 12746  002E9E  EC91  F02C         	call	___wmul	;wreg free
 12747  002EA2  0E1B               	movlw	27
 12748  002EA4  2626               	addwf	?___wmul,f,c
 12749  002EA6  0E00               	movlw	0
 12750  002EA8  2227               	addwfc	?___wmul+1,f,c
 12751  002EAA  0E52               	movlw	low __npowers_
 12752  002EAC  2426               	addwf	?___wmul,w,c
 12753  002EAE  6EF6               	movwf	tblptrl,c
 12754  002EB0  0E7E               	movlw	high __npowers_
 12755  002EB2  2027               	addwfc	?___wmul+1,w,c
 12756  002EB4  6EF7               	movwf	tblptrh,c
 12757  002EB6                     	if	0	;There are less than 3 active tblptr bytes
 12758  002EB6                     	endif
 12759  002EB6  0009               	tblrd		*+
 12760  002EB8  CFF5 F084          	movff	tablat,___ftmul@f2
 12761  002EBC  0009               	tblrd		*+
 12762  002EBE  CFF5 F085          	movff	tablat,___ftmul@f2+1
 12763  002EC2  000A               	tblrd		*-
 12764  002EC4  CFF5 F086          	movff	tablat,___ftmul@f2+2
 12765  002EC8  0E00               	movlw	0
 12766  002ECA  6E22               	movwf	___lwdiv@divisor+1,c
 12767  002ECC  0E64               	movlw	100
 12768  002ECE  6E21               	movwf	___lwdiv@divisor,c
 12769  002ED0  C099  F01F         	movff	fround@prec,___lwdiv@dividend
 12770  002ED4  6A20               	clrf	___lwdiv@dividend+1,c
 12771  002ED6  EC3E  F029         	call	___lwdiv	;wreg free
 12772  002EDA  C01F  F026         	movff	?___lwdiv,___wmul@multiplier
 12773  002EDE  C020  F027         	movff	?___lwdiv+1,___wmul@multiplier+1
 12774  002EE2  0E00               	movlw	0
 12775  002EE4  6E29               	movwf	___wmul@multiplicand+1,c
 12776  002EE6  0E03               	movlw	3
 12777  002EE8  6E28               	movwf	___wmul@multiplicand,c
 12778  002EEA  EC91  F02C         	call	___wmul	;wreg free
 12779  002EEE  0E36               	movlw	54
 12780  002EF0  2626               	addwf	?___wmul,f,c
 12781  002EF2  0E00               	movlw	0
 12782  002EF4  2227               	addwfc	?___wmul+1,f,c
 12783  002EF6  0E52               	movlw	low __npowers_
 12784  002EF8  2426               	addwf	?___wmul,w,c
 12785  002EFA  6EF6               	movwf	tblptrl,c
 12786  002EFC  0E7E               	movlw	high __npowers_
 12787  002EFE  2027               	addwfc	?___wmul+1,w,c
 12788  002F00  6EF7               	movwf	tblptrh,c
 12789  002F02                     	if	0	;There are less than 3 active tblptr bytes
 12790  002F02                     	endif
 12791  002F02  0009               	tblrd		*+
 12792  002F04  CFF5 F081          	movff	tablat,___ftmul@f1
 12793  002F08  0009               	tblrd		*+
 12794  002F0A  CFF5 F082          	movff	tablat,___ftmul@f1+1
 12795  002F0E  000A               	tblrd		*-
 12796  002F10  CFF5 F083          	movff	tablat,___ftmul@f1+2
 12797  002F14  ECCB  F020         	call	___ftmul	;wreg free
 12798  002F18  C081  F096         	movff	?___ftmul,_fround$4001
 12799  002F1C  C082  F097         	movff	?___ftmul+1,_fround$4001+1
 12800  002F20  C083  F098         	movff	?___ftmul+2,_fround$4001+2
 12801                           
 12802                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
 12803  002F24  0E00               	movlw	0
 12804  002F26  6E29               	movwf	___wmul@multiplicand+1,c
 12805  002F28  0E03               	movlw	3
 12806  002F2A  6E28               	movwf	___wmul@multiplicand,c
 12807  002F2C  0E00               	movlw	0
 12808  002F2E  6E1D               	movwf	___lwmod@divisor+1,c
 12809  002F30  0E0A               	movlw	10
 12810  002F32  6E1C               	movwf	___lwmod@divisor,c
 12811  002F34  C099  F01A         	movff	fround@prec,___lwmod@dividend
 12812  002F38  6A1B               	clrf	___lwmod@dividend+1,c
 12813  002F3A  EC89  F02A         	call	___lwmod	;wreg free
 12814  002F3E  C01A  F026         	movff	?___lwmod,___wmul@multiplier
 12815  002F42  C01B  F027         	movff	?___lwmod+1,___wmul@multiplier+1
 12816  002F46  EC91  F02C         	call	___wmul	;wreg free
 12817  002F4A  0E52               	movlw	low __npowers_
 12818  002F4C  2426               	addwf	?___wmul,w,c
 12819  002F4E  6EF6               	movwf	tblptrl,c
 12820  002F50  0E7E               	movlw	high __npowers_
 12821  002F52  2027               	addwfc	?___wmul+1,w,c
 12822  002F54  6EF7               	movwf	tblptrh,c
 12823  002F56                     	if	0	;There are less than 3 active tblptr bytes
 12824  002F56                     	endif
 12825  002F56  0009               	tblrd		*+
 12826  002F58  CFF5 F084          	movff	tablat,___ftmul@f2
 12827  002F5C  0009               	tblrd		*+
 12828  002F5E  CFF5 F085          	movff	tablat,___ftmul@f2+1
 12829  002F62  000A               	tblrd		*-
 12830  002F64  CFF5 F086          	movff	tablat,___ftmul@f2+2
 12831  002F68  C096  F081         	movff	_fround$4001,___ftmul@f1
 12832  002F6C  C097  F082         	movff	_fround$4001+1,___ftmul@f1+1
 12833  002F70  C098  F083         	movff	_fround$4001+2,___ftmul@f1+2
 12834  002F74  ECCB  F020         	call	___ftmul	;wreg free
 12835  002F78  C081  F093         	movff	?___ftmul,_fround$4002
 12836  002F7C  C082  F094         	movff	?___ftmul+1,_fround$4002+1
 12837  002F80  C083  F095         	movff	?___ftmul+2,_fround$4002+2
 12838                           
 12839                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
 12840  002F84  C093  F081         	movff	_fround$4002,___ftmul@f1
 12841  002F88  C094  F082         	movff	_fround$4002+1,___ftmul@f1+1
 12842  002F8C  C095  F083         	movff	_fround$4002+2,___ftmul@f1+2
 12843  002F90  0E00               	movlw	0
 12844  002F92  0100               	movlb	0	; () banked
 12845  002F94  6F84               	movwf	___ftmul@f2& (0+255),b
 12846  002F96  0E00               	movlw	0
 12847  002F98  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
 12848  002F9A  0E3F               	movlw	63
 12849  002F9C  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
 12850  002F9E  ECCB  F020         	call	___ftmul	;wreg free
 12851  002FA2  C081  F090         	movff	?___ftmul,?_fround
 12852  002FA6  C082  F091         	movff	?___ftmul+1,?_fround+1
 12853  002FAA  C083  F092         	movff	?___ftmul+2,?_fround+2
 12854  002FAE  0012               	return	
 12855  002FB0                     l9725:
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;doprnt.c: 423: else if(prec > 10)
 12859  002FB0  0E0A               	movlw	10
 12860  002FB2  6599               	cpfsgt	fround@prec& (0+255),b
 12861  002FB4  D066               	goto	l9733
 12862                           
 12863                           ; BSR set to: 0
 12864                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
 12865  002FB6  0E00               	movlw	0
 12866  002FB8  6E29               	movwf	___wmul@multiplicand+1,c
 12867  002FBA  0E03               	movlw	3
 12868  002FBC  6E28               	movwf	___wmul@multiplicand,c
 12869  002FBE  0E00               	movlw	0
 12870  002FC0  6E1D               	movwf	___lwmod@divisor+1,c
 12871  002FC2  0E0A               	movlw	10
 12872  002FC4  6E1C               	movwf	___lwmod@divisor,c
 12873  002FC6  C099  F01A         	movff	fround@prec,___lwmod@dividend
 12874  002FCA  6A1B               	clrf	___lwmod@dividend+1,c
 12875  002FCC  EC89  F02A         	call	___lwmod	;wreg free
 12876  002FD0  C01A  F026         	movff	?___lwmod,___wmul@multiplier
 12877  002FD4  C01B  F027         	movff	?___lwmod+1,___wmul@multiplier+1
 12878  002FD8  EC91  F02C         	call	___wmul	;wreg free
 12879  002FDC  0E52               	movlw	low __npowers_
 12880  002FDE  2426               	addwf	?___wmul,w,c
 12881  002FE0  6EF6               	movwf	tblptrl,c
 12882  002FE2  0E7E               	movlw	high __npowers_
 12883  002FE4  2027               	addwfc	?___wmul+1,w,c
 12884  002FE6  6EF7               	movwf	tblptrh,c
 12885  002FE8                     	if	0	;There are less than 3 active tblptr bytes
 12886  002FE8                     	endif
 12887  002FE8  0009               	tblrd		*+
 12888  002FEA  CFF5 F084          	movff	tablat,___ftmul@f2
 12889  002FEE  0009               	tblrd		*+
 12890  002FF0  CFF5 F085          	movff	tablat,___ftmul@f2+1
 12891  002FF4  000A               	tblrd		*-
 12892  002FF6  CFF5 F086          	movff	tablat,___ftmul@f2+2
 12893  002FFA  0E00               	movlw	0
 12894  002FFC  6E22               	movwf	___lwdiv@divisor+1,c
 12895  002FFE  0E0A               	movlw	10
 12896  003000  6E21               	movwf	___lwdiv@divisor,c
 12897  003002  C099  F01F         	movff	fround@prec,___lwdiv@dividend
 12898  003006  6A20               	clrf	___lwdiv@dividend+1,c
 12899  003008  EC3E  F029         	call	___lwdiv	;wreg free
 12900  00300C  C01F  F026         	movff	?___lwdiv,___wmul@multiplier
 12901  003010  C020  F027         	movff	?___lwdiv+1,___wmul@multiplier+1
 12902  003014  0E00               	movlw	0
 12903  003016  6E29               	movwf	___wmul@multiplicand+1,c
 12904  003018  0E03               	movlw	3
 12905  00301A  6E28               	movwf	___wmul@multiplicand,c
 12906  00301C  EC91  F02C         	call	___wmul	;wreg free
 12907  003020  0E1B               	movlw	27
 12908  003022  2626               	addwf	?___wmul,f,c
 12909  003024  0E00               	movlw	0
 12910  003026  2227               	addwfc	?___wmul+1,f,c
 12911  003028  0E52               	movlw	low __npowers_
 12912  00302A  2426               	addwf	?___wmul,w,c
 12913  00302C  6EF6               	movwf	tblptrl,c
 12914  00302E  0E7E               	movlw	high __npowers_
 12915  003030  2027               	addwfc	?___wmul+1,w,c
 12916  003032  6EF7               	movwf	tblptrh,c
 12917  003034                     	if	0	;There are less than 3 active tblptr bytes
 12918  003034                     	endif
 12919  003034  0009               	tblrd		*+
 12920  003036  CFF5 F081          	movff	tablat,___ftmul@f1
 12921  00303A  0009               	tblrd		*+
 12922  00303C  CFF5 F082          	movff	tablat,___ftmul@f1+1
 12923  003040  000A               	tblrd		*-
 12924  003042  CFF5 F083          	movff	tablat,___ftmul@f1+2
 12925  003046  ECCB  F020         	call	___ftmul	;wreg free
 12926  00304A  C081  F096         	movff	?___ftmul,_fround$4001
 12927  00304E  C082  F097         	movff	?___ftmul+1,_fround$4001+1
 12928  003052  C083  F098         	movff	?___ftmul+2,_fround$4001+2
 12929                           
 12930                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
 12931  003056  C096  F081         	movff	_fround$4001,___ftmul@f1
 12932  00305A  C097  F082         	movff	_fround$4001+1,___ftmul@f1+1
 12933  00305E  C098  F083         	movff	_fround$4001+2,___ftmul@f1+2
 12934  003062  0E00               	movlw	0
 12935  003064  0100               	movlb	0	; () banked
 12936  003066  6F84               	movwf	___ftmul@f2& (0+255),b
 12937  003068  0E00               	movlw	0
 12938  00306A  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
 12939  00306C  0E3F               	movlw	63
 12940  00306E  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
 12941  003070  ECCB  F020         	call	___ftmul	;wreg free
 12942  003074  C081  F090         	movff	?___ftmul,?_fround
 12943  003078  C082  F091         	movff	?___ftmul+1,?_fround+1
 12944  00307C  C083  F092         	movff	?___ftmul+2,?_fround+2
 12945  003080  0012               	return	
 12946  003082                     l9733:
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
 12950  003082  5199               	movf	fround@prec& (0+255),w,b
 12951  003084  0D03               	mullw	3
 12952  003086  0E52               	movlw	low __npowers_
 12953  003088  24F3               	addwf	prodl,w,c
 12954  00308A  6EF6               	movwf	tblptrl,c
 12955  00308C  0E7E               	movlw	high __npowers_
 12956  00308E  20F4               	addwfc	prodh,w,c
 12957  003090  6EF7               	movwf	tblptrh,c
 12958  003092                     	if	0	;There are less than 3 active tblptr bytes
 12959  003092                     	endif
 12960  003092  0009               	tblrd		*+
 12961  003094  CFF5 F081          	movff	tablat,___ftmul@f1
 12962  003098  0009               	tblrd		*+
 12963  00309A  CFF5 F082          	movff	tablat,___ftmul@f1+1
 12964  00309E  000A               	tblrd		*-
 12965  0030A0  CFF5 F083          	movff	tablat,___ftmul@f1+2
 12966  0030A4  0E00               	movlw	0
 12967  0030A6  6F84               	movwf	___ftmul@f2& (0+255),b
 12968  0030A8  0E00               	movlw	0
 12969  0030AA  6F85               	movwf	(___ftmul@f2+1)& (0+255),b
 12970  0030AC  0E3F               	movlw	63
 12971  0030AE  6F86               	movwf	(___ftmul@f2+2)& (0+255),b
 12972  0030B0  ECCB  F020         	call	___ftmul	;wreg free
 12973  0030B4  C081  F090         	movff	?___ftmul,?_fround
 12974  0030B8  C082  F091         	movff	?___ftmul+1,?_fround+1
 12975  0030BC  C083  F092         	movff	?___ftmul+2,?_fround+2
 12976  0030C0  0012               	return		;funcret
 12977  0030C2                     __end_of_fround:
 12978                           	opt callstack 0
 12979                           
 12980 ;; *************** function ___wmul *****************
 12981 ;; Defined at:
 12982 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;  multiplier      2   37[COMRAM] unsigned int 
 12985 ;;  multiplicand    2   39[COMRAM] unsigned int 
 12986 ;; Auto vars:     Size  Location     Type
 12987 ;;  product         2   41[COMRAM] unsigned int 
 12988 ;; Return value:  Size  Location     Type
 12989 ;;                  2   37[COMRAM] unsigned int 
 12990 ;; Registers used:
 12991 ;;		wreg, status,2, status,0, prodl, prodh
 12992 ;; Tracked objects:
 12993 ;;		On entry : 0/0
 12994 ;;		On exit  : 0/0
 12995 ;;		Unchanged: 0/0
 12996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12997 ;;      Params:         4       0       0       0       0       0       0
 12998 ;;      Locals:         2       0       0       0       0       0       0
 12999 ;;      Temps:          0       0       0       0       0       0       0
 13000 ;;      Totals:         6       0       0       0       0       0       0
 13001 ;;Total ram usage:        6 bytes
 13002 ;; Hardware stack levels used:    1
 13003 ;; Hardware stack levels required when called:    5
 13004 ;; This function calls:
 13005 ;;		Nothing
 13006 ;; This function is called by:
 13007 ;;		_LCD_send_string
 13008 ;;		_fround
 13009 ;;		__doprnt
 13010 ;;		_eval_poly
 13011 ;; This function uses a non-reentrant model
 13012 ;;
 13013                           
 13014                           	psect	text48
 13015  005922                     __ptext48:
 13016                           	opt callstack 0
 13017  005922                     ___wmul:
 13018                           	opt callstack 21
 13019                           
 13020                           ;incstack = 0
 13021  005922  5026               	movf	___wmul@multiplier,w,c
 13022  005924  0228               	mulwf	___wmul@multiplicand,c
 13023  005926  CFF3 F02A          	movff	prodl,___wmul@product
 13024  00592A  CFF4 F02B          	movff	prodh,___wmul@product+1
 13025  00592E  5026               	movf	___wmul@multiplier,w,c
 13026  005930  0229               	mulwf	___wmul@multiplicand+1,c
 13027  005932  50F3               	movf	prodl,w,c
 13028  005934  262B               	addwf	___wmul@product+1,f,c
 13029  005936  5027               	movf	___wmul@multiplier+1,w,c
 13030  005938  0228               	mulwf	___wmul@multiplicand,c
 13031  00593A  50F3               	movf	prodl,w,c
 13032  00593C  262B               	addwf	___wmul@product+1,f,c
 13033  00593E  C02A  F026         	movff	___wmul@product,?___wmul
 13034  005942  C02B  F027         	movff	___wmul@product+1,?___wmul+1
 13035  005946  0012               	return		;funcret
 13036  005948                     __end_of___wmul:
 13037                           	opt callstack 0
 13038                           
 13039 ;; *************** function ___lwmod *****************
 13040 ;; Defined at:
 13041 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
 13042 ;; Parameters:    Size  Location     Type
 13043 ;;  dividend        2   25[COMRAM] unsigned int 
 13044 ;;  divisor         2   27[COMRAM] unsigned int 
 13045 ;; Auto vars:     Size  Location     Type
 13046 ;;  counter         1   29[COMRAM] unsigned char 
 13047 ;; Return value:  Size  Location     Type
 13048 ;;                  2   25[COMRAM] unsigned int 
 13049 ;; Registers used:
 13050 ;;		wreg, status,2, status,0
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13056 ;;      Params:         4       0       0       0       0       0       0
 13057 ;;      Locals:         1       0       0       0       0       0       0
 13058 ;;      Temps:          0       0       0       0       0       0       0
 13059 ;;      Totals:         5       0       0       0       0       0       0
 13060 ;;Total ram usage:        5 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; Hardware stack levels required when called:    5
 13063 ;; This function calls:
 13064 ;;		Nothing
 13065 ;; This function is called by:
 13066 ;;		_fround
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           	psect	text49
 13071  005512                     __ptext49:
 13072                           	opt callstack 0
 13073  005512                     ___lwmod:
 13074                           	opt callstack 21
 13075                           
 13076                           ;incstack = 0
 13077  005512  501C               	movf	___lwmod@divisor,w,c
 13078  005514  101D               	iorwf	___lwmod@divisor+1,w,c
 13079  005516  B4D8               	btfsc	status,2,c
 13080  005518  D018               	goto	l2286
 13081  00551A  0E01               	movlw	1
 13082  00551C  6E1E               	movwf	___lwmod@counter,c
 13083  00551E  D004               	goto	l9687
 13084  005520                     l9685:
 13085  005520  90D8               	bcf	status,0,c
 13086  005522  361C               	rlcf	___lwmod@divisor,f,c
 13087  005524  361D               	rlcf	___lwmod@divisor+1,f,c
 13088  005526  2A1E               	incf	___lwmod@counter,f,c
 13089  005528                     l9687:
 13090  005528  AE1D               	btfss	___lwmod@divisor+1,7,c
 13091  00552A  D7FA               	goto	l9685
 13092  00552C                     u10780:
 13093  00552C  501C               	movf	___lwmod@divisor,w,c
 13094  00552E  5C1A               	subwf	___lwmod@dividend,w,c
 13095  005530  501D               	movf	___lwmod@divisor+1,w,c
 13096  005532  581B               	subwfb	___lwmod@dividend+1,w,c
 13097  005534  A0D8               	btfss	status,0,c
 13098  005536  D004               	goto	l9693
 13099  005538  501C               	movf	___lwmod@divisor,w,c
 13100  00553A  5E1A               	subwf	___lwmod@dividend,f,c
 13101  00553C  501D               	movf	___lwmod@divisor+1,w,c
 13102  00553E  5A1B               	subwfb	___lwmod@dividend+1,f,c
 13103  005540                     l9693:
 13104  005540  90D8               	bcf	status,0,c
 13105  005542  321D               	rrcf	___lwmod@divisor+1,f,c
 13106  005544  321C               	rrcf	___lwmod@divisor,f,c
 13107  005546  2E1E               	decfsz	___lwmod@counter,f,c
 13108  005548  D7F1               	goto	u10780
 13109  00554A                     l2286:
 13110  00554A  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 13111  00554E  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 13112  005552  0012               	return		;funcret
 13113  005554                     __end_of___lwmod:
 13114                           	opt callstack 0
 13115                           
 13116 ;; *************** function ___lwdiv *****************
 13117 ;; Defined at:
 13118 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
 13119 ;; Parameters:    Size  Location     Type
 13120 ;;  dividend        2   30[COMRAM] unsigned int 
 13121 ;;  divisor         2   32[COMRAM] unsigned int 
 13122 ;; Auto vars:     Size  Location     Type
 13123 ;;  quotient        2   35[COMRAM] unsigned int 
 13124 ;;  counter         1   34[COMRAM] unsigned char 
 13125 ;; Return value:  Size  Location     Type
 13126 ;;                  2   30[COMRAM] unsigned int 
 13127 ;; Registers used:
 13128 ;;		wreg, status,2, status,0
 13129 ;; Tracked objects:
 13130 ;;		On entry : 0/0
 13131 ;;		On exit  : 0/0
 13132 ;;		Unchanged: 0/0
 13133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13134 ;;      Params:         4       0       0       0       0       0       0
 13135 ;;      Locals:         3       0       0       0       0       0       0
 13136 ;;      Temps:          0       0       0       0       0       0       0
 13137 ;;      Totals:         7       0       0       0       0       0       0
 13138 ;;Total ram usage:        7 bytes
 13139 ;; Hardware stack levels used:    1
 13140 ;; Hardware stack levels required when called:    5
 13141 ;; This function calls:
 13142 ;;		Nothing
 13143 ;; This function is called by:
 13144 ;;		_fround
 13145 ;; This function uses a non-reentrant model
 13146 ;;
 13147                           
 13148                           	psect	text50
 13149  00527C                     __ptext50:
 13150                           	opt callstack 0
 13151  00527C                     ___lwdiv:
 13152                           	opt callstack 21
 13153                           
 13154                           ;incstack = 0
 13155  00527C  0E00               	movlw	0
 13156  00527E  6E25               	movwf	___lwdiv@quotient+1,c
 13157  005280  0E00               	movlw	0
 13158  005282  6E24               	movwf	___lwdiv@quotient,c
 13159  005284  5021               	movf	___lwdiv@divisor,w,c
 13160  005286  1022               	iorwf	___lwdiv@divisor+1,w,c
 13161  005288  B4D8               	btfsc	status,2,c
 13162  00528A  D01C               	goto	l2276
 13163  00528C  0E01               	movlw	1
 13164  00528E  6E23               	movwf	___lwdiv@counter,c
 13165  005290  D004               	goto	l9667
 13166  005292                     l9665:
 13167  005292  90D8               	bcf	status,0,c
 13168  005294  3621               	rlcf	___lwdiv@divisor,f,c
 13169  005296  3622               	rlcf	___lwdiv@divisor+1,f,c
 13170  005298  2A23               	incf	___lwdiv@counter,f,c
 13171  00529A                     l9667:
 13172  00529A  AE22               	btfss	___lwdiv@divisor+1,7,c
 13173  00529C  D7FA               	goto	l9665
 13174  00529E                     u10750:
 13175  00529E  90D8               	bcf	status,0,c
 13176  0052A0  3624               	rlcf	___lwdiv@quotient,f,c
 13177  0052A2  3625               	rlcf	___lwdiv@quotient+1,f,c
 13178  0052A4  5021               	movf	___lwdiv@divisor,w,c
 13179  0052A6  5C1F               	subwf	___lwdiv@dividend,w,c
 13180  0052A8  5022               	movf	___lwdiv@divisor+1,w,c
 13181  0052AA  5820               	subwfb	___lwdiv@dividend+1,w,c
 13182  0052AC  A0D8               	btfss	status,0,c
 13183  0052AE  D005               	goto	l9677
 13184  0052B0  5021               	movf	___lwdiv@divisor,w,c
 13185  0052B2  5E1F               	subwf	___lwdiv@dividend,f,c
 13186  0052B4  5022               	movf	___lwdiv@divisor+1,w,c
 13187  0052B6  5A20               	subwfb	___lwdiv@dividend+1,f,c
 13188  0052B8  8024               	bsf	___lwdiv@quotient,0,c
 13189  0052BA                     l9677:
 13190  0052BA  90D8               	bcf	status,0,c
 13191  0052BC  3222               	rrcf	___lwdiv@divisor+1,f,c
 13192  0052BE  3221               	rrcf	___lwdiv@divisor,f,c
 13193  0052C0  2E23               	decfsz	___lwdiv@counter,f,c
 13194  0052C2  D7ED               	goto	u10750
 13195  0052C4                     l2276:
 13196  0052C4  C024  F01F         	movff	___lwdiv@quotient,?___lwdiv
 13197  0052C8  C025  F020         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13198  0052CC  0012               	return		;funcret
 13199  0052CE                     __end_of___lwdiv:
 13200                           	opt callstack 0
 13201                           
 13202 ;; *************** function ___ftmul *****************
 13203 ;; Defined at:
 13204 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftmul.c"
 13205 ;; Parameters:    Size  Location     Type
 13206 ;;  f1              3   33[BANK0 ] float 
 13207 ;;  f2              3   36[BANK0 ] float 
 13208 ;; Auto vars:     Size  Location     Type
 13209 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
 13210 ;;  sign            1   47[BANK0 ] unsigned char 
 13211 ;;  cntr            1   46[BANK0 ] unsigned char 
 13212 ;;  exp             1   42[BANK0 ] unsigned char 
 13213 ;; Return value:  Size  Location     Type
 13214 ;;                  3   33[BANK0 ] float 
 13215 ;; Registers used:
 13216 ;;		wreg, status,2, status,0, cstack
 13217 ;; Tracked objects:
 13218 ;;		On entry : 0/0
 13219 ;;		On exit  : 0/0
 13220 ;;		Unchanged: 0/0
 13221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13222 ;;      Params:         0       6       0       0       0       0       0
 13223 ;;      Locals:         0       6       0       0       0       0       0
 13224 ;;      Temps:          0       3       0       0       0       0       0
 13225 ;;      Totals:         0      15       0       0       0       0       0
 13226 ;;Total ram usage:       15 bytes
 13227 ;; Hardware stack levels used:    1
 13228 ;; Hardware stack levels required when called:    6
 13229 ;; This function calls:
 13230 ;;		___ftpack
 13231 ;; This function is called by:
 13232 ;;		_printAuto
 13233 ;;		_fround
 13234 ;;		_scale
 13235 ;;		__doprnt
 13236 ;;		_log
 13237 ;;		_pow
 13238 ;;		_eval_poly
 13239 ;;		_exp
 13240 ;; This function uses a non-reentrant model
 13241 ;;
 13242                           
 13243                           	psect	text51
 13244  004196                     __ptext51:
 13245                           	opt callstack 0
 13246  004196                     ___ftmul:
 13247                           	opt callstack 20
 13248                           
 13249                           ;incstack = 0
 13250  004196  C083  F087         	movff	___ftmul@f1+2,??___ftmul
 13251  00419A  0100               	movlb	0	; () banked
 13252  00419C  6B88               	clrf	(??___ftmul+1)& (0+255),b
 13253  00419E  6B89               	clrf	(??___ftmul+2)& (0+255),b
 13254  0041A0  3582               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 13255  0041A2  3787               	rlcf	??___ftmul& (0+255),f,b
 13256  0041A4  E301               	bnc	u10561
 13257  0041A6  8188               	bsf	(??___ftmul+1)& (0+255),0,b
 13258  0041A8                     u10561:
 13259  0041A8  5187               	movf	??___ftmul& (0+255),w,b
 13260  0041AA  6F8A               	movwf	___ftmul@exp& (0+255),b
 13261  0041AC  518A               	movf	___ftmul@exp& (0+255),w,b
 13262  0041AE  A4D8               	btfss	status,2,c
 13263  0041B0  D007               	goto	l9537
 13264                           
 13265                           ; BSR set to: 0
 13266  0041B2  0E00               	movlw	0
 13267  0041B4  6F81               	movwf	?___ftmul& (0+255),b
 13268  0041B6  0E00               	movlw	0
 13269  0041B8  6F82               	movwf	(?___ftmul+1)& (0+255),b
 13270  0041BA  0E00               	movlw	0
 13271  0041BC  6F83               	movwf	(?___ftmul+2)& (0+255),b
 13272  0041BE  0012               	return	
 13273  0041C0                     l9537:
 13274                           
 13275                           ; BSR set to: 0
 13276  0041C0  C086  F087         	movff	___ftmul@f2+2,??___ftmul
 13277  0041C4  6B88               	clrf	(??___ftmul+1)& (0+255),b
 13278  0041C6  6B89               	clrf	(??___ftmul+2)& (0+255),b
 13279  0041C8  3585               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 13280  0041CA  3787               	rlcf	??___ftmul& (0+255),f,b
 13281  0041CC  E301               	bnc	u10581
 13282  0041CE  8188               	bsf	(??___ftmul+1)& (0+255),0,b
 13283  0041D0                     u10581:
 13284  0041D0  5187               	movf	??___ftmul& (0+255),w,b
 13285  0041D2  6F8F               	movwf	___ftmul@sign& (0+255),b
 13286  0041D4  518F               	movf	___ftmul@sign& (0+255),w,b
 13287  0041D6  A4D8               	btfss	status,2,c
 13288  0041D8  D007               	goto	l9543
 13289                           
 13290                           ; BSR set to: 0
 13291  0041DA  0E00               	movlw	0
 13292  0041DC  6F81               	movwf	?___ftmul& (0+255),b
 13293  0041DE  0E00               	movlw	0
 13294  0041E0  6F82               	movwf	(?___ftmul+1)& (0+255),b
 13295  0041E2  0E00               	movlw	0
 13296  0041E4  6F83               	movwf	(?___ftmul+2)& (0+255),b
 13297  0041E6  0012               	return	
 13298  0041E8                     l9543:
 13299                           
 13300                           ; BSR set to: 0
 13301  0041E8  518F               	movf	___ftmul@sign& (0+255),w,b
 13302  0041EA  0F7B               	addlw	123
 13303  0041EC  278A               	addwf	___ftmul@exp& (0+255),f,b
 13304                           
 13305                           ; BSR set to: 0
 13306  0041EE  C083  F08F         	movff	___ftmul@f1+2,___ftmul@sign
 13307  0041F2  5186               	movf	(___ftmul@f2+2)& (0+255),w,b
 13308  0041F4  1B8F               	xorwf	___ftmul@sign& (0+255),f,b
 13309  0041F6  0E80               	movlw	128
 13310  0041F8  178F               	andwf	___ftmul@sign& (0+255),f,b
 13311                           
 13312                           ; BSR set to: 0
 13313  0041FA  8F82               	bsf	(___ftmul@f1+1)& (0+255),7,b
 13314                           
 13315                           ; BSR set to: 0
 13316  0041FC  8F85               	bsf	(___ftmul@f2+1)& (0+255),7,b
 13317                           
 13318                           ; BSR set to: 0
 13319  0041FE  0EFF               	movlw	255
 13320  004200  1784               	andwf	___ftmul@f2& (0+255),f,b
 13321  004202  0EFF               	movlw	255
 13322  004204  1785               	andwf	(___ftmul@f2+1)& (0+255),f,b
 13323  004206  0E00               	movlw	0
 13324  004208  1786               	andwf	(___ftmul@f2+2)& (0+255),f,b
 13325                           
 13326                           ; BSR set to: 0
 13327  00420A  0E00               	movlw	0
 13328  00420C  6F8B               	movwf	___ftmul@f3_as_product& (0+255),b
 13329  00420E  0E00               	movlw	0
 13330  004210  6F8C               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 13331  004212  0E00               	movlw	0
 13332  004214  6F8D               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 13333                           
 13334                           ; BSR set to: 0
 13335  004216  0E07               	movlw	7
 13336  004218  6F8E               	movwf	___ftmul@cntr& (0+255),b
 13337  00421A                     l9557:
 13338                           
 13339                           ; BSR set to: 0
 13340  00421A  A181               	btfss	___ftmul@f1& (0+255),0,b
 13341  00421C  D006               	goto	l9561
 13342                           
 13343                           ; BSR set to: 0
 13344  00421E  5184               	movf	___ftmul@f2& (0+255),w,b
 13345  004220  278B               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13346  004222  5185               	movf	(___ftmul@f2+1)& (0+255),w,b
 13347  004224  238C               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13348  004226  5186               	movf	(___ftmul@f2+2)& (0+255),w,b
 13349  004228  238D               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13350  00422A                     l9561:
 13351                           
 13352                           ; BSR set to: 0
 13353  00422A  90D8               	bcf	status,0,c
 13354  00422C  3383               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13355  00422E  3382               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13356  004230  3381               	rrcf	___ftmul@f1& (0+255),f,b
 13357  004232  90D8               	bcf	status,0,c
 13358  004234  3784               	rlcf	___ftmul@f2& (0+255),f,b
 13359  004236  3785               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 13360  004238  3786               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 13361                           
 13362                           ; BSR set to: 0
 13363  00423A  2F8E               	decfsz	___ftmul@cntr& (0+255),f,b
 13364  00423C  D7EE               	goto	l9557
 13365                           
 13366                           ; BSR set to: 0
 13367  00423E  0E09               	movlw	9
 13368  004240  6F8E               	movwf	___ftmul@cntr& (0+255),b
 13369  004242                     l9567:
 13370                           
 13371                           ; BSR set to: 0
 13372  004242  A181               	btfss	___ftmul@f1& (0+255),0,b
 13373  004244  D006               	goto	l9571
 13374                           
 13375                           ; BSR set to: 0
 13376  004246  5184               	movf	___ftmul@f2& (0+255),w,b
 13377  004248  278B               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13378  00424A  5185               	movf	(___ftmul@f2+1)& (0+255),w,b
 13379  00424C  238C               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13380  00424E  5186               	movf	(___ftmul@f2+2)& (0+255),w,b
 13381  004250  238D               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13382  004252                     l9571:
 13383                           
 13384                           ; BSR set to: 0
 13385  004252  90D8               	bcf	status,0,c
 13386  004254  3383               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13387  004256  3382               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13388  004258  3381               	rrcf	___ftmul@f1& (0+255),f,b
 13389  00425A  90D8               	bcf	status,0,c
 13390  00425C  338D               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 13391  00425E  338C               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 13392  004260  338B               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 13393                           
 13394                           ; BSR set to: 0
 13395  004262  2F8E               	decfsz	___ftmul@cntr& (0+255),f,b
 13396  004264  D7EE               	goto	l9567
 13397                           
 13398                           ; BSR set to: 0
 13399  004266  C08B  F01A         	movff	___ftmul@f3_as_product,___ftpack@arg
 13400  00426A  C08C  F01B         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13401  00426E  C08D  F01C         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13402  004272  C08A  F01D         	movff	___ftmul@exp,___ftpack@exp
 13403  004276  C08F  F01E         	movff	___ftmul@sign,___ftpack@sign
 13404  00427A  EC04  F025         	call	___ftpack	;wreg free
 13405  00427E  C01A  F081         	movff	?___ftpack,?___ftmul
 13406  004282  C01B  F082         	movff	?___ftpack+1,?___ftmul+1
 13407  004286  C01C  F083         	movff	?___ftpack+2,?___ftmul+2
 13408  00428A  0012               	return		;funcret
 13409  00428C                     __end_of___ftmul:
 13410                           	opt callstack 0
 13411                           
 13412 ;; *************** function __tdiv_to_l_ *****************
 13413 ;; Defined at:
 13414 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftdivl.c"
 13415 ;; Parameters:    Size  Location     Type
 13416 ;;  f1              3   25[COMRAM] float 
 13417 ;;  f2              3   28[COMRAM] float 
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;  quot            4   34[COMRAM] unsigned long 
 13420 ;;  exp1            1   39[COMRAM] unsigned char 
 13421 ;;  cntr            1   38[COMRAM] unsigned char 
 13422 ;; Return value:  Size  Location     Type
 13423 ;;                  4   25[COMRAM] unsigned long 
 13424 ;; Registers used:
 13425 ;;		wreg, status,2, status,0
 13426 ;; Tracked objects:
 13427 ;;		On entry : 0/0
 13428 ;;		On exit  : 0/0
 13429 ;;		Unchanged: 0/0
 13430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13431 ;;      Params:         6       0       0       0       0       0       0
 13432 ;;      Locals:         6       0       0       0       0       0       0
 13433 ;;      Temps:          3       0       0       0       0       0       0
 13434 ;;      Totals:        15       0       0       0       0       0       0
 13435 ;;Total ram usage:       15 bytes
 13436 ;; Hardware stack levels used:    1
 13437 ;; Hardware stack levels required when called:    5
 13438 ;; This function calls:
 13439 ;;		Nothing
 13440 ;; This function is called by:
 13441 ;;		__doprnt
 13442 ;; This function uses a non-reentrant model
 13443 ;;
 13444                           
 13445                           	psect	text52
 13446  004098                     __ptext52:
 13447                           	opt callstack 0
 13448  004098                     __tdiv_to_l_:
 13449                           	opt callstack 22
 13450                           
 13451                           ;incstack = 0
 13452  004098  C01C  F020         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 13453  00409C  6A21               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 13454  00409E  6A22               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 13455  0040A0  341B               	rlcf	__tdiv_to_l_@f1+1,w,c
 13456  0040A2  3620               	rlcf	??__tdiv_to_l_& (0+255),f,c
 13457  0040A4  E301               	bnc	u10891
 13458  0040A6  8021               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 13459  0040A8                     u10891:
 13460  0040A8  5020               	movf	??__tdiv_to_l_,w,c
 13461  0040AA  6E28               	movwf	__tdiv_to_l_@exp1,c
 13462  0040AC  5028               	movf	__tdiv_to_l_@exp1,w,c
 13463  0040AE  A4D8               	btfss	status,2,c
 13464  0040B0  D009               	goto	l9793
 13465  0040B2                     u10900:
 13466  0040B2  0E00               	movlw	0
 13467  0040B4  6E1A               	movwf	?__tdiv_to_l_,c
 13468  0040B6  0E00               	movlw	0
 13469  0040B8  6E1B               	movwf	?__tdiv_to_l_+1,c
 13470  0040BA  0E00               	movlw	0
 13471  0040BC  6E1C               	movwf	?__tdiv_to_l_+2,c
 13472  0040BE  0E00               	movlw	0
 13473  0040C0  6E1D               	movwf	?__tdiv_to_l_+3,c
 13474  0040C2  0012               	return	
 13475  0040C4                     l9793:
 13476  0040C4  C01F  F020         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 13477  0040C8  6A21               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 13478  0040CA  6A22               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 13479  0040CC  341E               	rlcf	__tdiv_to_l_@f2+1,w,c
 13480  0040CE  3620               	rlcf	??__tdiv_to_l_& (0+255),f,c
 13481  0040D0  E301               	bnc	u10911
 13482  0040D2  8021               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 13483  0040D4                     u10911:
 13484  0040D4  5020               	movf	??__tdiv_to_l_,w,c
 13485  0040D6  6E27               	movwf	__tdiv_to_l_@cntr,c
 13486  0040D8  5027               	movf	__tdiv_to_l_@cntr,w,c
 13487  0040DA  B4D8               	btfsc	status,2,c
 13488  0040DC  D7EA               	goto	u10900
 13489  0040DE  8E1B               	bsf	__tdiv_to_l_@f1+1,7,c
 13490  0040E0  0EFF               	movlw	255
 13491  0040E2  161A               	andwf	__tdiv_to_l_@f1,f,c
 13492  0040E4  0EFF               	movlw	255
 13493  0040E6  161B               	andwf	__tdiv_to_l_@f1+1,f,c
 13494  0040E8  0E00               	movlw	0
 13495  0040EA  161C               	andwf	__tdiv_to_l_@f1+2,f,c
 13496  0040EC  8E1E               	bsf	__tdiv_to_l_@f2+1,7,c
 13497  0040EE  0EFF               	movlw	255
 13498  0040F0  161D               	andwf	__tdiv_to_l_@f2,f,c
 13499  0040F2  0EFF               	movlw	255
 13500  0040F4  161E               	andwf	__tdiv_to_l_@f2+1,f,c
 13501  0040F6  0E00               	movlw	0
 13502  0040F8  161F               	andwf	__tdiv_to_l_@f2+2,f,c
 13503  0040FA  0E00               	movlw	0
 13504  0040FC  6E23               	movwf	__tdiv_to_l_@quot,c
 13505  0040FE  0E00               	movlw	0
 13506  004100  6E24               	movwf	__tdiv_to_l_@quot+1,c
 13507  004102  0E00               	movlw	0
 13508  004104  6E25               	movwf	__tdiv_to_l_@quot+2,c
 13509  004106  0E00               	movlw	0
 13510  004108  6E26               	movwf	__tdiv_to_l_@quot+3,c
 13511  00410A  0E7F               	movlw	127
 13512  00410C  5E28               	subwf	__tdiv_to_l_@exp1,f,c
 13513  00410E  5027               	movf	__tdiv_to_l_@cntr,w,c
 13514  004110  0F98               	addlw	152
 13515  004112  5E28               	subwf	__tdiv_to_l_@exp1,f,c
 13516  004114  0E18               	movlw	24
 13517  004116  6E27               	movwf	__tdiv_to_l_@cntr,c
 13518  004118                     l2128:
 13519  004118  90D8               	bcf	status,0,c
 13520  00411A  3623               	rlcf	__tdiv_to_l_@quot,f,c
 13521  00411C  3624               	rlcf	__tdiv_to_l_@quot+1,f,c
 13522  00411E  3625               	rlcf	__tdiv_to_l_@quot+2,f,c
 13523  004120  3626               	rlcf	__tdiv_to_l_@quot+3,f,c
 13524  004122  501D               	movf	__tdiv_to_l_@f2,w,c
 13525  004124  5C1A               	subwf	__tdiv_to_l_@f1,w,c
 13526  004126  501E               	movf	__tdiv_to_l_@f2+1,w,c
 13527  004128  581B               	subwfb	__tdiv_to_l_@f1+1,w,c
 13528  00412A  501F               	movf	__tdiv_to_l_@f2+2,w,c
 13529  00412C  581C               	subwfb	__tdiv_to_l_@f1+2,w,c
 13530  00412E  A0D8               	btfss	status,0,c
 13531  004130  D007               	goto	l2129
 13532  004132  501D               	movf	__tdiv_to_l_@f2,w,c
 13533  004134  5E1A               	subwf	__tdiv_to_l_@f1,f,c
 13534  004136  501E               	movf	__tdiv_to_l_@f2+1,w,c
 13535  004138  5A1B               	subwfb	__tdiv_to_l_@f1+1,f,c
 13536  00413A  501F               	movf	__tdiv_to_l_@f2+2,w,c
 13537  00413C  5A1C               	subwfb	__tdiv_to_l_@f1+2,f,c
 13538  00413E  8023               	bsf	__tdiv_to_l_@quot,0,c
 13539  004140                     l2129:
 13540  004140  90D8               	bcf	status,0,c
 13541  004142  361A               	rlcf	__tdiv_to_l_@f1,f,c
 13542  004144  361B               	rlcf	__tdiv_to_l_@f1+1,f,c
 13543  004146  361C               	rlcf	__tdiv_to_l_@f1+2,f,c
 13544  004148  2E27               	decfsz	__tdiv_to_l_@cntr,f,c
 13545  00414A  D7E6               	goto	l2128
 13546  00414C  AE28               	btfss	__tdiv_to_l_@exp1,7,c
 13547  00414E  D00D               	goto	l9833
 13548  004150  5028               	movf	__tdiv_to_l_@exp1,w,c
 13549  004152  0A80               	xorlw	128
 13550  004154  0F97               	addlw	151
 13551  004156  A0D8               	btfss	status,0,c
 13552  004158  D7AC               	goto	u10900
 13553  00415A                     l9829:
 13554  00415A  90D8               	bcf	status,0,c
 13555  00415C  3226               	rrcf	__tdiv_to_l_@quot+3,f,c
 13556  00415E  3225               	rrcf	__tdiv_to_l_@quot+2,f,c
 13557  004160  3224               	rrcf	__tdiv_to_l_@quot+1,f,c
 13558  004162  3223               	rrcf	__tdiv_to_l_@quot,f,c
 13559  004164  3E28               	incfsz	__tdiv_to_l_@exp1,f,c
 13560  004166  D7F9               	goto	l9829
 13561  004168  D00D               	goto	u10970
 13562  00416A                     l9833:
 13563  00416A  0E17               	movlw	23
 13564  00416C  6428               	cpfsgt	__tdiv_to_l_@exp1,c
 13565  00416E  D007               	goto	l9841
 13566  004170  D7A0               	goto	u10900
 13567  004172                     l9839:
 13568  004172  90D8               	bcf	status,0,c
 13569  004174  3623               	rlcf	__tdiv_to_l_@quot,f,c
 13570  004176  3624               	rlcf	__tdiv_to_l_@quot+1,f,c
 13571  004178  3625               	rlcf	__tdiv_to_l_@quot+2,f,c
 13572  00417A  3626               	rlcf	__tdiv_to_l_@quot+3,f,c
 13573  00417C  0628               	decf	__tdiv_to_l_@exp1,f,c
 13574  00417E                     l9841:
 13575  00417E  5028               	movf	__tdiv_to_l_@exp1,w,c
 13576  004180  A4D8               	btfss	status,2,c
 13577  004182  D7F7               	goto	l9839
 13578  004184                     u10970:
 13579  004184  C023  F01A         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 13580  004188  C024  F01B         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 13581  00418C  C025  F01C         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 13582  004190  C026  F01D         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 13583  004194  0012               	return		;funcret
 13584  004196                     __end_of__tdiv_to_l_:
 13585                           	opt callstack 0
 13586                           
 13587 ;; *************** function __div_to_l_ *****************
 13588 ;; Defined at:
 13589 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fldivl.c"
 13590 ;; Parameters:    Size  Location     Type
 13591 ;;  f1              3   25[COMRAM] unsigned long 
 13592 ;;  f2              3   28[COMRAM] unsigned long 
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;  quot            4   31[COMRAM] unsigned long 
 13595 ;;  exp1            1   36[COMRAM] unsigned char 
 13596 ;;  cntr            1   35[COMRAM] unsigned char 
 13597 ;; Return value:  Size  Location     Type
 13598 ;;                  4   25[COMRAM] unsigned long 
 13599 ;; Registers used:
 13600 ;;		wreg, status,2, status,0
 13601 ;; Tracked objects:
 13602 ;;		On entry : 0/0
 13603 ;;		On exit  : 0/0
 13604 ;;		Unchanged: 0/0
 13605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13606 ;;      Params:         6       0       0       0       0       0       0
 13607 ;;      Locals:         6       0       0       0       0       0       0
 13608 ;;      Temps:          0       0       0       0       0       0       0
 13609 ;;      Totals:        12       0       0       0       0       0       0
 13610 ;;Total ram usage:       12 bytes
 13611 ;; Hardware stack levels used:    1
 13612 ;; Hardware stack levels required when called:    5
 13613 ;; This function calls:
 13614 ;;		Nothing
 13615 ;; This function is called by:
 13616 ;;		__doprnt
 13617 ;; This function uses a non-reentrant model
 13618 ;;
 13619                           
 13620                           	psect	text53
 13621  00428C                     __ptext53:
 13622                           	opt callstack 0
 13623  00428C                     __div_to_l_:
 13624                           	opt callstack 22
 13625                           
 13626                           ;incstack = 0
 13627  00428C  341C               	rlcf	__div_to_l_@f1+2,w,c
 13628  00428E  341D               	rlcf	__div_to_l_@f1+3,w,c
 13629  004290  6E25               	movwf	__div_to_l_@exp1,c
 13630  004292  5025               	movf	__div_to_l_@exp1,w,c
 13631  004294  A4D8               	btfss	status,2,c
 13632  004296  D009               	goto	l9849
 13633  004298                     u10980:
 13634  004298  0E00               	movlw	0
 13635  00429A  6E1A               	movwf	?__div_to_l_,c
 13636  00429C  0E00               	movlw	0
 13637  00429E  6E1B               	movwf	?__div_to_l_+1,c
 13638  0042A0  0E00               	movlw	0
 13639  0042A2  6E1C               	movwf	?__div_to_l_+2,c
 13640  0042A4  0E00               	movlw	0
 13641  0042A6  6E1D               	movwf	?__div_to_l_+3,c
 13642  0042A8  0012               	return	
 13643  0042AA                     l9849:
 13644  0042AA  341F               	rlcf	__div_to_l_@f2+2,w,c
 13645  0042AC  3420               	rlcf	__div_to_l_@f2+3,w,c
 13646  0042AE  6E24               	movwf	__div_to_l_@cntr,c
 13647  0042B0  5024               	movf	__div_to_l_@cntr,w,c
 13648  0042B2  B4D8               	btfsc	status,2,c
 13649  0042B4  D7F1               	goto	u10980
 13650  0042B6  8E1C               	bsf	__div_to_l_@f1+2,7,c
 13651  0042B8  0EFF               	movlw	255
 13652  0042BA  161A               	andwf	__div_to_l_@f1,f,c
 13653  0042BC  0EFF               	movlw	255
 13654  0042BE  161B               	andwf	__div_to_l_@f1+1,f,c
 13655  0042C0  0EFF               	movlw	255
 13656  0042C2  161C               	andwf	__div_to_l_@f1+2,f,c
 13657  0042C4  0E00               	movlw	0
 13658  0042C6  161D               	andwf	__div_to_l_@f1+3,f,c
 13659  0042C8  8E1F               	bsf	__div_to_l_@f2+2,7,c
 13660  0042CA  0EFF               	movlw	255
 13661  0042CC  161D               	andwf	__div_to_l_@f2,f,c
 13662  0042CE  0EFF               	movlw	255
 13663  0042D0  161E               	andwf	__div_to_l_@f2+1,f,c
 13664  0042D2  0EFF               	movlw	255
 13665  0042D4  161F               	andwf	__div_to_l_@f2+2,f,c
 13666  0042D6  0E00               	movlw	0
 13667  0042D8  1620               	andwf	__div_to_l_@f2+3,f,c
 13668  0042DA  0E00               	movlw	0
 13669  0042DC  6E20               	movwf	__div_to_l_@quot,c
 13670  0042DE  0E00               	movlw	0
 13671  0042E0  6E21               	movwf	__div_to_l_@quot+1,c
 13672  0042E2  0E00               	movlw	0
 13673  0042E4  6E22               	movwf	__div_to_l_@quot+2,c
 13674  0042E6  0E00               	movlw	0
 13675  0042E8  6E23               	movwf	__div_to_l_@quot+3,c
 13676  0042EA  0E7F               	movlw	127
 13677  0042EC  5E25               	subwf	__div_to_l_@exp1,f,c
 13678  0042EE  5024               	movf	__div_to_l_@cntr,w,c
 13679  0042F0  0FA0               	addlw	160
 13680  0042F2  5E25               	subwf	__div_to_l_@exp1,f,c
 13681  0042F4  0E20               	movlw	32
 13682  0042F6  6E24               	movwf	__div_to_l_@cntr,c
 13683  0042F8                     l9869:
 13684  0042F8  90D8               	bcf	status,0,c
 13685  0042FA  3620               	rlcf	__div_to_l_@quot,f,c
 13686  0042FC  3621               	rlcf	__div_to_l_@quot+1,f,c
 13687  0042FE  3622               	rlcf	__div_to_l_@quot+2,f,c
 13688  004300  3623               	rlcf	__div_to_l_@quot+3,f,c
 13689  004302  501D               	movf	__div_to_l_@f2,w,c
 13690  004304  5C1A               	subwf	__div_to_l_@f1,w,c
 13691  004306  501E               	movf	__div_to_l_@f2+1,w,c
 13692  004308  581B               	subwfb	__div_to_l_@f1+1,w,c
 13693  00430A  501F               	movf	__div_to_l_@f2+2,w,c
 13694  00430C  581C               	subwfb	__div_to_l_@f1+2,w,c
 13695  00430E  5020               	movf	__div_to_l_@f2+3,w,c
 13696  004310  581D               	subwfb	__div_to_l_@f1+3,w,c
 13697  004312  A0D8               	btfss	status,0,c
 13698  004314  D009               	goto	l9877
 13699  004316  501D               	movf	__div_to_l_@f2,w,c
 13700  004318  5E1A               	subwf	__div_to_l_@f1,f,c
 13701  00431A  501E               	movf	__div_to_l_@f2+1,w,c
 13702  00431C  5A1B               	subwfb	__div_to_l_@f1+1,f,c
 13703  00431E  501F               	movf	__div_to_l_@f2+2,w,c
 13704  004320  5A1C               	subwfb	__div_to_l_@f1+2,f,c
 13705  004322  5020               	movf	__div_to_l_@f2+3,w,c
 13706  004324  5A1D               	subwfb	__div_to_l_@f1+3,f,c
 13707  004326  8020               	bsf	__div_to_l_@quot,0,c
 13708  004328                     l9877:
 13709  004328  90D8               	bcf	status,0,c
 13710  00432A  361A               	rlcf	__div_to_l_@f1,f,c
 13711  00432C  361B               	rlcf	__div_to_l_@f1+1,f,c
 13712  00432E  361C               	rlcf	__div_to_l_@f1+2,f,c
 13713  004330  361D               	rlcf	__div_to_l_@f1+3,f,c
 13714  004332  2E24               	decfsz	__div_to_l_@cntr,f,c
 13715  004334  D7E1               	goto	l9869
 13716  004336  AE25               	btfss	__div_to_l_@exp1,7,c
 13717  004338  D00D               	goto	l9893
 13718  00433A  5025               	movf	__div_to_l_@exp1,w,c
 13719  00433C  0A80               	xorlw	128
 13720  00433E  0F9F               	addlw	159
 13721  004340  A0D8               	btfss	status,0,c
 13722  004342  D7AA               	goto	u10980
 13723  004344                     l9889:
 13724  004344  90D8               	bcf	status,0,c
 13725  004346  3223               	rrcf	__div_to_l_@quot+3,f,c
 13726  004348  3222               	rrcf	__div_to_l_@quot+2,f,c
 13727  00434A  3221               	rrcf	__div_to_l_@quot+1,f,c
 13728  00434C  3220               	rrcf	__div_to_l_@quot,f,c
 13729  00434E  3E25               	incfsz	__div_to_l_@exp1,f,c
 13730  004350  D7F9               	goto	l9889
 13731  004352  D00D               	goto	u11040
 13732  004354                     l9893:
 13733  004354  0E1F               	movlw	31
 13734  004356  6425               	cpfsgt	__div_to_l_@exp1,c
 13735  004358  D007               	goto	l9901
 13736  00435A  D79E               	goto	u10980
 13737  00435C                     l9899:
 13738  00435C  90D8               	bcf	status,0,c
 13739  00435E  3620               	rlcf	__div_to_l_@quot,f,c
 13740  004360  3621               	rlcf	__div_to_l_@quot+1,f,c
 13741  004362  3622               	rlcf	__div_to_l_@quot+2,f,c
 13742  004364  3623               	rlcf	__div_to_l_@quot+3,f,c
 13743  004366  0625               	decf	__div_to_l_@exp1,f,c
 13744  004368                     l9901:
 13745  004368  5025               	movf	__div_to_l_@exp1,w,c
 13746  00436A  A4D8               	btfss	status,2,c
 13747  00436C  D7F7               	goto	l9899
 13748  00436E                     u11040:
 13749  00436E  C020  F01A         	movff	__div_to_l_@quot,?__div_to_l_
 13750  004372  C021  F01B         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 13751  004376  C022  F01C         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 13752  00437A  C023  F01D         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 13753  00437E  0012               	return		;funcret
 13754  004380                     __end_of__div_to_l_:
 13755                           	opt callstack 0
 13756                           
 13757 ;; *************** function ___lltoft *****************
 13758 ;; Defined at:
 13759 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lltoft.c"
 13760 ;; Parameters:    Size  Location     Type
 13761 ;;  c               4   33[COMRAM] unsigned long 
 13762 ;; Auto vars:     Size  Location     Type
 13763 ;;  exp             1   41[COMRAM] unsigned char 
 13764 ;; Return value:  Size  Location     Type
 13765 ;;                  3   33[COMRAM] float 
 13766 ;; Registers used:
 13767 ;;		wreg, status,2, status,0, cstack
 13768 ;; Tracked objects:
 13769 ;;		On entry : 0/0
 13770 ;;		On exit  : 0/0
 13771 ;;		Unchanged: 0/0
 13772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13773 ;;      Params:         4       0       0       0       0       0       0
 13774 ;;      Locals:         1       0       0       0       0       0       0
 13775 ;;      Temps:          4       0       0       0       0       0       0
 13776 ;;      Totals:         9       0       0       0       0       0       0
 13777 ;;Total ram usage:        9 bytes
 13778 ;; Hardware stack levels used:    1
 13779 ;; Hardware stack levels required when called:    6
 13780 ;; This function calls:
 13781 ;;		___ftpack
 13782 ;; This function is called by:
 13783 ;;		__doprnt
 13784 ;;		_pow
 13785 ;; This function uses a non-reentrant model
 13786 ;;
 13787                           
 13788                           	psect	text54
 13789  00506C                     __ptext54:
 13790                           	opt callstack 0
 13791  00506C                     ___lltoft:
 13792                           	opt callstack 21
 13793                           
 13794                           ;incstack = 0
 13795  00506C  0E8E               	movlw	142
 13796  00506E  6E2A               	movwf	___lltoft@exp,c
 13797  005070  D006               	goto	l10037
 13798  005072                     l10035:
 13799  005072  90D8               	bcf	status,0,c
 13800  005074  3225               	rrcf	___lltoft@c+3,f,c
 13801  005076  3224               	rrcf	___lltoft@c+2,f,c
 13802  005078  3223               	rrcf	___lltoft@c+1,f,c
 13803  00507A  3222               	rrcf	___lltoft@c,f,c
 13804  00507C  2A2A               	incf	___lltoft@exp,f,c
 13805  00507E                     l10037:
 13806  00507E  0E00               	movlw	0
 13807  005080  1422               	andwf	___lltoft@c,w,c
 13808  005082  6E26               	movwf	??___lltoft& (0+255),c
 13809  005084  0E00               	movlw	0
 13810  005086  1423               	andwf	___lltoft@c+1,w,c
 13811  005088  6E27               	movwf	(??___lltoft+1)& (0+255),c
 13812  00508A  0E00               	movlw	0
 13813  00508C  1424               	andwf	___lltoft@c+2,w,c
 13814  00508E  6E28               	movwf	(??___lltoft+2)& (0+255),c
 13815  005090  0EFF               	movlw	255
 13816  005092  1425               	andwf	___lltoft@c+3,w,c
 13817  005094  6E29               	movwf	(??___lltoft+3)& (0+255),c
 13818  005096  5026               	movf	??___lltoft,w,c
 13819  005098  1027               	iorwf	??___lltoft+1,w,c
 13820  00509A  1028               	iorwf	??___lltoft+2,w,c
 13821  00509C  1029               	iorwf	??___lltoft+3,w,c
 13822  00509E  A4D8               	btfss	status,2,c
 13823  0050A0  D7E8               	goto	l10035
 13824  0050A2  C022  F01A         	movff	___lltoft@c,___ftpack@arg
 13825  0050A6  C023  F01B         	movff	___lltoft@c+1,___ftpack@arg+1
 13826  0050AA  C024  F01C         	movff	___lltoft@c+2,___ftpack@arg+2
 13827  0050AE  C02A  F01D         	movff	___lltoft@exp,___ftpack@exp
 13828  0050B2  0E00               	movlw	0
 13829  0050B4  6E1E               	movwf	___ftpack@sign,c
 13830  0050B6  EC04  F025         	call	___ftpack	;wreg free
 13831  0050BA  C01A  F022         	movff	?___ftpack,?___lltoft
 13832  0050BE  C01B  F023         	movff	?___ftpack+1,?___lltoft+1
 13833  0050C2  C01C  F024         	movff	?___ftpack+2,?___lltoft+2
 13834  0050C6  0012               	return		;funcret
 13835  0050C8                     __end_of___lltoft:
 13836                           	opt callstack 0
 13837                           
 13838 ;; *************** function ___llmod *****************
 13839 ;; Defined at:
 13840 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\llmod.c"
 13841 ;; Parameters:    Size  Location     Type
 13842 ;;  dividend        4   25[COMRAM] unsigned long 
 13843 ;;  divisor         4   29[COMRAM] unsigned long 
 13844 ;; Auto vars:     Size  Location     Type
 13845 ;;  counter         1   33[COMRAM] unsigned char 
 13846 ;; Return value:  Size  Location     Type
 13847 ;;                  4   25[COMRAM] unsigned long 
 13848 ;; Registers used:
 13849 ;;		wreg, status,2, status,0
 13850 ;; Tracked objects:
 13851 ;;		On entry : 0/0
 13852 ;;		On exit  : 0/0
 13853 ;;		Unchanged: 0/0
 13854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13855 ;;      Params:         8       0       0       0       0       0       0
 13856 ;;      Locals:         1       0       0       0       0       0       0
 13857 ;;      Temps:          0       0       0       0       0       0       0
 13858 ;;      Totals:         9       0       0       0       0       0       0
 13859 ;;Total ram usage:        9 bytes
 13860 ;; Hardware stack levels used:    1
 13861 ;; Hardware stack levels required when called:    5
 13862 ;; This function calls:
 13863 ;;		Nothing
 13864 ;; This function is called by:
 13865 ;;		__doprnt
 13866 ;; This function uses a non-reentrant model
 13867 ;;
 13868                           
 13869                           	psect	text55
 13870  004FA2                     __ptext55:
 13871                           	opt callstack 0
 13872  004FA2                     ___llmod:
 13873                           	opt callstack 22
 13874                           
 13875                           ;incstack = 0
 13876  004FA2  501E               	movf	___llmod@divisor,w,c
 13877  004FA4  101F               	iorwf	___llmod@divisor+1,w,c
 13878  004FA6  1020               	iorwf	___llmod@divisor+2,w,c
 13879  004FA8  1021               	iorwf	___llmod@divisor+3,w,c
 13880  004FAA  B4D8               	btfsc	status,2,c
 13881  004FAC  D024               	goto	l2205
 13882  004FAE  0E01               	movlw	1
 13883  004FB0  6E22               	movwf	___llmod@counter,c
 13884  004FB2  D006               	goto	l10023
 13885  004FB4                     l10021:
 13886  004FB4  90D8               	bcf	status,0,c
 13887  004FB6  361E               	rlcf	___llmod@divisor,f,c
 13888  004FB8  361F               	rlcf	___llmod@divisor+1,f,c
 13889  004FBA  3620               	rlcf	___llmod@divisor+2,f,c
 13890  004FBC  3621               	rlcf	___llmod@divisor+3,f,c
 13891  004FBE  2A22               	incf	___llmod@counter,f,c
 13892  004FC0                     l10023:
 13893  004FC0  AE21               	btfss	___llmod@divisor+3,7,c
 13894  004FC2  D7F8               	goto	l10021
 13895  004FC4                     u11240:
 13896  004FC4  501E               	movf	___llmod@divisor,w,c
 13897  004FC6  5C1A               	subwf	___llmod@dividend,w,c
 13898  004FC8  501F               	movf	___llmod@divisor+1,w,c
 13899  004FCA  581B               	subwfb	___llmod@dividend+1,w,c
 13900  004FCC  5020               	movf	___llmod@divisor+2,w,c
 13901  004FCE  581C               	subwfb	___llmod@dividend+2,w,c
 13902  004FD0  5021               	movf	___llmod@divisor+3,w,c
 13903  004FD2  581D               	subwfb	___llmod@dividend+3,w,c
 13904  004FD4  A0D8               	btfss	status,0,c
 13905  004FD6  D008               	goto	l10029
 13906  004FD8  501E               	movf	___llmod@divisor,w,c
 13907  004FDA  5E1A               	subwf	___llmod@dividend,f,c
 13908  004FDC  501F               	movf	___llmod@divisor+1,w,c
 13909  004FDE  5A1B               	subwfb	___llmod@dividend+1,f,c
 13910  004FE0  5020               	movf	___llmod@divisor+2,w,c
 13911  004FE2  5A1C               	subwfb	___llmod@dividend+2,f,c
 13912  004FE4  5021               	movf	___llmod@divisor+3,w,c
 13913  004FE6  5A1D               	subwfb	___llmod@dividend+3,f,c
 13914  004FE8                     l10029:
 13915  004FE8  90D8               	bcf	status,0,c
 13916  004FEA  3221               	rrcf	___llmod@divisor+3,f,c
 13917  004FEC  3220               	rrcf	___llmod@divisor+2,f,c
 13918  004FEE  321F               	rrcf	___llmod@divisor+1,f,c
 13919  004FF0  321E               	rrcf	___llmod@divisor,f,c
 13920  004FF2  2E22               	decfsz	___llmod@counter,f,c
 13921  004FF4  D7E7               	goto	u11240
 13922  004FF6                     l2205:
 13923  004FF6  C01A  F01A         	movff	___llmod@dividend,?___llmod
 13924  004FFA  C01B  F01B         	movff	___llmod@dividend+1,?___llmod+1
 13925  004FFE  C01C  F01C         	movff	___llmod@dividend+2,?___llmod+2
 13926  005002  C01D  F01D         	movff	___llmod@dividend+3,?___llmod+3
 13927  005006  0012               	return		;funcret
 13928  005008                     __end_of___llmod:
 13929                           	opt callstack 0
 13930                           
 13931 ;; *************** function ___lldiv *****************
 13932 ;; Defined at:
 13933 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
 13934 ;; Parameters:    Size  Location     Type
 13935 ;;  dividend        4   25[COMRAM] unsigned long 
 13936 ;;  divisor         4   29[COMRAM] unsigned long 
 13937 ;; Auto vars:     Size  Location     Type
 13938 ;;  quotient        4   33[COMRAM] unsigned long 
 13939 ;;  counter         1   37[COMRAM] unsigned char 
 13940 ;; Return value:  Size  Location     Type
 13941 ;;                  4   25[COMRAM] unsigned long 
 13942 ;; Registers used:
 13943 ;;		wreg, status,2, status,0
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13949 ;;      Params:         8       0       0       0       0       0       0
 13950 ;;      Locals:         5       0       0       0       0       0       0
 13951 ;;      Temps:          0       0       0       0       0       0       0
 13952 ;;      Totals:        13       0       0       0       0       0       0
 13953 ;;Total ram usage:       13 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:    5
 13956 ;; This function calls:
 13957 ;;		Nothing
 13958 ;; This function is called by:
 13959 ;;		__doprnt
 13960 ;; This function uses a non-reentrant model
 13961 ;;
 13962                           
 13963                           	psect	text56
 13964  004C62                     __ptext56:
 13965                           	opt callstack 0
 13966  004C62                     ___lldiv:
 13967                           	opt callstack 22
 13968                           
 13969                           ;incstack = 0
 13970  004C62  0E00               	movlw	0
 13971  004C64  6E22               	movwf	___lldiv@quotient,c
 13972  004C66  0E00               	movlw	0
 13973  004C68  6E23               	movwf	___lldiv@quotient+1,c
 13974  004C6A  0E00               	movlw	0
 13975  004C6C  6E24               	movwf	___lldiv@quotient+2,c
 13976  004C6E  0E00               	movlw	0
 13977  004C70  6E25               	movwf	___lldiv@quotient+3,c
 13978  004C72  501E               	movf	___lldiv@divisor,w,c
 13979  004C74  101F               	iorwf	___lldiv@divisor+1,w,c
 13980  004C76  1020               	iorwf	___lldiv@divisor+2,w,c
 13981  004C78  1021               	iorwf	___lldiv@divisor+3,w,c
 13982  004C7A  B4D8               	btfsc	status,2,c
 13983  004C7C  D02A               	goto	l1790
 13984  004C7E  0E01               	movlw	1
 13985  004C80  6E26               	movwf	___lldiv@counter,c
 13986  004C82  D006               	goto	l9911
 13987  004C84                     l9909:
 13988  004C84  90D8               	bcf	status,0,c
 13989  004C86  361E               	rlcf	___lldiv@divisor,f,c
 13990  004C88  361F               	rlcf	___lldiv@divisor+1,f,c
 13991  004C8A  3620               	rlcf	___lldiv@divisor+2,f,c
 13992  004C8C  3621               	rlcf	___lldiv@divisor+3,f,c
 13993  004C8E  2A26               	incf	___lldiv@counter,f,c
 13994  004C90                     l9911:
 13995  004C90  AE21               	btfss	___lldiv@divisor+3,7,c
 13996  004C92  D7F8               	goto	l9909
 13997  004C94                     u11060:
 13998  004C94  90D8               	bcf	status,0,c
 13999  004C96  3622               	rlcf	___lldiv@quotient,f,c
 14000  004C98  3623               	rlcf	___lldiv@quotient+1,f,c
 14001  004C9A  3624               	rlcf	___lldiv@quotient+2,f,c
 14002  004C9C  3625               	rlcf	___lldiv@quotient+3,f,c
 14003  004C9E  501E               	movf	___lldiv@divisor,w,c
 14004  004CA0  5C1A               	subwf	___lldiv@dividend,w,c
 14005  004CA2  501F               	movf	___lldiv@divisor+1,w,c
 14006  004CA4  581B               	subwfb	___lldiv@dividend+1,w,c
 14007  004CA6  5020               	movf	___lldiv@divisor+2,w,c
 14008  004CA8  581C               	subwfb	___lldiv@dividend+2,w,c
 14009  004CAA  5021               	movf	___lldiv@divisor+3,w,c
 14010  004CAC  581D               	subwfb	___lldiv@dividend+3,w,c
 14011  004CAE  A0D8               	btfss	status,0,c
 14012  004CB0  D009               	goto	l9921
 14013  004CB2  501E               	movf	___lldiv@divisor,w,c
 14014  004CB4  5E1A               	subwf	___lldiv@dividend,f,c
 14015  004CB6  501F               	movf	___lldiv@divisor+1,w,c
 14016  004CB8  5A1B               	subwfb	___lldiv@dividend+1,f,c
 14017  004CBA  5020               	movf	___lldiv@divisor+2,w,c
 14018  004CBC  5A1C               	subwfb	___lldiv@dividend+2,f,c
 14019  004CBE  5021               	movf	___lldiv@divisor+3,w,c
 14020  004CC0  5A1D               	subwfb	___lldiv@dividend+3,f,c
 14021  004CC2  8022               	bsf	___lldiv@quotient,0,c
 14022  004CC4                     l9921:
 14023  004CC4  90D8               	bcf	status,0,c
 14024  004CC6  3221               	rrcf	___lldiv@divisor+3,f,c
 14025  004CC8  3220               	rrcf	___lldiv@divisor+2,f,c
 14026  004CCA  321F               	rrcf	___lldiv@divisor+1,f,c
 14027  004CCC  321E               	rrcf	___lldiv@divisor,f,c
 14028  004CCE  2E26               	decfsz	___lldiv@counter,f,c
 14029  004CD0  D7E1               	goto	u11060
 14030  004CD2                     l1790:
 14031  004CD2  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 14032  004CD6  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 14033  004CDA  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 14034  004CDE  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 14035  004CE2  0012               	return		;funcret
 14036  004CE4                     __end_of___lldiv:
 14037                           	opt callstack 0
 14038                           
 14039 ;; *************** function ___fttol *****************
 14040 ;; Defined at:
 14041 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fttol.c"
 14042 ;; Parameters:    Size  Location     Type
 14043 ;;  f1              3   55[BANK0 ] float 
 14044 ;; Auto vars:     Size  Location     Type
 14045 ;;  lval            4   65[BANK0 ] unsigned long 
 14046 ;;  exp1            1   69[BANK0 ] unsigned char 
 14047 ;;  sign1           1   64[BANK0 ] unsigned char 
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  4   55[BANK0 ] long 
 14050 ;; Registers used:
 14051 ;;		wreg, status,2, status,0
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14057 ;;      Params:         0       4       0       0       0       0       0
 14058 ;;      Locals:         0       6       0       0       0       0       0
 14059 ;;      Temps:          0       5       0       0       0       0       0
 14060 ;;      Totals:         0      15       0       0       0       0       0
 14061 ;;Total ram usage:       15 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; Hardware stack levels required when called:    5
 14064 ;; This function calls:
 14065 ;;		Nothing
 14066 ;; This function is called by:
 14067 ;;		_main
 14068 ;;		_printAuto
 14069 ;;		__doprnt
 14070 ;;		_pow
 14071 ;;		_exp
 14072 ;;		_floor
 14073 ;; This function uses a non-reentrant model
 14074 ;;
 14075                           
 14076                           	psect	text57
 14077  0046FA                     __ptext57:
 14078                           	opt callstack 0
 14079  0046FA                     ___fttol:
 14080                           	opt callstack 22
 14081                           
 14082                           ;incstack = 0
 14083  0046FA  C099  F09B         	movff	___fttol@f1+2,??___fttol
 14084  0046FE  0100               	movlb	0	; () banked
 14085  004700  6B9C               	clrf	(??___fttol+1)& (0+255),b
 14086  004702  6B9D               	clrf	(??___fttol+2)& (0+255),b
 14087  004704  3598               	rlcf	(___fttol@f1+1)& (0+255),w,b
 14088  004706  379B               	rlcf	??___fttol& (0+255),f,b
 14089  004708  E301               	bnc	u11151
 14090  00470A  819C               	bsf	(??___fttol+1)& (0+255),0,b
 14091  00470C                     u11151:
 14092  00470C  519B               	movf	??___fttol& (0+255),w,b
 14093  00470E  6FA5               	movwf	___fttol@exp1& (0+255),b
 14094  004710  51A5               	movf	___fttol@exp1& (0+255),w,b
 14095  004712  A4D8               	btfss	status,2,c
 14096  004714  D009               	goto	l9977
 14097  004716                     u11160:
 14098                           
 14099                           ; BSR set to: 0
 14100  004716  0E00               	movlw	0
 14101  004718  6F97               	movwf	?___fttol& (0+255),b
 14102  00471A  0E00               	movlw	0
 14103  00471C  6F98               	movwf	(?___fttol+1)& (0+255),b
 14104  00471E  0E00               	movlw	0
 14105  004720  6F99               	movwf	(?___fttol+2)& (0+255),b
 14106  004722  0E00               	movlw	0
 14107  004724  6F9A               	movwf	(?___fttol+3)& (0+255),b
 14108  004726  0012               	return	
 14109  004728                     l9977:
 14110                           
 14111                           ; BSR set to: 0
 14112  004728  0E17               	movlw	23
 14113  00472A  6F9B               	movwf	??___fttol& (0+255),b
 14114  00472C  C097  F09C         	movff	___fttol@f1,??___fttol+1
 14115  004730  C098  F09D         	movff	___fttol@f1+1,??___fttol+2
 14116  004734  C099  F09E         	movff	___fttol@f1+2,??___fttol+3
 14117  004738  299B               	incf	??___fttol& (0+255),w,b
 14118  00473A  6F9F               	movwf	(??___fttol+4)& (0+255),b
 14119  00473C  D004               	goto	u11170
 14120  00473E                     u11175:
 14121  00473E  90D8               	bcf	status,0,c
 14122  004740  339E               	rrcf	(??___fttol+3)& (0+255),f,b
 14123  004742  339D               	rrcf	(??___fttol+2)& (0+255),f,b
 14124  004744  339C               	rrcf	(??___fttol+1)& (0+255),f,b
 14125  004746                     u11170:
 14126  004746  2F9F               	decfsz	(??___fttol+4)& (0+255),f,b
 14127  004748  D7FA               	goto	u11175
 14128  00474A  0100               	movlb	0	; () banked
 14129  00474C  519C               	movf	(??___fttol+1)& (0+255),w,b
 14130  00474E  6FA0               	movwf	___fttol@sign1& (0+255),b
 14131                           
 14132                           ; BSR set to: 0
 14133  004750  8F98               	bsf	(___fttol@f1+1)& (0+255),7,b
 14134                           
 14135                           ; BSR set to: 0
 14136  004752  0EFF               	movlw	255
 14137  004754  1797               	andwf	___fttol@f1& (0+255),f,b
 14138  004756  0EFF               	movlw	255
 14139  004758  1798               	andwf	(___fttol@f1+1)& (0+255),f,b
 14140  00475A  0E00               	movlw	0
 14141  00475C  1799               	andwf	(___fttol@f1+2)& (0+255),f,b
 14142                           
 14143                           ; BSR set to: 0
 14144  00475E  5197               	movf	___fttol@f1& (0+255),w,b
 14145  004760  6FA1               	movwf	___fttol@lval& (0+255),b
 14146  004762  5198               	movf	(___fttol@f1+1)& (0+255),w,b
 14147  004764  6FA2               	movwf	(___fttol@lval+1)& (0+255),b
 14148  004766  5199               	movf	(___fttol@f1+2)& (0+255),w,b
 14149  004768  6FA3               	movwf	(___fttol@lval+2)& (0+255),b
 14150  00476A  6BA4               	clrf	(___fttol@lval+3)& (0+255),b
 14151                           
 14152                           ; BSR set to: 0
 14153  00476C  0E8E               	movlw	142
 14154  00476E  5FA5               	subwf	___fttol@exp1& (0+255),f,b
 14155                           
 14156                           ; BSR set to: 0
 14157  004770  AFA5               	btfss	___fttol@exp1& (0+255),7,b
 14158  004772  D00D               	goto	l9999
 14159                           
 14160                           ; BSR set to: 0
 14161  004774  51A5               	movf	___fttol@exp1& (0+255),w,b
 14162  004776  0A80               	xorlw	128
 14163  004778  0F8F               	addlw	143
 14164  00477A  A0D8               	btfss	status,0,c
 14165  00477C  D7CC               	goto	u11160
 14166  00477E                     l9995:
 14167                           
 14168                           ; BSR set to: 0
 14169  00477E  90D8               	bcf	status,0,c
 14170  004780  33A4               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14171  004782  33A3               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14172  004784  33A2               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14173  004786  33A1               	rrcf	___fttol@lval& (0+255),f,b
 14174                           
 14175                           ; BSR set to: 0
 14176  004788  3FA5               	incfsz	___fttol@exp1& (0+255),f,b
 14177  00478A  D7F9               	goto	l9995
 14178  00478C  D00D               	goto	u11210
 14179  00478E                     l9999:
 14180                           
 14181                           ; BSR set to: 0
 14182  00478E  0E17               	movlw	23
 14183  004790  65A5               	cpfsgt	___fttol@exp1& (0+255),b
 14184  004792  D007               	goto	l10007
 14185  004794  D7C0               	goto	u11160
 14186  004796                     l10005:
 14187                           
 14188                           ; BSR set to: 0
 14189  004796  90D8               	bcf	status,0,c
 14190  004798  37A1               	rlcf	___fttol@lval& (0+255),f,b
 14191  00479A  37A2               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14192  00479C  37A3               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14193  00479E  37A4               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14194  0047A0  07A5               	decf	___fttol@exp1& (0+255),f,b
 14195  0047A2                     l10007:
 14196                           
 14197                           ; BSR set to: 0
 14198  0047A2  51A5               	movf	___fttol@exp1& (0+255),w,b
 14199  0047A4  A4D8               	btfss	status,2,c
 14200  0047A6  D7F7               	goto	l10005
 14201  0047A8                     u11210:
 14202                           
 14203                           ; BSR set to: 0
 14204  0047A8  51A0               	movf	___fttol@sign1& (0+255),w,b
 14205  0047AA  B4D8               	btfsc	status,2,c
 14206  0047AC  D008               	goto	l10013
 14207                           
 14208                           ; BSR set to: 0
 14209  0047AE  1FA4               	comf	(___fttol@lval+3)& (0+255),f,b
 14210  0047B0  1FA3               	comf	(___fttol@lval+2)& (0+255),f,b
 14211  0047B2  1FA2               	comf	(___fttol@lval+1)& (0+255),f,b
 14212  0047B4  6DA1               	negf	___fttol@lval& (0+255),b
 14213  0047B6  0E00               	movlw	0
 14214  0047B8  23A2               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14215  0047BA  23A3               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14216  0047BC  23A4               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14217  0047BE                     l10013:
 14218                           
 14219                           ; BSR set to: 0
 14220  0047BE  C0A1  F097         	movff	___fttol@lval,?___fttol
 14221  0047C2  C0A2  F098         	movff	___fttol@lval+1,?___fttol+1
 14222  0047C6  C0A3  F099         	movff	___fttol@lval+2,?___fttol+2
 14223  0047CA  C0A4  F09A         	movff	___fttol@lval+3,?___fttol+3
 14224                           
 14225                           ; BSR set to: 0
 14226  0047CE  0012               	return		;funcret
 14227  0047D0                     __end_of___fttol:
 14228                           	opt callstack 0
 14229                           
 14230 ;; *************** function ___ftsub *****************
 14231 ;; Defined at:
 14232 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftsub.c"
 14233 ;; Parameters:    Size  Location     Type
 14234 ;;  f1              3   12[BANK0 ] float 
 14235 ;;  f2              3   15[BANK0 ] float 
 14236 ;; Auto vars:     Size  Location     Type
 14237 ;;		None
 14238 ;; Return value:  Size  Location     Type
 14239 ;;                  3   12[BANK0 ] float 
 14240 ;; Registers used:
 14241 ;;		wreg, status,2, status,0, cstack
 14242 ;; Tracked objects:
 14243 ;;		On entry : 0/0
 14244 ;;		On exit  : 0/0
 14245 ;;		Unchanged: 0/0
 14246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14247 ;;      Params:         0       6       0       0       0       0       0
 14248 ;;      Locals:         0       0       0       0       0       0       0
 14249 ;;      Temps:          0       0       0       0       0       0       0
 14250 ;;      Totals:         0       6       0       0       0       0       0
 14251 ;;Total ram usage:        6 bytes
 14252 ;; Hardware stack levels used:    1
 14253 ;; Hardware stack levels required when called:    7
 14254 ;; This function calls:
 14255 ;;		___ftadd
 14256 ;; This function is called by:
 14257 ;;		_printAuto
 14258 ;;		__doprnt
 14259 ;;		_exp
 14260 ;; This function uses a non-reentrant model
 14261 ;;
 14262                           
 14263                           	psect	text58
 14264  005554                     __ptext58:
 14265                           	opt callstack 0
 14266  005554                     ___ftsub:
 14267                           	opt callstack 20
 14268                           
 14269                           ; BSR set to: 0
 14270                           ;incstack = 0
 14271  005554  0100               	movlb	0	; () banked
 14272  005556  516F               	movf	___ftsub@f2& (0+255),w,b
 14273  005558  1170               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14274  00555A  1171               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14275  00555C  B4D8               	btfsc	status,2,c
 14276  00555E  D006               	goto	l9945
 14277                           
 14278                           ; BSR set to: 0
 14279  005560  0E00               	movlw	0
 14280  005562  1B6F               	xorwf	___ftsub@f2& (0+255),f,b
 14281  005564  0E00               	movlw	0
 14282  005566  1B70               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14283  005568  0E80               	movlw	128
 14284  00556A  1B71               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14285  00556C                     l9945:
 14286                           
 14287                           ; BSR set to: 0
 14288  00556C  C06C  F060         	movff	___ftsub@f1,___ftadd@f1
 14289  005570  C06D  F061         	movff	___ftsub@f1+1,___ftadd@f1+1
 14290  005574  C06E  F062         	movff	___ftsub@f1+2,___ftadd@f1+2
 14291  005578  C06F  F063         	movff	___ftsub@f2,___ftadd@f2
 14292  00557C  C070  F064         	movff	___ftsub@f2+1,___ftadd@f2+1
 14293  005580  C071  F065         	movff	___ftsub@f2+2,___ftadd@f2+2
 14294  005584  ECDA  F01C         	call	___ftadd	;wreg free
 14295  005588  C060  F06C         	movff	?___ftadd,?___ftsub
 14296  00558C  C061  F06D         	movff	?___ftadd+1,?___ftsub+1
 14297  005590  C062  F06E         	movff	?___ftadd+2,?___ftsub+2
 14298  005594  0012               	return		;funcret
 14299  005596                     __end_of___ftsub:
 14300                           	opt callstack 0
 14301                           
 14302 ;; *************** function ___ftadd *****************
 14303 ;; Defined at:
 14304 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftadd.c"
 14305 ;; Parameters:    Size  Location     Type
 14306 ;;  f1              3    0[BANK0 ] float 
 14307 ;;  f2              3    3[BANK0 ] float 
 14308 ;; Auto vars:     Size  Location     Type
 14309 ;;  exp1            1   11[BANK0 ] unsigned char 
 14310 ;;  exp2            1   10[BANK0 ] unsigned char 
 14311 ;;  sign            1    9[BANK0 ] unsigned char 
 14312 ;; Return value:  Size  Location     Type
 14313 ;;                  3    0[BANK0 ] float 
 14314 ;; Registers used:
 14315 ;;		wreg, status,2, status,0, cstack
 14316 ;; Tracked objects:
 14317 ;;		On entry : 0/0
 14318 ;;		On exit  : 0/0
 14319 ;;		Unchanged: 0/0
 14320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14321 ;;      Params:         0       6       0       0       0       0       0
 14322 ;;      Locals:         0       3       0       0       0       0       0
 14323 ;;      Temps:          0       3       0       0       0       0       0
 14324 ;;      Totals:         0      12       0       0       0       0       0
 14325 ;;Total ram usage:       12 bytes
 14326 ;; Hardware stack levels used:    1
 14327 ;; Hardware stack levels required when called:    6
 14328 ;; This function calls:
 14329 ;;		___ftpack
 14330 ;; This function is called by:
 14331 ;;		_printAuto
 14332 ;;		__doprnt
 14333 ;;		___ftsub
 14334 ;;		_log
 14335 ;;		_eval_poly
 14336 ;;		_floor
 14337 ;; This function uses a non-reentrant model
 14338 ;;
 14339                           
 14340                           	psect	text59
 14341  0039B4                     __ptext59:
 14342                           	opt callstack 0
 14343  0039B4                     ___ftadd:
 14344                           	opt callstack 20
 14345                           
 14346                           ;incstack = 0
 14347  0039B4  C062  F066         	movff	___ftadd@f1+2,??___ftadd
 14348  0039B8  0100               	movlb	0	; () banked
 14349  0039BA  6B67               	clrf	(??___ftadd+1)& (0+255),b
 14350  0039BC  6B68               	clrf	(??___ftadd+2)& (0+255),b
 14351  0039BE  3561               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14352  0039C0  3766               	rlcf	??___ftadd& (0+255),f,b
 14353  0039C2  E301               	bnc	u10351
 14354  0039C4  8167               	bsf	(??___ftadd+1)& (0+255),0,b
 14355  0039C6                     u10351:
 14356  0039C6  5166               	movf	??___ftadd& (0+255),w,b
 14357  0039C8  6F6B               	movwf	___ftadd@exp1& (0+255),b
 14358  0039CA  C065  F066         	movff	___ftadd@f2+2,??___ftadd
 14359  0039CE  6B67               	clrf	(??___ftadd+1)& (0+255),b
 14360  0039D0  6B68               	clrf	(??___ftadd+2)& (0+255),b
 14361  0039D2  3564               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14362  0039D4  3766               	rlcf	??___ftadd& (0+255),f,b
 14363  0039D6  E301               	bnc	u10361
 14364  0039D8  8167               	bsf	(??___ftadd+1)& (0+255),0,b
 14365  0039DA                     u10361:
 14366  0039DA  5166               	movf	??___ftadd& (0+255),w,b
 14367  0039DC  6F6A               	movwf	___ftadd@exp2& (0+255),b
 14368                           
 14369                           ; BSR set to: 0
 14370  0039DE  516B               	movf	___ftadd@exp1& (0+255),w,b
 14371  0039E0  B4D8               	btfsc	status,2,c
 14372  0039E2  D00A               	goto	u10390
 14373                           
 14374                           ; BSR set to: 0
 14375  0039E4  516A               	movf	___ftadd@exp2& (0+255),w,b
 14376  0039E6  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
 14377  0039E8  B0D8               	btfsc	status,0,c
 14378  0039EA  D00D               	goto	l9469
 14379                           
 14380                           ; BSR set to: 0
 14381  0039EC  516B               	movf	___ftadd@exp1& (0+255),w,b
 14382  0039EE  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
 14383  0039F0  6F66               	movwf	??___ftadd& (0+255),b
 14384  0039F2  0E18               	movlw	24
 14385  0039F4  6566               	cpfsgt	??___ftadd& (0+255),b
 14386  0039F6  D007               	goto	l9469
 14387  0039F8                     u10390:
 14388                           
 14389                           ; BSR set to: 0
 14390  0039F8  C063  F060         	movff	___ftadd@f2,?___ftadd
 14391  0039FC  C064  F061         	movff	___ftadd@f2+1,?___ftadd+1
 14392  003A00  C065  F062         	movff	___ftadd@f2+2,?___ftadd+2
 14393  003A04  0012               	return	
 14394  003A06                     l9469:
 14395                           
 14396                           ; BSR set to: 0
 14397  003A06  516A               	movf	___ftadd@exp2& (0+255),w,b
 14398  003A08  B4D8               	btfsc	status,2,c
 14399  003A0A  D00A               	goto	u10420
 14400                           
 14401                           ; BSR set to: 0
 14402  003A0C  516B               	movf	___ftadd@exp1& (0+255),w,b
 14403  003A0E  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
 14404  003A10  B0D8               	btfsc	status,0,c
 14405  003A12  D00D               	goto	l9475
 14406                           
 14407                           ; BSR set to: 0
 14408  003A14  516A               	movf	___ftadd@exp2& (0+255),w,b
 14409  003A16  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
 14410  003A18  6F66               	movwf	??___ftadd& (0+255),b
 14411  003A1A  0E18               	movlw	24
 14412  003A1C  6566               	cpfsgt	??___ftadd& (0+255),b
 14413  003A1E  D007               	goto	l9475
 14414  003A20                     u10420:
 14415                           
 14416                           ; BSR set to: 0
 14417  003A20  C060  F060         	movff	___ftadd@f1,?___ftadd
 14418  003A24  C061  F061         	movff	___ftadd@f1+1,?___ftadd+1
 14419  003A28  C062  F062         	movff	___ftadd@f1+2,?___ftadd+2
 14420  003A2C  0012               	return	
 14421  003A2E                     l9475:
 14422                           
 14423                           ; BSR set to: 0
 14424  003A2E  0E06               	movlw	6
 14425  003A30  6F69               	movwf	___ftadd@sign& (0+255),b
 14426                           
 14427                           ; BSR set to: 0
 14428  003A32  BF62               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 14429                           
 14430                           ; BSR set to: 0
 14431  003A34  8F69               	bsf	___ftadd@sign& (0+255),7,b
 14432                           
 14433                           ; BSR set to: 0
 14434  003A36  BF65               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 14435                           
 14436                           ; BSR set to: 0
 14437  003A38  8D69               	bsf	___ftadd@sign& (0+255),6,b
 14438                           
 14439                           ; BSR set to: 0
 14440  003A3A  8F61               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14441                           
 14442                           ; BSR set to: 0
 14443  003A3C  0EFF               	movlw	255
 14444  003A3E  1760               	andwf	___ftadd@f1& (0+255),f,b
 14445  003A40  0EFF               	movlw	255
 14446  003A42  1761               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14447  003A44  0E00               	movlw	0
 14448  003A46  1762               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14449  003A48  8F64               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14450                           
 14451                           ; BSR set to: 0
 14452  003A4A  0EFF               	movlw	255
 14453  003A4C  1763               	andwf	___ftadd@f2& (0+255),f,b
 14454  003A4E  0EFF               	movlw	255
 14455  003A50  1764               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14456  003A52  0E00               	movlw	0
 14457  003A54  1765               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14458                           
 14459                           ; BSR set to: 0
 14460  003A56  516A               	movf	___ftadd@exp2& (0+255),w,b
 14461  003A58  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
 14462  003A5A  B0D8               	btfsc	status,0,c
 14463  003A5C  D01B               	goto	l9501
 14464  003A5E                     u10450:
 14465                           
 14466                           ; BSR set to: 0
 14467  003A5E  90D8               	bcf	status,0,c
 14468  003A60  3763               	rlcf	___ftadd@f2& (0+255),f,b
 14469  003A62  3764               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14470  003A64  3765               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14471  003A66  076A               	decf	___ftadd@exp2& (0+255),f,b
 14472                           
 14473                           ; BSR set to: 0
 14474  003A68  516B               	movf	___ftadd@exp1& (0+255),w,b
 14475  003A6A  196A               	xorwf	___ftadd@exp2& (0+255),w,b
 14476  003A6C  B4D8               	btfsc	status,2,c
 14477  003A6E  D00D               	goto	l9499
 14478                           
 14479                           ; BSR set to: 0
 14480  003A70  0769               	decf	___ftadd@sign& (0+255),f,b
 14481  003A72  C069  F066         	movff	___ftadd@sign,??___ftadd
 14482  003A76  0E07               	movlw	7
 14483  003A78  1766               	andwf	??___ftadd& (0+255),f,b
 14484  003A7A  B4D8               	btfsc	status,2,c
 14485  003A7C  D006               	goto	l9499
 14486  003A7E  D7EF               	goto	u10450
 14487  003A80                     l9497:
 14488                           
 14489                           ; BSR set to: 0
 14490  003A80  90D8               	bcf	status,0,c
 14491  003A82  3362               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14492  003A84  3361               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14493  003A86  3360               	rrcf	___ftadd@f1& (0+255),f,b
 14494  003A88  2B6B               	incf	___ftadd@exp1& (0+255),f,b
 14495  003A8A                     l9499:
 14496                           
 14497                           ; BSR set to: 0
 14498  003A8A  516A               	movf	___ftadd@exp2& (0+255),w,b
 14499  003A8C  196B               	xorwf	___ftadd@exp1& (0+255),w,b
 14500  003A8E  B4D8               	btfsc	status,2,c
 14501  003A90  D01F               	goto	u10520
 14502  003A92  D7F6               	goto	l9497
 14503  003A94                     l9501:
 14504                           
 14505                           ; BSR set to: 0
 14506  003A94  516B               	movf	___ftadd@exp1& (0+255),w,b
 14507  003A96  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
 14508  003A98  B0D8               	btfsc	status,0,c
 14509  003A9A  D01A               	goto	u10520
 14510  003A9C                     u10490:
 14511                           
 14512                           ; BSR set to: 0
 14513  003A9C  90D8               	bcf	status,0,c
 14514  003A9E  3760               	rlcf	___ftadd@f1& (0+255),f,b
 14515  003AA0  3761               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14516  003AA2  3762               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14517  003AA4  076B               	decf	___ftadd@exp1& (0+255),f,b
 14518                           
 14519                           ; BSR set to: 0
 14520  003AA6  516B               	movf	___ftadd@exp1& (0+255),w,b
 14521  003AA8  196A               	xorwf	___ftadd@exp2& (0+255),w,b
 14522  003AAA  B4D8               	btfsc	status,2,c
 14523  003AAC  D00D               	goto	l9511
 14524                           
 14525                           ; BSR set to: 0
 14526  003AAE  0769               	decf	___ftadd@sign& (0+255),f,b
 14527  003AB0  C069  F066         	movff	___ftadd@sign,??___ftadd
 14528  003AB4  0E07               	movlw	7
 14529  003AB6  1766               	andwf	??___ftadd& (0+255),f,b
 14530  003AB8  B4D8               	btfsc	status,2,c
 14531  003ABA  D006               	goto	l9511
 14532  003ABC  D7EF               	goto	u10490
 14533  003ABE                     l9509:
 14534                           
 14535                           ; BSR set to: 0
 14536  003ABE  90D8               	bcf	status,0,c
 14537  003AC0  3365               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14538  003AC2  3364               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14539  003AC4  3363               	rrcf	___ftadd@f2& (0+255),f,b
 14540  003AC6  2B6A               	incf	___ftadd@exp2& (0+255),f,b
 14541  003AC8                     l9511:
 14542                           
 14543                           ; BSR set to: 0
 14544  003AC8  516A               	movf	___ftadd@exp2& (0+255),w,b
 14545  003ACA  196B               	xorwf	___ftadd@exp1& (0+255),w,b
 14546  003ACC  A4D8               	btfss	status,2,c
 14547  003ACE  D7F7               	goto	l9509
 14548  003AD0                     u10520:
 14549                           
 14550                           ; BSR set to: 0
 14551  003AD0  AF69               	btfss	___ftadd@sign& (0+255),7,b
 14552  003AD2  D00C               	goto	l2110
 14553                           
 14554                           ; BSR set to: 0
 14555  003AD4  0EFF               	movlw	255
 14556  003AD6  1B60               	xorwf	___ftadd@f1& (0+255),f,b
 14557  003AD8  0EFF               	movlw	255
 14558  003ADA  1B61               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14559  003ADC  0EFF               	movlw	255
 14560  003ADE  1B62               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14561  003AE0  0E01               	movlw	1
 14562  003AE2  2760               	addwf	___ftadd@f1& (0+255),f,b
 14563  003AE4  0E00               	movlw	0
 14564  003AE6  2361               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14565  003AE8  0E00               	movlw	0
 14566  003AEA  2362               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14567  003AEC                     l2110:
 14568                           
 14569                           ; BSR set to: 0
 14570  003AEC  AD69               	btfss	___ftadd@sign& (0+255),6,b
 14571  003AEE  D00C               	goto	l9517
 14572                           
 14573                           ; BSR set to: 0
 14574  003AF0  0EFF               	movlw	255
 14575  003AF2  1B63               	xorwf	___ftadd@f2& (0+255),f,b
 14576  003AF4  0EFF               	movlw	255
 14577  003AF6  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14578  003AF8  0EFF               	movlw	255
 14579  003AFA  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14580  003AFC  0E01               	movlw	1
 14581  003AFE  2763               	addwf	___ftadd@f2& (0+255),f,b
 14582  003B00  0E00               	movlw	0
 14583  003B02  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14584  003B04  0E00               	movlw	0
 14585  003B06  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14586  003B08                     l9517:
 14587                           
 14588                           ; BSR set to: 0
 14589  003B08  0E00               	movlw	0
 14590  003B0A  6F69               	movwf	___ftadd@sign& (0+255),b
 14591                           
 14592                           ; BSR set to: 0
 14593  003B0C  5160               	movf	___ftadd@f1& (0+255),w,b
 14594  003B0E  2763               	addwf	___ftadd@f2& (0+255),f,b
 14595  003B10  5161               	movf	(___ftadd@f1+1)& (0+255),w,b
 14596  003B12  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14597  003B14  5162               	movf	(___ftadd@f1+2)& (0+255),w,b
 14598  003B16  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14599                           
 14600                           ; BSR set to: 0
 14601  003B18  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14602  003B1A  D00E               	goto	l9527
 14603                           
 14604                           ; BSR set to: 0
 14605  003B1C  0EFF               	movlw	255
 14606  003B1E  1B63               	xorwf	___ftadd@f2& (0+255),f,b
 14607  003B20  0EFF               	movlw	255
 14608  003B22  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14609  003B24  0EFF               	movlw	255
 14610  003B26  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14611  003B28  0E01               	movlw	1
 14612  003B2A  2763               	addwf	___ftadd@f2& (0+255),f,b
 14613  003B2C  0E00               	movlw	0
 14614  003B2E  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14615  003B30  0E00               	movlw	0
 14616  003B32  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14617                           
 14618                           ; BSR set to: 0
 14619  003B34  0E01               	movlw	1
 14620  003B36  6F69               	movwf	___ftadd@sign& (0+255),b
 14621  003B38                     l9527:
 14622                           
 14623                           ; BSR set to: 0
 14624  003B38  C063  F01A         	movff	___ftadd@f2,___ftpack@arg
 14625  003B3C  C064  F01B         	movff	___ftadd@f2+1,___ftpack@arg+1
 14626  003B40  C065  F01C         	movff	___ftadd@f2+2,___ftpack@arg+2
 14627  003B44  C06B  F01D         	movff	___ftadd@exp1,___ftpack@exp
 14628  003B48  C069  F01E         	movff	___ftadd@sign,___ftpack@sign
 14629  003B4C  EC04  F025         	call	___ftpack	;wreg free
 14630  003B50  C01A  F060         	movff	?___ftpack,?___ftadd
 14631  003B54  C01B  F061         	movff	?___ftpack+1,?___ftadd+1
 14632  003B58  C01C  F062         	movff	?___ftpack+2,?___ftadd+2
 14633  003B5C  0012               	return		;funcret
 14634  003B5E                     __end_of___ftadd:
 14635                           	opt callstack 0
 14636                           
 14637 ;; *************** function ___ftpack *****************
 14638 ;; Defined at:
 14639 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\float.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;  arg             3   25[COMRAM] unsigned um
 14642 ;;  exp             1   28[COMRAM] unsigned char 
 14643 ;;  sign            1   29[COMRAM] unsigned char 
 14644 ;; Auto vars:     Size  Location     Type
 14645 ;;		None
 14646 ;; Return value:  Size  Location     Type
 14647 ;;                  3   25[COMRAM] float 
 14648 ;; Registers used:
 14649 ;;		wreg, status,2, status,0
 14650 ;; Tracked objects:
 14651 ;;		On entry : 0/0
 14652 ;;		On exit  : 0/0
 14653 ;;		Unchanged: 0/0
 14654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14655 ;;      Params:         5       0       0       0       0       0       0
 14656 ;;      Locals:         0       0       0       0       0       0       0
 14657 ;;      Temps:          3       0       0       0       0       0       0
 14658 ;;      Totals:         8       0       0       0       0       0       0
 14659 ;;Total ram usage:        8 bytes
 14660 ;; Hardware stack levels used:    1
 14661 ;; Hardware stack levels required when called:    5
 14662 ;; This function calls:
 14663 ;;		Nothing
 14664 ;; This function is called by:
 14665 ;;		___altoft
 14666 ;;		___awtoft
 14667 ;;		___ftadd
 14668 ;;		___ftdiv
 14669 ;;		___ftmul
 14670 ;;		___lltoft
 14671 ;;		___lwtoft
 14672 ;; This function uses a non-reentrant model
 14673 ;;
 14674                           
 14675                           	psect	text60
 14676  004A08                     __ptext60:
 14677                           	opt callstack 0
 14678  004A08                     ___ftpack:
 14679                           	opt callstack 20
 14680                           
 14681                           ;incstack = 0
 14682  004A08  501D               	movf	___ftpack@exp,w,c
 14683  004A0A  B4D8               	btfsc	status,2,c
 14684  004A0C  D005               	goto	u10250
 14685  004A0E  501A               	movf	___ftpack@arg,w,c
 14686  004A10  101B               	iorwf	___ftpack@arg+1,w,c
 14687  004A12  101C               	iorwf	___ftpack@arg+2,w,c
 14688  004A14  A4D8               	btfss	status,2,c
 14689  004A16  D00C               	goto	l9401
 14690  004A18                     u10250:
 14691  004A18  0E00               	movlw	0
 14692  004A1A  6E1A               	movwf	?___ftpack,c
 14693  004A1C  0E00               	movlw	0
 14694  004A1E  6E1B               	movwf	?___ftpack+1,c
 14695  004A20  0E00               	movlw	0
 14696  004A22  6E1C               	movwf	?___ftpack+2,c
 14697  004A24  0012               	return	
 14698  004A26                     l9399:
 14699  004A26  2A1D               	incf	___ftpack@exp,f,c
 14700  004A28  90D8               	bcf	status,0,c
 14701  004A2A  321C               	rrcf	___ftpack@arg+2,f,c
 14702  004A2C  321B               	rrcf	___ftpack@arg+1,f,c
 14703  004A2E  321A               	rrcf	___ftpack@arg,f,c
 14704  004A30                     l9401:
 14705  004A30  0E00               	movlw	0
 14706  004A32  141A               	andwf	___ftpack@arg,w,c
 14707  004A34  6E1F               	movwf	??___ftpack& (0+255),c
 14708  004A36  0E00               	movlw	0
 14709  004A38  141B               	andwf	___ftpack@arg+1,w,c
 14710  004A3A  6E20               	movwf	(??___ftpack+1)& (0+255),c
 14711  004A3C  0EFE               	movlw	254
 14712  004A3E  141C               	andwf	___ftpack@arg+2,w,c
 14713  004A40  6E21               	movwf	(??___ftpack+2)& (0+255),c
 14714  004A42  501F               	movf	??___ftpack,w,c
 14715  004A44  1020               	iorwf	??___ftpack+1,w,c
 14716  004A46  1021               	iorwf	??___ftpack+2,w,c
 14717  004A48  B4D8               	btfsc	status,2,c
 14718  004A4A  D00C               	goto	l9407
 14719  004A4C  D7EC               	goto	l9399
 14720  004A4E                     l9403:
 14721  004A4E  2A1D               	incf	___ftpack@exp,f,c
 14722  004A50  0E01               	movlw	1
 14723  004A52  261A               	addwf	___ftpack@arg,f,c
 14724  004A54  0E00               	movlw	0
 14725  004A56  221B               	addwfc	___ftpack@arg+1,f,c
 14726  004A58  0E00               	movlw	0
 14727  004A5A  221C               	addwfc	___ftpack@arg+2,f,c
 14728  004A5C  90D8               	bcf	status,0,c
 14729  004A5E  321C               	rrcf	___ftpack@arg+2,f,c
 14730  004A60  321B               	rrcf	___ftpack@arg+1,f,c
 14731  004A62  321A               	rrcf	___ftpack@arg,f,c
 14732  004A64                     l9407:
 14733  004A64  0E00               	movlw	0
 14734  004A66  141A               	andwf	___ftpack@arg,w,c
 14735  004A68  6E1F               	movwf	??___ftpack& (0+255),c
 14736  004A6A  0E00               	movlw	0
 14737  004A6C  141B               	andwf	___ftpack@arg+1,w,c
 14738  004A6E  6E20               	movwf	(??___ftpack+1)& (0+255),c
 14739  004A70  0EFF               	movlw	255
 14740  004A72  141C               	andwf	___ftpack@arg+2,w,c
 14741  004A74  6E21               	movwf	(??___ftpack+2)& (0+255),c
 14742  004A76  501F               	movf	??___ftpack,w,c
 14743  004A78  1020               	iorwf	??___ftpack+1,w,c
 14744  004A7A  1021               	iorwf	??___ftpack+2,w,c
 14745  004A7C  B4D8               	btfsc	status,2,c
 14746  004A7E  D006               	goto	l9411
 14747  004A80  D7E6               	goto	l9403
 14748  004A82                     l9409:
 14749  004A82  061D               	decf	___ftpack@exp,f,c
 14750  004A84  90D8               	bcf	status,0,c
 14751  004A86  361A               	rlcf	___ftpack@arg,f,c
 14752  004A88  361B               	rlcf	___ftpack@arg+1,f,c
 14753  004A8A  361C               	rlcf	___ftpack@arg+2,f,c
 14754  004A8C                     l9411:
 14755  004A8C  BE1B               	btfsc	___ftpack@arg+1,7,c
 14756  004A8E  D003               	goto	u10290
 14757  004A90  0E02               	movlw	2
 14758  004A92  601D               	cpfslt	___ftpack@exp,c
 14759  004A94  D7F6               	goto	l9409
 14760  004A96                     u10290:
 14761  004A96  A01D               	btfss	___ftpack@exp,0,c
 14762  004A98  9E1B               	bcf	___ftpack@arg+1,7,c
 14763  004A9A  90D8               	bcf	status,0,c
 14764  004A9C  321D               	rrcf	___ftpack@exp,f,c
 14765  004A9E  501D               	movf	___ftpack@exp,w,c
 14766  004AA0  121C               	iorwf	___ftpack@arg+2,f,c
 14767  004AA2  501E               	movf	___ftpack@sign,w,c
 14768  004AA4  A4D8               	btfss	status,2,c
 14769  004AA6  8E1C               	bsf	___ftpack@arg+2,7,c
 14770  004AA8  C01A  F01A         	movff	___ftpack@arg,?___ftpack
 14771  004AAC  C01B  F01B         	movff	___ftpack@arg+1,?___ftpack+1
 14772  004AB0  C01C  F01C         	movff	___ftpack@arg+2,?___ftpack+2
 14773  004AB4  0012               	return		;funcret
 14774  004AB6                     __end_of___ftpack:
 14775                           	opt callstack 0
 14776                           
 14777 ;; *************** function ___ftneg *****************
 14778 ;; Defined at:
 14779 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftneg.c"
 14780 ;; Parameters:    Size  Location     Type
 14781 ;;  f1              3   25[COMRAM] float 
 14782 ;; Auto vars:     Size  Location     Type
 14783 ;;		None
 14784 ;; Return value:  Size  Location     Type
 14785 ;;                  3   25[COMRAM] float 
 14786 ;; Registers used:
 14787 ;;		wreg, status,2, status,0
 14788 ;; Tracked objects:
 14789 ;;		On entry : 0/0
 14790 ;;		On exit  : 0/0
 14791 ;;		Unchanged: 0/0
 14792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14793 ;;      Params:         3       0       0       0       0       0       0
 14794 ;;      Locals:         0       0       0       0       0       0       0
 14795 ;;      Temps:          0       0       0       0       0       0       0
 14796 ;;      Totals:         3       0       0       0       0       0       0
 14797 ;;Total ram usage:        3 bytes
 14798 ;; Hardware stack levels used:    1
 14799 ;; Hardware stack levels required when called:    5
 14800 ;; This function calls:
 14801 ;;		Nothing
 14802 ;; This function is called by:
 14803 ;;		__doprnt
 14804 ;;		_pow
 14805 ;;		_exp
 14806 ;; This function uses a non-reentrant model
 14807 ;;
 14808                           
 14809                           	psect	text61
 14810  00596C                     __ptext61:
 14811                           	opt callstack 0
 14812  00596C                     ___ftneg:
 14813                           	opt callstack 22
 14814                           
 14815                           ;incstack = 0
 14816  00596C  501A               	movf	___ftneg@f1,w,c
 14817  00596E  101B               	iorwf	___ftneg@f1+1,w,c
 14818  005970  101C               	iorwf	___ftneg@f1+2,w,c
 14819  005972  B4D8               	btfsc	status,2,c
 14820  005974  D006               	goto	l2160
 14821  005976  0E00               	movlw	0
 14822  005978  1A1A               	xorwf	___ftneg@f1,f,c
 14823  00597A  0E00               	movlw	0
 14824  00597C  1A1B               	xorwf	___ftneg@f1+1,f,c
 14825  00597E  0E80               	movlw	128
 14826  005980  1A1C               	xorwf	___ftneg@f1+2,f,c
 14827  005982                     l2160:
 14828  005982  C01A  F01A         	movff	___ftneg@f1,?___ftneg
 14829  005986  C01B  F01B         	movff	___ftneg@f1+1,?___ftneg+1
 14830  00598A  C01C  F01C         	movff	___ftneg@f1+2,?___ftneg+2
 14831  00598E  0012               	return		;funcret
 14832  005990                     __end_of___ftneg:
 14833                           	opt callstack 0
 14834                           
 14835 ;; *************** function ___ftge *****************
 14836 ;; Defined at:
 14837 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftge.c"
 14838 ;; Parameters:    Size  Location     Type
 14839 ;;  ff1             3   25[COMRAM] float 
 14840 ;;  ff2             3   28[COMRAM] float 
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;		None
 14843 ;; Return value:  Size  Location     Type
 14844 ;;		None               void
 14845 ;; Registers used:
 14846 ;;		wreg, status,2, status,0
 14847 ;; Tracked objects:
 14848 ;;		On entry : 0/0
 14849 ;;		On exit  : 0/0
 14850 ;;		Unchanged: 0/0
 14851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14852 ;;      Params:         6       0       0       0       0       0       0
 14853 ;;      Locals:         0       0       0       0       0       0       0
 14854 ;;      Temps:          3       0       0       0       0       0       0
 14855 ;;      Totals:         9       0       0       0       0       0       0
 14856 ;;Total ram usage:        9 bytes
 14857 ;; Hardware stack levels used:    1
 14858 ;; Hardware stack levels required when called:    5
 14859 ;; This function calls:
 14860 ;;		Nothing
 14861 ;; This function is called by:
 14862 ;;		_printAuto
 14863 ;;		__doprnt
 14864 ;;		_pow
 14865 ;;		_exp
 14866 ;;		_floor
 14867 ;; This function uses a non-reentrant model
 14868 ;;
 14869                           
 14870                           	psect	text62
 14871  004EBE                     __ptext62:
 14872                           	opt callstack 0
 14873  004EBE                     ___ftge:
 14874                           	opt callstack 22
 14875                           
 14876                           ;incstack = 0
 14877  004EBE  AE1C               	btfss	___ftge@ff1+2,7,c
 14878  004EC0  D00F               	goto	l9953
 14879  004EC2  0E00               	movlw	0
 14880  004EC4  6E20               	movwf	??___ftge& (0+255),c
 14881  004EC6  0E00               	movlw	0
 14882  004EC8  6E21               	movwf	(??___ftge+1)& (0+255),c
 14883  004ECA  0E80               	movlw	128
 14884  004ECC  6E22               	movwf	(??___ftge+2)& (0+255),c
 14885  004ECE  501A               	movf	___ftge@ff1,w,c
 14886  004ED0  5C20               	subwf	??___ftge,w,c
 14887  004ED2  6E1A               	movwf	___ftge@ff1,c
 14888  004ED4  501B               	movf	___ftge@ff1+1,w,c
 14889  004ED6  5821               	subwfb	??___ftge+1,w,c
 14890  004ED8  6E1B               	movwf	___ftge@ff1+1,c
 14891  004EDA  501C               	movf	___ftge@ff1+2,w,c
 14892  004EDC  5822               	subwfb	??___ftge+2,w,c
 14893  004EDE  6E1C               	movwf	___ftge@ff1+2,c
 14894  004EE0                     l9953:
 14895  004EE0  AE1F               	btfss	___ftge@ff2+2,7,c
 14896  004EE2  D00F               	goto	l9957
 14897  004EE4  0E00               	movlw	0
 14898  004EE6  6E20               	movwf	??___ftge& (0+255),c
 14899  004EE8  0E00               	movlw	0
 14900  004EEA  6E21               	movwf	(??___ftge+1)& (0+255),c
 14901  004EEC  0E80               	movlw	128
 14902  004EEE  6E22               	movwf	(??___ftge+2)& (0+255),c
 14903  004EF0  501D               	movf	___ftge@ff2,w,c
 14904  004EF2  5C20               	subwf	??___ftge,w,c
 14905  004EF4  6E1D               	movwf	___ftge@ff2,c
 14906  004EF6  501E               	movf	___ftge@ff2+1,w,c
 14907  004EF8  5821               	subwfb	??___ftge+1,w,c
 14908  004EFA  6E1E               	movwf	___ftge@ff2+1,c
 14909  004EFC  501F               	movf	___ftge@ff2+2,w,c
 14910  004EFE  5822               	subwfb	??___ftge+2,w,c
 14911  004F00  6E1F               	movwf	___ftge@ff2+2,c
 14912  004F02                     l9957:
 14913  004F02  0E00               	movlw	0
 14914  004F04  1A1A               	xorwf	___ftge@ff1,f,c
 14915  004F06  0E00               	movlw	0
 14916  004F08  1A1B               	xorwf	___ftge@ff1+1,f,c
 14917  004F0A  0E80               	movlw	128
 14918  004F0C  1A1C               	xorwf	___ftge@ff1+2,f,c
 14919  004F0E  0E00               	movlw	0
 14920  004F10  1A1D               	xorwf	___ftge@ff2,f,c
 14921  004F12  0E00               	movlw	0
 14922  004F14  1A1E               	xorwf	___ftge@ff2+1,f,c
 14923  004F16  0E80               	movlw	128
 14924  004F18  1A1F               	xorwf	___ftge@ff2+2,f,c
 14925  004F1A  501D               	movf	___ftge@ff2,w,c
 14926  004F1C  5C1A               	subwf	___ftge@ff1,w,c
 14927  004F1E  501E               	movf	___ftge@ff2+1,w,c
 14928  004F20  581B               	subwfb	___ftge@ff1+1,w,c
 14929  004F22  501F               	movf	___ftge@ff2+2,w,c
 14930  004F24  581C               	subwfb	___ftge@ff1+2,w,c
 14931  004F26  B0D8               	btfsc	status,0,c
 14932  004F28  D002               	goto	l9963
 14933  004F2A  90D8               	bcf	status,0,c
 14934  004F2C  0012               	return	
 14935  004F2E                     l9963:
 14936  004F2E  80D8               	bsf	status,0,c
 14937  004F30  0012               	return		;funcret
 14938  004F32                     __end_of___ftge:
 14939                           	opt callstack 0
 14940                           
 14941 ;; *************** function _TMR3_StartTimer *****************
 14942 ;; Defined at:
 14943 ;;		line 96 in file "mcc_generated_files/tmr3.c"
 14944 ;; Parameters:    Size  Location     Type
 14945 ;;		None
 14946 ;; Auto vars:     Size  Location     Type
 14947 ;;		None
 14948 ;; Return value:  Size  Location     Type
 14949 ;;                  1    wreg      void 
 14950 ;; Registers used:
 14951 ;;		None
 14952 ;; Tracked objects:
 14953 ;;		On entry : 0/0
 14954 ;;		On exit  : 0/0
 14955 ;;		Unchanged: 0/0
 14956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14957 ;;      Params:         0       0       0       0       0       0       0
 14958 ;;      Locals:         0       0       0       0       0       0       0
 14959 ;;      Temps:          0       0       0       0       0       0       0
 14960 ;;      Totals:         0       0       0       0       0       0       0
 14961 ;;Total ram usage:        0 bytes
 14962 ;; Hardware stack levels used:    1
 14963 ;; Hardware stack levels required when called:    5
 14964 ;; This function calls:
 14965 ;;		Nothing
 14966 ;; This function is called by:
 14967 ;;		_initialiseTCP
 14968 ;; This function uses a non-reentrant model
 14969 ;;
 14970                           
 14971                           	psect	text63
 14972  005B22                     __ptext63:
 14973                           	opt callstack 0
 14974  005B22                     _TMR3_StartTimer:
 14975                           	opt callstack 24
 14976                           
 14977                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
 14978                           
 14979                           ;incstack = 0
 14980  005B22  80B1               	bsf	4017,0,c	;volatile
 14981  005B24  0012               	return		;funcret
 14982  005B26                     __end_of_TMR3_StartTimer:
 14983                           	opt callstack 0
 14984                           
 14985 ;; *************** function _EUSART1_GetUnitTestCounter *****************
 14986 ;; Defined at:
 14987 ;;		line 603 in file "mcc_generated_files/eusart1.c"
 14988 ;; Parameters:    Size  Location     Type
 14989 ;;		None
 14990 ;; Auto vars:     Size  Location     Type
 14991 ;;		None
 14992 ;; Return value:  Size  Location     Type
 14993 ;;                  2   25[COMRAM] int 
 14994 ;; Registers used:
 14995 ;;		None
 14996 ;; Tracked objects:
 14997 ;;		On entry : 0/0
 14998 ;;		On exit  : 0/0
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15001 ;;      Params:         2       0       0       0       0       0       0
 15002 ;;      Locals:         0       0       0       0       0       0       0
 15003 ;;      Temps:          0       0       0       0       0       0       0
 15004 ;;      Totals:         2       0       0       0       0       0       0
 15005 ;;Total ram usage:        2 bytes
 15006 ;; Hardware stack levels used:    1
 15007 ;; Hardware stack levels required when called:    5
 15008 ;; This function calls:
 15009 ;;		Nothing
 15010 ;; This function is called by:
 15011 ;;		_initialiseTCP
 15012 ;; This function uses a non-reentrant model
 15013 ;;
 15014                           
 15015                           	psect	text64
 15016  005AA8                     __ptext64:
 15017                           	opt callstack 0
 15018  005AA8                     _EUSART1_GetUnitTestCounter:
 15019                           	opt callstack 24
 15020                           
 15021                           ;eusart1.c: 605: return unitTestCounter;
 15022                           
 15023                           ;incstack = 0
 15024  005AA8  C036  F01A         	movff	_unitTestCounter,?_EUSART1_GetUnitTestCounter
 15025  005AAC  C037  F01B         	movff	_unitTestCounter+1,?_EUSART1_GetUnitTestCounter+1
 15026  005AB0  0012               	return		;funcret
 15027  005AB2                     __end_of_EUSART1_GetUnitTestCounter:
 15028                           	opt callstack 0
 15029                           
 15030 ;; *************** function _TMR3_StopTimer *****************
 15031 ;; Defined at:
 15032 ;;		line 102 in file "mcc_generated_files/tmr3.c"
 15033 ;; Parameters:    Size  Location     Type
 15034 ;;		None
 15035 ;; Auto vars:     Size  Location     Type
 15036 ;;		None
 15037 ;; Return value:  Size  Location     Type
 15038 ;;                  1    wreg      void 
 15039 ;; Registers used:
 15040 ;;		None
 15041 ;; Tracked objects:
 15042 ;;		On entry : 0/0
 15043 ;;		On exit  : 0/0
 15044 ;;		Unchanged: 0/0
 15045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15046 ;;      Params:         0       0       0       0       0       0       0
 15047 ;;      Locals:         0       0       0       0       0       0       0
 15048 ;;      Temps:          0       0       0       0       0       0       0
 15049 ;;      Totals:         0       0       0       0       0       0       0
 15050 ;;Total ram usage:        0 bytes
 15051 ;; Hardware stack levels used:    1
 15052 ;; Hardware stack levels required when called:    5
 15053 ;; This function calls:
 15054 ;;		Nothing
 15055 ;; This function is called by:
 15056 ;;		_main
 15057 ;; This function uses a non-reentrant model
 15058 ;;
 15059                           
 15060                           	psect	text65
 15061  005B26                     __ptext65:
 15062                           	opt callstack 0
 15063  005B26                     _TMR3_StopTimer:
 15064                           	opt callstack 25
 15065                           
 15066                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
 15067                           
 15068                           ;incstack = 0
 15069  005B26  90B1               	bcf	4017,0,c	;volatile
 15070  005B28  0012               	return		;funcret
 15071  005B2A                     __end_of_TMR3_StopTimer:
 15072                           	opt callstack 0
 15073                           
 15074 ;; *************** function _SYSTEM_Initialize *****************
 15075 ;; Defined at:
 15076 ;;		line 50 in file "mcc_generated_files/mcc.c"
 15077 ;; Parameters:    Size  Location     Type
 15078 ;;		None
 15079 ;; Auto vars:     Size  Location     Type
 15080 ;;		None
 15081 ;; Return value:  Size  Location     Type
 15082 ;;                  1    wreg      void 
 15083 ;; Registers used:
 15084 ;;		wreg, status,2, status,0, cstack
 15085 ;; Tracked objects:
 15086 ;;		On entry : 0/0
 15087 ;;		On exit  : 0/0
 15088 ;;		Unchanged: 0/0
 15089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15090 ;;      Params:         0       0       0       0       0       0       0
 15091 ;;      Locals:         0       0       0       0       0       0       0
 15092 ;;      Temps:          0       0       0       0       0       0       0
 15093 ;;      Totals:         0       0       0       0       0       0       0
 15094 ;;Total ram usage:        0 bytes
 15095 ;; Hardware stack levels used:    1
 15096 ;; Hardware stack levels required when called:    7
 15097 ;; This function calls:
 15098 ;;		_ADC_Initialize
 15099 ;;		_EUSART1_Initialize
 15100 ;;		_I2C1_Initialize
 15101 ;;		_I2C2_Initialize
 15102 ;;		_INTERRUPT_Initialize
 15103 ;;		_OSCILLATOR_Initialize
 15104 ;;		_PIN_MANAGER_Initialize
 15105 ;;		_PWM5_Initialize
 15106 ;;		_TMR2_Initialize
 15107 ;;		_TMR3_Initialize
 15108 ;; This function is called by:
 15109 ;;		_main
 15110 ;; This function uses a non-reentrant model
 15111 ;;
 15112                           
 15113                           	psect	text66
 15114  00585C                     __ptext66:
 15115                           	opt callstack 0
 15116  00585C                     _SYSTEM_Initialize:
 15117                           	opt callstack 23
 15118                           
 15119                           ;mcc.c: 53: INTERRUPT_Initialize();
 15120                           
 15121                           ;incstack = 0
 15122  00585C  EC95  F02D         	call	_INTERRUPT_Initialize	;wreg free
 15123                           
 15124                           ;mcc.c: 54: PIN_MANAGER_Initialize();
 15125  005860  EC23  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 15126                           
 15127                           ;mcc.c: 55: OSCILLATOR_Initialize();
 15128  005864  EC3B  F02D         	call	_OSCILLATOR_Initialize	;wreg free
 15129                           
 15130                           ;mcc.c: 56: I2C1_Initialize();
 15131  005868  ECB4  F02B         	call	_I2C1_Initialize	;wreg free
 15132                           
 15133                           ;mcc.c: 57: I2C2_Initialize();
 15134  00586C  EC9A  F02B         	call	_I2C2_Initialize	;wreg free
 15135                           
 15136                           ;mcc.c: 58: ADC_Initialize();
 15137  005870  EC01  F02D         	call	_ADC_Initialize	;wreg free
 15138                           
 15139                           ;mcc.c: 59: TMR3_Initialize();
 15140  005874  EC43  F02C         	call	_TMR3_Initialize	;wreg free
 15141                           
 15142                           ;mcc.c: 60: TMR2_Initialize();
 15143  005878  EC34  F02D         	call	_TMR2_Initialize	;wreg free
 15144                           
 15145                           ;mcc.c: 61: PWM5_Initialize();
 15146  00587C  EC0C  F02D         	call	_PWM5_Initialize	;wreg free
 15147                           
 15148                           ;mcc.c: 62: EUSART1_Initialize();
 15149  005880  ECAF  F026         	call	_EUSART1_Initialize	;wreg free
 15150  005884  0012               	return		;funcret
 15151  005886                     __end_of_SYSTEM_Initialize:
 15152                           	opt callstack 0
 15153                           
 15154 ;; *************** function _TMR3_Initialize *****************
 15155 ;; Defined at:
 15156 ;;		line 67 in file "mcc_generated_files/tmr3.c"
 15157 ;; Parameters:    Size  Location     Type
 15158 ;;		None
 15159 ;; Auto vars:     Size  Location     Type
 15160 ;;		None
 15161 ;; Return value:  Size  Location     Type
 15162 ;;                  1    wreg      void 
 15163 ;; Registers used:
 15164 ;;		wreg, status,2, status,0, cstack
 15165 ;; Tracked objects:
 15166 ;;		On entry : 0/0
 15167 ;;		On exit  : 0/0
 15168 ;;		Unchanged: 0/0
 15169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15170 ;;      Params:         0       0       0       0       0       0       0
 15171 ;;      Locals:         0       0       0       0       0       0       0
 15172 ;;      Temps:          0       0       0       0       0       0       0
 15173 ;;      Totals:         0       0       0       0       0       0       0
 15174 ;;Total ram usage:        0 bytes
 15175 ;; Hardware stack levels used:    1
 15176 ;; Hardware stack levels required when called:    6
 15177 ;; This function calls:
 15178 ;;		_TMR3_SetInterruptHandler
 15179 ;; This function is called by:
 15180 ;;		_SYSTEM_Initialize
 15181 ;; This function uses a non-reentrant model
 15182 ;;
 15183                           
 15184                           	psect	text67
 15185  005886                     __ptext67:
 15186                           	opt callstack 0
 15187  005886                     _TMR3_Initialize:
 15188                           	opt callstack 23
 15189                           
 15190                           ;tmr3.c: 72: T3GCON = 0x00;
 15191                           
 15192                           ;incstack = 0
 15193  005886  0E00               	movlw	0
 15194  005888  6EB4               	movwf	4020,c	;volatile
 15195                           
 15196                           ;tmr3.c: 75: TMR3H = 0x00;
 15197  00588A  0E00               	movlw	0
 15198  00588C  6EB3               	movwf	4019,c	;volatile
 15199                           
 15200                           ;tmr3.c: 78: TMR3L = 0x00;
 15201  00588E  0E00               	movlw	0
 15202  005890  6EB2               	movwf	4018,c	;volatile
 15203                           
 15204                           ;tmr3.c: 81: timer3ReloadVal=TMR3;
 15205  005892  CFB2 F181          	movff	4018,_timer3ReloadVal	;volatile
 15206  005896  CFB3 F182          	movff	4019,_timer3ReloadVal+1	;volatile
 15207                           
 15208                           ;tmr3.c: 84: PIR2bits.TMR3IF = 0;
 15209  00589A  92A1               	bcf	4001,1,c	;volatile
 15210                           
 15211                           ;tmr3.c: 87: PIE2bits.TMR3IE = 1;
 15212  00589C  82A0               	bsf	4000,1,c	;volatile
 15213                           
 15214                           ;tmr3.c: 90: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
 15215  00589E  0E3C               	movlw	low _TMR3_DefaultInterruptHandler
 15216  0058A0  6E1A               	movwf	TMR3_SetInterruptHandler@InterruptHandler,c
 15217  0058A2  0E5B               	movlw	high _TMR3_DefaultInterruptHandler
 15218  0058A4  6E1B               	movwf	TMR3_SetInterruptHandler@InterruptHandler+1,c
 15219  0058A6  EC59  F02D         	call	_TMR3_SetInterruptHandler	;wreg free
 15220                           
 15221                           ;tmr3.c: 93: T3CON = 0x31;
 15222  0058AA  0E31               	movlw	49
 15223  0058AC  6EB1               	movwf	4017,c	;volatile
 15224  0058AE  0012               	return		;funcret
 15225  0058B0                     __end_of_TMR3_Initialize:
 15226                           	opt callstack 0
 15227                           
 15228 ;; *************** function _TMR3_SetInterruptHandler *****************
 15229 ;; Defined at:
 15230 ;;		line 182 in file "mcc_generated_files/tmr3.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;  InterruptHan    2   25[COMRAM] PTR FTN()void 
 15233 ;;		 -> TMR3_DefaultInterruptHandler(1), 
 15234 ;; Auto vars:     Size  Location     Type
 15235 ;;		None
 15236 ;; Return value:  Size  Location     Type
 15237 ;;                  1    wreg      void 
 15238 ;; Registers used:
 15239 ;;		wreg, status,2, status,0
 15240 ;; Tracked objects:
 15241 ;;		On entry : 0/0
 15242 ;;		On exit  : 0/0
 15243 ;;		Unchanged: 0/0
 15244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15245 ;;      Params:         2       0       0       0       0       0       0
 15246 ;;      Locals:         0       0       0       0       0       0       0
 15247 ;;      Temps:          0       0       0       0       0       0       0
 15248 ;;      Totals:         2       0       0       0       0       0       0
 15249 ;;Total ram usage:        2 bytes
 15250 ;; Hardware stack levels used:    1
 15251 ;; Hardware stack levels required when called:    5
 15252 ;; This function calls:
 15253 ;;		Nothing
 15254 ;; This function is called by:
 15255 ;;		_TMR3_Initialize
 15256 ;; This function uses a non-reentrant model
 15257 ;;
 15258                           
 15259                           	psect	text68
 15260  005AB2                     __ptext68:
 15261                           	opt callstack 0
 15262  005AB2                     _TMR3_SetInterruptHandler:
 15263                           	opt callstack 23
 15264                           
 15265                           ;tmr3.c: 183: TMR3_InterruptHandler = InterruptHandler;
 15266                           
 15267                           ;incstack = 0
 15268  005AB2  C01A  F17F         	movff	TMR3_SetInterruptHandler@InterruptHandler,_TMR3_InterruptHandler
 15269  005AB6  C01B  F180         	movff	TMR3_SetInterruptHandler@InterruptHandler+1,_TMR3_InterruptHandler+1
 15270  005ABA  0012               	return		;funcret
 15271  005ABC                     __end_of_TMR3_SetInterruptHandler:
 15272                           	opt callstack 0
 15273                           
 15274 ;; *************** function _TMR2_Initialize *****************
 15275 ;; Defined at:
 15276 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 15277 ;; Parameters:    Size  Location     Type
 15278 ;;		None
 15279 ;; Auto vars:     Size  Location     Type
 15280 ;;		None
 15281 ;; Return value:  Size  Location     Type
 15282 ;;                  1    wreg      void 
 15283 ;; Registers used:
 15284 ;;		wreg, status,2
 15285 ;; Tracked objects:
 15286 ;;		On entry : 0/0
 15287 ;;		On exit  : 0/0
 15288 ;;		Unchanged: 0/0
 15289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15290 ;;      Params:         0       0       0       0       0       0       0
 15291 ;;      Locals:         0       0       0       0       0       0       0
 15292 ;;      Temps:          0       0       0       0       0       0       0
 15293 ;;      Totals:         0       0       0       0       0       0       0
 15294 ;;Total ram usage:        0 bytes
 15295 ;; Hardware stack levels used:    1
 15296 ;; Hardware stack levels required when called:    5
 15297 ;; This function calls:
 15298 ;;		Nothing
 15299 ;; This function is called by:
 15300 ;;		_SYSTEM_Initialize
 15301 ;; This function uses a non-reentrant model
 15302 ;;
 15303                           
 15304                           	psect	text69
 15305  005A68                     __ptext69:
 15306                           	opt callstack 0
 15307  005A68                     _TMR2_Initialize:
 15308                           	opt callstack 24
 15309                           
 15310                           ;tmr2.c: 67: PR2 = 0xFF;
 15311                           
 15312                           ;incstack = 0
 15313  005A68  68BB               	setf	4027,c	;volatile
 15314                           
 15315                           ;tmr2.c: 70: TMR2 = 0x00;
 15316  005A6A  0E00               	movlw	0
 15317  005A6C  6EBC               	movwf	4028,c	;volatile
 15318                           
 15319                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
 15320  005A6E  929E               	bcf	3998,1,c	;volatile
 15321                           
 15322                           ;tmr2.c: 76: T2CON = 0x04;
 15323  005A70  0E04               	movlw	4
 15324  005A72  6EBA               	movwf	4026,c	;volatile
 15325  005A74  0012               	return		;funcret
 15326  005A76                     __end_of_TMR2_Initialize:
 15327                           	opt callstack 0
 15328                           
 15329 ;; *************** function _PWM5_Initialize *****************
 15330 ;; Defined at:
 15331 ;;		line 64 in file "mcc_generated_files/pwm5.c"
 15332 ;; Parameters:    Size  Location     Type
 15333 ;;		None
 15334 ;; Auto vars:     Size  Location     Type
 15335 ;;		None
 15336 ;; Return value:  Size  Location     Type
 15337 ;;                  1    wreg      void 
 15338 ;; Registers used:
 15339 ;;		wreg, status,2
 15340 ;; Tracked objects:
 15341 ;;		On entry : 0/0
 15342 ;;		On exit  : 0/0
 15343 ;;		Unchanged: 0/0
 15344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15345 ;;      Params:         0       0       0       0       0       0       0
 15346 ;;      Locals:         0       0       0       0       0       0       0
 15347 ;;      Temps:          0       0       0       0       0       0       0
 15348 ;;      Totals:         0       0       0       0       0       0       0
 15349 ;;Total ram usage:        0 bytes
 15350 ;; Hardware stack levels used:    1
 15351 ;; Hardware stack levels required when called:    5
 15352 ;; This function calls:
 15353 ;;		Nothing
 15354 ;; This function is called by:
 15355 ;;		_SYSTEM_Initialize
 15356 ;; This function uses a non-reentrant model
 15357 ;;
 15358                           
 15359                           	psect	text70
 15360  005A18                     __ptext70:
 15361                           	opt callstack 0
 15362  005A18                     _PWM5_Initialize:
 15363                           	opt callstack 24
 15364                           
 15365                           ;pwm5.c: 69: CCP5CON = 0x3C;
 15366                           
 15367                           ;incstack = 0
 15368  005A18  0E3C               	movlw	60
 15369  005A1A  010F               	movlb	15	; () banked
 15370  005A1C  6F54               	movwf	84,b	;volatile
 15371                           
 15372                           ;pwm5.c: 72: CCPR5L = 0x7F;
 15373  005A1E  0E7F               	movlw	127
 15374  005A20  6F55               	movwf	85,b	;volatile
 15375                           
 15376                           ;pwm5.c: 75: CCPR5H = 0x00;
 15377  005A22  0E00               	movlw	0
 15378  005A24  6F56               	movwf	86,b	;volatile
 15379                           
 15380                           ;pwm5.c: 78: CCPTMRS1bits.C5TSEL = 0x0;
 15381  005A26  0EF3               	movlw	-13
 15382  005A28  1748               	andwf	72,f,b	;volatile
 15383                           
 15384                           ; BSR set to: 15
 15385  005A2A  0012               	return		;funcret
 15386  005A2C                     __end_of_PWM5_Initialize:
 15387                           	opt callstack 0
 15388                           
 15389 ;; *************** function _PIN_MANAGER_Initialize *****************
 15390 ;; Defined at:
 15391 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 15392 ;; Parameters:    Size  Location     Type
 15393 ;;		None
 15394 ;; Auto vars:     Size  Location     Type
 15395 ;;		None
 15396 ;; Return value:  Size  Location     Type
 15397 ;;                  1    wreg      void 
 15398 ;; Registers used:
 15399 ;;		wreg, status,2
 15400 ;; Tracked objects:
 15401 ;;		On entry : 0/0
 15402 ;;		On exit  : 0/0
 15403 ;;		Unchanged: 0/0
 15404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15405 ;;      Params:         0       0       0       0       0       0       0
 15406 ;;      Locals:         0       0       0       0       0       0       0
 15407 ;;      Temps:          0       0       0       0       0       0       0
 15408 ;;      Totals:         0       0       0       0       0       0       0
 15409 ;;Total ram usage:        0 bytes
 15410 ;; Hardware stack levels used:    1
 15411 ;; Hardware stack levels required when called:    5
 15412 ;; This function calls:
 15413 ;;		Nothing
 15414 ;; This function is called by:
 15415 ;;		_SYSTEM_Initialize
 15416 ;; This function uses a non-reentrant model
 15417 ;;
 15418                           
 15419                           	psect	text71
 15420  005446                     __ptext71:
 15421                           	opt callstack 0
 15422  005446                     _PIN_MANAGER_Initialize:
 15423                           	opt callstack 24
 15424                           
 15425                           ;pin_manager.c: 60: LATE = 0x00;
 15426                           
 15427                           ; BSR set to: 15
 15428                           ;incstack = 0
 15429  005446  0E00               	movlw	0
 15430  005448  6E8D               	movwf	3981,c	;volatile
 15431                           
 15432                           ;pin_manager.c: 61: LATD = 0x00;
 15433  00544A  0E00               	movlw	0
 15434  00544C  6E8C               	movwf	3980,c	;volatile
 15435                           
 15436                           ;pin_manager.c: 62: LATA = 0x00;
 15437  00544E  0E00               	movlw	0
 15438  005450  6E89               	movwf	3977,c	;volatile
 15439                           
 15440                           ;pin_manager.c: 63: LATB = 0x00;
 15441  005452  0E00               	movlw	0
 15442  005454  6E8A               	movwf	3978,c	;volatile
 15443                           
 15444                           ;pin_manager.c: 64: LATC = 0x00;
 15445  005456  0E00               	movlw	0
 15446  005458  6E8B               	movwf	3979,c	;volatile
 15447                           
 15448                           ;pin_manager.c: 69: TRISE = 0x03;
 15449  00545A  0E03               	movlw	3
 15450  00545C  6E96               	movwf	3990,c	;volatile
 15451                           
 15452                           ;pin_manager.c: 70: TRISA = 0xFE;
 15453  00545E  0EFE               	movlw	254
 15454  005460  6E92               	movwf	3986,c	;volatile
 15455                           
 15456                           ;pin_manager.c: 71: TRISB = 0xAC;
 15457  005462  0EAC               	movlw	172
 15458  005464  6E93               	movwf	3987,c	;volatile
 15459                           
 15460                           ;pin_manager.c: 72: TRISC = 0xBF;
 15461  005466  0EBF               	movlw	191
 15462  005468  6E94               	movwf	3988,c	;volatile
 15463                           
 15464                           ;pin_manager.c: 73: TRISD = 0x0F;
 15465  00546A  0E0F               	movlw	15
 15466  00546C  6E95               	movwf	3989,c	;volatile
 15467                           
 15468                           ;pin_manager.c: 78: ANSELD = 0xFC;
 15469  00546E  0EFC               	movlw	252
 15470  005470  010F               	movlb	15	; () banked
 15471  005472  6F3B               	movwf	59,b	;volatile
 15472                           
 15473                           ;pin_manager.c: 79: ANSELC = 0x24;
 15474  005474  0E24               	movlw	36
 15475  005476  6F3A               	movwf	58,b	;volatile
 15476                           
 15477                           ;pin_manager.c: 80: ANSELB = 0x18;
 15478  005478  0E18               	movlw	24
 15479  00547A  6F39               	movwf	57,b	;volatile
 15480                           
 15481                           ;pin_manager.c: 81: ANSELE = 0x07;
 15482  00547C  0E07               	movlw	7
 15483  00547E  6F3C               	movwf	60,b	;volatile
 15484                           
 15485                           ;pin_manager.c: 82: ANSELA = 0x2F;
 15486  005480  0E2F               	movlw	47
 15487  005482  6F38               	movwf	56,b	;volatile
 15488                           
 15489                           ;pin_manager.c: 87: WPUB = 0x00;
 15490  005484  0E00               	movlw	0
 15491  005486  6E61               	movwf	3937,c	;volatile
 15492                           
 15493                           ; BSR set to: 15
 15494                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 1;
 15495  005488  8EF1               	bsf	4081,7,c	;volatile
 15496                           
 15497                           ; BSR set to: 15
 15498  00548A  0012               	return		;funcret
 15499  00548C                     __end_of_PIN_MANAGER_Initialize:
 15500                           	opt callstack 0
 15501                           
 15502 ;; *************** function _OSCILLATOR_Initialize *****************
 15503 ;; Defined at:
 15504 ;;		line 65 in file "mcc_generated_files/mcc.c"
 15505 ;; Parameters:    Size  Location     Type
 15506 ;;		None
 15507 ;; Auto vars:     Size  Location     Type
 15508 ;;		None
 15509 ;; Return value:  Size  Location     Type
 15510 ;;                  1    wreg      void 
 15511 ;; Registers used:
 15512 ;;		wreg, status,2
 15513 ;; Tracked objects:
 15514 ;;		On entry : 0/0
 15515 ;;		On exit  : 0/0
 15516 ;;		Unchanged: 0/0
 15517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15518 ;;      Params:         0       0       0       0       0       0       0
 15519 ;;      Locals:         0       0       0       0       0       0       0
 15520 ;;      Temps:          0       0       0       0       0       0       0
 15521 ;;      Totals:         0       0       0       0       0       0       0
 15522 ;;Total ram usage:        0 bytes
 15523 ;; Hardware stack levels used:    1
 15524 ;; Hardware stack levels required when called:    5
 15525 ;; This function calls:
 15526 ;;		Nothing
 15527 ;; This function is called by:
 15528 ;;		_SYSTEM_Initialize
 15529 ;; This function uses a non-reentrant model
 15530 ;;
 15531                           
 15532                           	psect	text72
 15533  005A76                     __ptext72:
 15534                           	opt callstack 0
 15535  005A76                     _OSCILLATOR_Initialize:
 15536                           	opt callstack 24
 15537                           
 15538                           ;mcc.c: 68: OSCCON = 0x60;
 15539                           
 15540                           ; BSR set to: 15
 15541                           ;incstack = 0
 15542  005A76  0E60               	movlw	96
 15543  005A78  6ED3               	movwf	4051,c	;volatile
 15544                           
 15545                           ;mcc.c: 70: OSCCON2 = 0x04;
 15546  005A7A  0E04               	movlw	4
 15547  005A7C  6ED2               	movwf	4050,c	;volatile
 15548                           
 15549                           ;mcc.c: 72: OSCTUNE = 0x00;
 15550  005A7E  0E00               	movlw	0
 15551  005A80  6E9B               	movwf	3995,c	;volatile
 15552  005A82  0012               	return		;funcret
 15553  005A84                     __end_of_OSCILLATOR_Initialize:
 15554                           	opt callstack 0
 15555                           
 15556 ;; *************** function _INTERRUPT_Initialize *****************
 15557 ;; Defined at:
 15558 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 15559 ;; Parameters:    Size  Location     Type
 15560 ;;		None
 15561 ;; Auto vars:     Size  Location     Type
 15562 ;;		None
 15563 ;; Return value:  Size  Location     Type
 15564 ;;                  1    wreg      void 
 15565 ;; Registers used:
 15566 ;;		None
 15567 ;; Tracked objects:
 15568 ;;		On entry : 0/0
 15569 ;;		On exit  : 0/0
 15570 ;;		Unchanged: 0/0
 15571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15572 ;;      Params:         0       0       0       0       0       0       0
 15573 ;;      Locals:         0       0       0       0       0       0       0
 15574 ;;      Temps:          0       0       0       0       0       0       0
 15575 ;;      Totals:         0       0       0       0       0       0       0
 15576 ;;Total ram usage:        0 bytes
 15577 ;; Hardware stack levels used:    1
 15578 ;; Hardware stack levels required when called:    5
 15579 ;; This function calls:
 15580 ;;		Nothing
 15581 ;; This function is called by:
 15582 ;;		_SYSTEM_Initialize
 15583 ;; This function uses a non-reentrant model
 15584 ;;
 15585                           
 15586                           	psect	text73
 15587  005B2A                     __ptext73:
 15588                           	opt callstack 0
 15589  005B2A                     _INTERRUPT_Initialize:
 15590                           	opt callstack 24
 15591                           
 15592                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
 15593                           
 15594                           ;incstack = 0
 15595  005B2A  9ED0               	bcf	4048,7,c	;volatile
 15596  005B2C  0012               	return		;funcret
 15597  005B2E                     __end_of_INTERRUPT_Initialize:
 15598                           	opt callstack 0
 15599                           
 15600 ;; *************** function _I2C2_Initialize *****************
 15601 ;; Defined at:
 15602 ;;		line 198 in file "mcc_generated_files/i2c2.c"
 15603 ;; Parameters:    Size  Location     Type
 15604 ;;		None
 15605 ;; Auto vars:     Size  Location     Type
 15606 ;;		None
 15607 ;; Return value:  Size  Location     Type
 15608 ;;                  1    wreg      void 
 15609 ;; Registers used:
 15610 ;;		wreg, status,2, status,0
 15611 ;; Tracked objects:
 15612 ;;		On entry : 0/0
 15613 ;;		On exit  : 0/0
 15614 ;;		Unchanged: 0/0
 15615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15616 ;;      Params:         0       0       0       0       0       0       0
 15617 ;;      Locals:         0       0       0       0       0       0       0
 15618 ;;      Temps:          0       0       0       0       0       0       0
 15619 ;;      Totals:         0       0       0       0       0       0       0
 15620 ;;Total ram usage:        0 bytes
 15621 ;; Hardware stack levels used:    1
 15622 ;; Hardware stack levels required when called:    5
 15623 ;; This function calls:
 15624 ;;		Nothing
 15625 ;; This function is called by:
 15626 ;;		_SYSTEM_Initialize
 15627 ;;		_main
 15628 ;; This function uses a non-reentrant model
 15629 ;;
 15630                           
 15631                           	psect	text74
 15632  005734                     __ptext74:
 15633                           	opt callstack 0
 15634  005734                     _I2C2_Initialize:
 15635                           	opt callstack 24
 15636                           
 15637                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
 15638                           
 15639                           ;incstack = 0
 15640  005734  0E51               	movlw	low _i2c2_tr_queue
 15641  005736  0101               	movlb	1	; () banked
 15642  005738  6F0A               	movwf	(_i2c2_object+2)& (0+255),b
 15643  00573A  0E01               	movlw	high _i2c2_tr_queue
 15644  00573C  6F0B               	movwf	(_i2c2_object+3)& (0+255),b
 15645                           
 15646                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
 15647  00573E  0E51               	movlw	low _i2c2_tr_queue
 15648  005740  6F08               	movwf	_i2c2_object& (0+255),b
 15649  005742  0E01               	movlw	high _i2c2_tr_queue
 15650  005744  6F09               	movwf	(_i2c2_object+1)& (0+255),b
 15651                           
 15652                           ; BSR set to: 1
 15653                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
 15654  005746  830C               	bsf	(_i2c2_object+4)& (0+255),1,b
 15655                           
 15656                           ; BSR set to: 1
 15657                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
 15658  005748  910C               	bcf	(_i2c2_object+4)& (0+255),0,b
 15659                           
 15660                           ; BSR set to: 1
 15661                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
 15662  00574A  0E00               	movlw	0
 15663  00574C  6F0E               	movwf	(_i2c2_object+6)& (0+255),b
 15664                           
 15665                           ; BSR set to: 1
 15666                           ;i2c2.c: 208: SSP2STAT = 0x80;
 15667  00574E  0E80               	movlw	128
 15668  005750  6E6D               	movwf	3949,c	;volatile
 15669                           
 15670                           ; BSR set to: 1
 15671                           ;i2c2.c: 210: SSP2CON1 = 0x28;
 15672  005752  0E28               	movlw	40
 15673  005754  6E6C               	movwf	3948,c	;volatile
 15674                           
 15675                           ; BSR set to: 1
 15676                           ;i2c2.c: 212: SSP2CON3 = 0x00;
 15677  005756  0E00               	movlw	0
 15678  005758  6E69               	movwf	3945,c	;volatile
 15679                           
 15680                           ; BSR set to: 1
 15681                           ;i2c2.c: 214: SSP2ADD = 0x13;
 15682  00575A  0E13               	movlw	19
 15683  00575C  6E6E               	movwf	3950,c	;volatile
 15684                           
 15685                           ; BSR set to: 1
 15686                           ;i2c2.c: 217: PIR3bits.SSP2IF = 0;
 15687  00575E  9EA4               	bcf	4004,7,c	;volatile
 15688                           
 15689                           ; BSR set to: 1
 15690                           ;i2c2.c: 218: PIR3bits.BCL2IF = 0;
 15691  005760  9CA4               	bcf	4004,6,c	;volatile
 15692                           
 15693                           ; BSR set to: 1
 15694                           ;i2c2.c: 221: PIE3bits.SSP2IE = 1;
 15695  005762  8EA3               	bsf	4003,7,c	;volatile
 15696                           
 15697                           ; BSR set to: 1
 15698                           ;i2c2.c: 222: PIE3bits.BCL2IE = 1;
 15699  005764  8CA3               	bsf	4003,6,c	;volatile
 15700                           
 15701                           ; BSR set to: 1
 15702  005766  0012               	return		;funcret
 15703  005768                     __end_of_I2C2_Initialize:
 15704                           	opt callstack 0
 15705                           
 15706 ;; *************** function _I2C1_Initialize *****************
 15707 ;; Defined at:
 15708 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 15709 ;; Parameters:    Size  Location     Type
 15710 ;;		None
 15711 ;; Auto vars:     Size  Location     Type
 15712 ;;		None
 15713 ;; Return value:  Size  Location     Type
 15714 ;;                  1    wreg      void 
 15715 ;; Registers used:
 15716 ;;		wreg, status,2, status,0
 15717 ;; Tracked objects:
 15718 ;;		On entry : 0/0
 15719 ;;		On exit  : 0/0
 15720 ;;		Unchanged: 0/0
 15721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15722 ;;      Params:         0       0       0       0       0       0       0
 15723 ;;      Locals:         0       0       0       0       0       0       0
 15724 ;;      Temps:          0       0       0       0       0       0       0
 15725 ;;      Totals:         0       0       0       0       0       0       0
 15726 ;;Total ram usage:        0 bytes
 15727 ;; Hardware stack levels used:    1
 15728 ;; Hardware stack levels required when called:    5
 15729 ;; This function calls:
 15730 ;;		Nothing
 15731 ;; This function is called by:
 15732 ;;		_SYSTEM_Initialize
 15733 ;; This function uses a non-reentrant model
 15734 ;;
 15735                           
 15736                           	psect	text75
 15737  005768                     __ptext75:
 15738                           	opt callstack 0
 15739  005768                     _I2C1_Initialize:
 15740                           	opt callstack 24
 15741                           
 15742                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 15743                           
 15744                           ; BSR set to: 1
 15745                           ;incstack = 0
 15746  005768  0E60               	movlw	low _i2c1_tr_queue
 15747  00576A  0101               	movlb	1	; () banked
 15748  00576C  6F11               	movwf	(_i2c1_object+2)& (0+255),b
 15749  00576E  0E01               	movlw	high _i2c1_tr_queue
 15750  005770  6F12               	movwf	(_i2c1_object+3)& (0+255),b
 15751                           
 15752                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 15753  005772  0E60               	movlw	low _i2c1_tr_queue
 15754  005774  6F0F               	movwf	_i2c1_object& (0+255),b
 15755  005776  0E01               	movlw	high _i2c1_tr_queue
 15756  005778  6F10               	movwf	(_i2c1_object+1)& (0+255),b
 15757                           
 15758                           ; BSR set to: 1
 15759                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 15760  00577A  8313               	bsf	(_i2c1_object+4)& (0+255),1,b
 15761                           
 15762                           ; BSR set to: 1
 15763                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 15764  00577C  9113               	bcf	(_i2c1_object+4)& (0+255),0,b
 15765                           
 15766                           ; BSR set to: 1
 15767                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 15768  00577E  0E00               	movlw	0
 15769  005780  6F15               	movwf	(_i2c1_object+6)& (0+255),b
 15770                           
 15771                           ; BSR set to: 1
 15772                           ;i2c1.c: 208: SSP1STAT = 0x00;
 15773  005782  0E00               	movlw	0
 15774  005784  6EC7               	movwf	4039,c	;volatile
 15775                           
 15776                           ; BSR set to: 1
 15777                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 15778  005786  0E28               	movlw	40
 15779  005788  6EC6               	movwf	4038,c	;volatile
 15780                           
 15781                           ; BSR set to: 1
 15782                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 15783  00578A  0E00               	movlw	0
 15784  00578C  6ECB               	movwf	4043,c	;volatile
 15785                           
 15786                           ; BSR set to: 1
 15787                           ;i2c1.c: 214: SSP1ADD = 0x13;
 15788  00578E  0E13               	movlw	19
 15789  005790  6EC8               	movwf	4040,c	;volatile
 15790                           
 15791                           ; BSR set to: 1
 15792                           ;i2c1.c: 217: PIR1bits.SSP1IF = 0;
 15793  005792  969E               	bcf	3998,3,c	;volatile
 15794                           
 15795                           ; BSR set to: 1
 15796                           ;i2c1.c: 218: PIR2bits.BCL1IF = 0;
 15797  005794  96A1               	bcf	4001,3,c	;volatile
 15798                           
 15799                           ; BSR set to: 1
 15800                           ;i2c1.c: 221: PIE1bits.SSP1IE = 1;
 15801  005796  869D               	bsf	3997,3,c	;volatile
 15802                           
 15803                           ; BSR set to: 1
 15804                           ;i2c1.c: 222: PIE2bits.BCL1IE = 1;
 15805  005798  86A0               	bsf	4000,3,c	;volatile
 15806                           
 15807                           ; BSR set to: 1
 15808  00579A  0012               	return		;funcret
 15809  00579C                     __end_of_I2C1_Initialize:
 15810                           	opt callstack 0
 15811                           
 15812 ;; *************** function _EUSART1_Initialize *****************
 15813 ;; Defined at:
 15814 ;;		line 182 in file "mcc_generated_files/eusart1.c"
 15815 ;; Parameters:    Size  Location     Type
 15816 ;;		None
 15817 ;; Auto vars:     Size  Location     Type
 15818 ;;		None
 15819 ;; Return value:  Size  Location     Type
 15820 ;;                  1    wreg      void 
 15821 ;; Registers used:
 15822 ;;		wreg, status,2, status,0, cstack
 15823 ;; Tracked objects:
 15824 ;;		On entry : 0/0
 15825 ;;		On exit  : 0/0
 15826 ;;		Unchanged: 0/0
 15827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15828 ;;      Params:         0       0       0       0       0       0       0
 15829 ;;      Locals:         0       0       0       0       0       0       0
 15830 ;;      Temps:          0       0       0       0       0       0       0
 15831 ;;      Totals:         0       0       0       0       0       0       0
 15832 ;;Total ram usage:        0 bytes
 15833 ;; Hardware stack levels used:    1
 15834 ;; Hardware stack levels required when called:    6
 15835 ;; This function calls:
 15836 ;;		_EUSART1_SetErrorHandler
 15837 ;;		_EUSART1_SetFramingErrorHandler
 15838 ;;		_EUSART1_SetOverrunErrorHandler
 15839 ;;		_EUSART1_SetRxInterruptHandler
 15840 ;;		_EUSART1_SetTxInterruptHandler
 15841 ;; This function is called by:
 15842 ;;		_SYSTEM_Initialize
 15843 ;; This function uses a non-reentrant model
 15844 ;;
 15845                           
 15846                           	psect	text76
 15847  004D5E                     __ptext76:
 15848                           	opt callstack 0
 15849  004D5E                     _EUSART1_Initialize:
 15850                           	opt callstack 23
 15851                           
 15852                           ;eusart1.c: 185: PIE1bits.RC1IE = 0;
 15853                           
 15854                           ; BSR set to: 1
 15855                           ;incstack = 0
 15856  004D5E  9A9D               	bcf	3997,5,c	;volatile
 15857                           
 15858                           ;eusart1.c: 186: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
 15859  004D60  0EB6               	movlw	low _EUSART1_Receive_ISR
 15860  004D62  6E1A               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler,c
 15861  004D64  0E4A               	movlw	high _EUSART1_Receive_ISR
 15862  004D66  6E1B               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1,c
 15863  004D68  EC63  F02D         	call	_EUSART1_SetRxInterruptHandler	;wreg free
 15864                           
 15865                           ;eusart1.c: 187: PIE1bits.TX1IE = 0;
 15866  004D6C  989D               	bcf	3997,4,c	;volatile
 15867                           
 15868                           ;eusart1.c: 188: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
 15869  004D6E  0E30               	movlw	low _EUSART1_Transmit_ISR
 15870  004D70  6E1A               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler,c
 15871  004D72  0E58               	movlw	high _EUSART1_Transmit_ISR
 15872  004D74  6E1B               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler+1,c
 15873  004D76  EC5E  F02D         	call	_EUSART1_SetTxInterruptHandler	;wreg free
 15874                           
 15875                           ;eusart1.c: 192: BAUDCON1 = 0x08;
 15876  004D7A  0E08               	movlw	8
 15877  004D7C  6EB8               	movwf	4024,c	;volatile
 15878                           
 15879                           ;eusart1.c: 195: RCSTA1 = 0x90;
 15880  004D7E  0E90               	movlw	144
 15881  004D80  6EAB               	movwf	4011,c	;volatile
 15882                           
 15883                           ;eusart1.c: 198: TXSTA1 = 0x24;
 15884  004D82  0E24               	movlw	36
 15885  004D84  6EAC               	movwf	4012,c	;volatile
 15886                           
 15887                           ;eusart1.c: 201: SPBRG1 = 0xCF;
 15888  004D86  0ECF               	movlw	207
 15889  004D88  6EAF               	movwf	4015,c	;volatile
 15890                           
 15891                           ;eusart1.c: 204: SPBRGH1 = 0x00;
 15892  004D8A  0E00               	movlw	0
 15893  004D8C  6EB0               	movwf	4016,c	;volatile
 15894                           
 15895                           ;eusart1.c: 207: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
 15896  004D8E  0E3E               	movlw	low _EUSART1_DefaultFramingErrorHandler
 15897  004D90  6E1A               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler,c
 15898  004D92  0E5B               	movlw	high _EUSART1_DefaultFramingErrorHandler
 15899  004D94  6E1B               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler+1,c
 15900  004D96  EC6D  F02D         	call	_EUSART1_SetFramingErrorHandler	;wreg free
 15901                           
 15902                           ;eusart1.c: 208: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
 15903  004D9A  0E12               	movlw	low _EUSART1_DefaultOverrunErrorHandler
 15904  004D9C  6E1A               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler,c
 15905  004D9E  0E5B               	movlw	high _EUSART1_DefaultOverrunErrorHandler
 15906  004DA0  6E1B               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler+1,c
 15907  004DA2  EC68  F02D         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
 15908                           
 15909                           ;eusart1.c: 209: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
 15910  004DA6  0E18               	movlw	low _EUSART1_DefaultErrorHandler
 15911  004DA8  6E1A               	movwf	EUSART1_SetErrorHandler@interruptHandler,c
 15912  004DAA  0E5B               	movlw	high _EUSART1_DefaultErrorHandler
 15913  004DAC  6E1B               	movwf	EUSART1_SetErrorHandler@interruptHandler+1,c
 15914  004DAE  EC72  F02D         	call	_EUSART1_SetErrorHandler	;wreg free
 15915                           
 15916                           ;eusart1.c: 211: eusart1RxLastError.status = 0;
 15917  004DB2  0E00               	movlw	0
 15918  004DB4  0101               	movlb	1	; () banked
 15919  004DB6  6F4B               	movwf	_eusart1RxLastError& (0+255),b	;volatile
 15920                           
 15921                           ;eusart1.c: 214: eusart1TxHead = 0;
 15922  004DB8  0E00               	movlw	0
 15923  004DBA  6E3D               	movwf	_eusart1TxHead,c	;volatile
 15924                           
 15925                           ;eusart1.c: 215: eusart1TxTail = 0;
 15926  004DBC  0E00               	movlw	0
 15927  004DBE  6E3C               	movwf	_eusart1TxTail,c	;volatile
 15928                           
 15929                           ;eusart1.c: 216: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 15930  004DC0  0E08               	movlw	8
 15931  004DC2  6F83               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15932                           
 15933                           ;eusart1.c: 218: eusart1RxHead = 0;
 15934  004DC4  0E00               	movlw	0
 15935  004DC6  6E3B               	movwf	_eusart1RxHead,c	;volatile
 15936                           
 15937                           ;eusart1.c: 219: eusart1RxTail = 0;
 15938  004DC8  0E00               	movlw	0
 15939  004DCA  6E3A               	movwf	_eusart1RxTail,c	;volatile
 15940                           
 15941                           ;eusart1.c: 220: eusart1RxCount = 0;
 15942  004DCC  0E00               	movlw	0
 15943  004DCE  0100               	movlb	0	; () banked
 15944  004DD0  6FFD               	movwf	_eusart1RxCount& (0+255),b	;volatile
 15945                           
 15946                           ; BSR set to: 0
 15947                           ;eusart1.c: 223: PIE1bits.RC1IE = 1;
 15948  004DD2  8A9D               	bsf	3997,5,c	;volatile
 15949                           
 15950                           ; BSR set to: 0
 15951  004DD4  0012               	return		;funcret
 15952  004DD6                     __end_of_EUSART1_Initialize:
 15953                           	opt callstack 0
 15954                           
 15955 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
 15956 ;; Defined at:
 15957 ;;		line 595 in file "mcc_generated_files/eusart1.c"
 15958 ;; Parameters:    Size  Location     Type
 15959 ;;  interruptHan    2   25[COMRAM] PTR FTN()void 
 15960 ;;		 -> EUSART1_Transmit_ISR(1), 
 15961 ;; Auto vars:     Size  Location     Type
 15962 ;;		None
 15963 ;; Return value:  Size  Location     Type
 15964 ;;                  1    wreg      void 
 15965 ;; Registers used:
 15966 ;;		wreg, status,2, status,0
 15967 ;; Tracked objects:
 15968 ;;		On entry : 0/0
 15969 ;;		On exit  : 0/0
 15970 ;;		Unchanged: 0/0
 15971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15972 ;;      Params:         2       0       0       0       0       0       0
 15973 ;;      Locals:         0       0       0       0       0       0       0
 15974 ;;      Temps:          0       0       0       0       0       0       0
 15975 ;;      Totals:         2       0       0       0       0       0       0
 15976 ;;Total ram usage:        2 bytes
 15977 ;; Hardware stack levels used:    1
 15978 ;; Hardware stack levels required when called:    5
 15979 ;; This function calls:
 15980 ;;		Nothing
 15981 ;; This function is called by:
 15982 ;;		_EUSART1_Initialize
 15983 ;; This function uses a non-reentrant model
 15984 ;;
 15985                           
 15986                           	psect	text77
 15987  005ABC                     __ptext77:
 15988                           	opt callstack 0
 15989  005ABC                     _EUSART1_SetTxInterruptHandler:
 15990                           	opt callstack 23
 15991                           
 15992                           ;eusart1.c: 596: EUSART1_TxDefaultInterruptHandler = interruptHandler;
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;incstack = 0
 15996  005ABC  C01A  F297         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
 15997  005AC0  C01B  F298         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
 15998  005AC4  0012               	return		;funcret
 15999  005AC6                     __end_of_EUSART1_SetTxInterruptHandler:
 16000                           	opt callstack 0
 16001                           
 16002 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
 16003 ;; Defined at:
 16004 ;;		line 599 in file "mcc_generated_files/eusart1.c"
 16005 ;; Parameters:    Size  Location     Type
 16006 ;;  interruptHan    2   25[COMRAM] PTR FTN()void 
 16007 ;;		 -> EUSART1_Receive_ISR(1), 
 16008 ;; Auto vars:     Size  Location     Type
 16009 ;;		None
 16010 ;; Return value:  Size  Location     Type
 16011 ;;                  1    wreg      void 
 16012 ;; Registers used:
 16013 ;;		wreg, status,2, status,0
 16014 ;; Tracked objects:
 16015 ;;		On entry : 0/0
 16016 ;;		On exit  : 0/0
 16017 ;;		Unchanged: 0/0
 16018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16019 ;;      Params:         2       0       0       0       0       0       0
 16020 ;;      Locals:         0       0       0       0       0       0       0
 16021 ;;      Temps:          0       0       0       0       0       0       0
 16022 ;;      Totals:         2       0       0       0       0       0       0
 16023 ;;Total ram usage:        2 bytes
 16024 ;; Hardware stack levels used:    1
 16025 ;; Hardware stack levels required when called:    5
 16026 ;; This function calls:
 16027 ;;		Nothing
 16028 ;; This function is called by:
 16029 ;;		_EUSART1_Initialize
 16030 ;; This function uses a non-reentrant model
 16031 ;;
 16032                           
 16033                           	psect	text78
 16034  005AC6                     __ptext78:
 16035                           	opt callstack 0
 16036  005AC6                     _EUSART1_SetRxInterruptHandler:
 16037                           	opt callstack 23
 16038                           
 16039                           ;eusart1.c: 600: EUSART1_RxDefaultInterruptHandler = interruptHandler;
 16040                           
 16041                           ;incstack = 0
 16042  005AC6  C01A  F295         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
 16043  005ACA  C01B  F296         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
 16044  005ACE  0012               	return		;funcret
 16045  005AD0                     __end_of_EUSART1_SetRxInterruptHandler:
 16046                           	opt callstack 0
 16047                           
 16048 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
 16049 ;; Defined at:
 16050 ;;		line 587 in file "mcc_generated_files/eusart1.c"
 16051 ;; Parameters:    Size  Location     Type
 16052 ;;  interruptHan    2   25[COMRAM] PTR FTN()void 
 16053 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;		None
 16056 ;; Return value:  Size  Location     Type
 16057 ;;                  1    wreg      void 
 16058 ;; Registers used:
 16059 ;;		wreg, status,2, status,0
 16060 ;; Tracked objects:
 16061 ;;		On entry : 0/0
 16062 ;;		On exit  : 0/0
 16063 ;;		Unchanged: 0/0
 16064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16065 ;;      Params:         2       0       0       0       0       0       0
 16066 ;;      Locals:         0       0       0       0       0       0       0
 16067 ;;      Temps:          0       0       0       0       0       0       0
 16068 ;;      Totals:         2       0       0       0       0       0       0
 16069 ;;Total ram usage:        2 bytes
 16070 ;; Hardware stack levels used:    1
 16071 ;; Hardware stack levels required when called:    5
 16072 ;; This function calls:
 16073 ;;		Nothing
 16074 ;; This function is called by:
 16075 ;;		_EUSART1_Initialize
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078                           
 16079                           	psect	text79
 16080  005AD0                     __ptext79:
 16081                           	opt callstack 0
 16082  005AD0                     _EUSART1_SetOverrunErrorHandler:
 16083                           	opt callstack 23
 16084                           
 16085                           ;eusart1.c: 588: EUSART1_OverrunErrorHandler = interruptHandler;
 16086                           
 16087                           ;incstack = 0
 16088  005AD0  C01A  F291         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
 16089  005AD4  C01B  F292         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
 16090  005AD8  0012               	return		;funcret
 16091  005ADA                     __end_of_EUSART1_SetOverrunErrorHandler:
 16092                           	opt callstack 0
 16093                           
 16094 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
 16095 ;; Defined at:
 16096 ;;		line 583 in file "mcc_generated_files/eusart1.c"
 16097 ;; Parameters:    Size  Location     Type
 16098 ;;  interruptHan    2   25[COMRAM] PTR FTN()void 
 16099 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
 16100 ;; Auto vars:     Size  Location     Type
 16101 ;;		None
 16102 ;; Return value:  Size  Location     Type
 16103 ;;                  1    wreg      void 
 16104 ;; Registers used:
 16105 ;;		wreg, status,2, status,0
 16106 ;; Tracked objects:
 16107 ;;		On entry : 0/0
 16108 ;;		On exit  : 0/0
 16109 ;;		Unchanged: 0/0
 16110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16111 ;;      Params:         2       0       0       0       0       0       0
 16112 ;;      Locals:         0       0       0       0       0       0       0
 16113 ;;      Temps:          0       0       0       0       0       0       0
 16114 ;;      Totals:         2       0       0       0       0       0       0
 16115 ;;Total ram usage:        2 bytes
 16116 ;; Hardware stack levels used:    1
 16117 ;; Hardware stack levels required when called:    5
 16118 ;; This function calls:
 16119 ;;		Nothing
 16120 ;; This function is called by:
 16121 ;;		_EUSART1_Initialize
 16122 ;; This function uses a non-reentrant model
 16123 ;;
 16124                           
 16125                           	psect	text80
 16126  005ADA                     __ptext80:
 16127                           	opt callstack 0
 16128  005ADA                     _EUSART1_SetFramingErrorHandler:
 16129                           	opt callstack 23
 16130                           
 16131                           ;eusart1.c: 584: EUSART1_FramingErrorHandler = interruptHandler;
 16132                           
 16133                           ;incstack = 0
 16134  005ADA  C01A  F293         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
 16135  005ADE  C01B  F294         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
 16136  005AE2  0012               	return		;funcret
 16137  005AE4                     __end_of_EUSART1_SetFramingErrorHandler:
 16138                           	opt callstack 0
 16139                           
 16140 ;; *************** function _EUSART1_SetErrorHandler *****************
 16141 ;; Defined at:
 16142 ;;		line 591 in file "mcc_generated_files/eusart1.c"
 16143 ;; Parameters:    Size  Location     Type
 16144 ;;  interruptHan    2   25[COMRAM] PTR FTN()void 
 16145 ;;		 -> EUSART1_DefaultErrorHandler(1), 
 16146 ;; Auto vars:     Size  Location     Type
 16147 ;;		None
 16148 ;; Return value:  Size  Location     Type
 16149 ;;                  1    wreg      void 
 16150 ;; Registers used:
 16151 ;;		wreg, status,2, status,0
 16152 ;; Tracked objects:
 16153 ;;		On entry : 0/0
 16154 ;;		On exit  : 0/0
 16155 ;;		Unchanged: 0/0
 16156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16157 ;;      Params:         2       0       0       0       0       0       0
 16158 ;;      Locals:         0       0       0       0       0       0       0
 16159 ;;      Temps:          0       0       0       0       0       0       0
 16160 ;;      Totals:         2       0       0       0       0       0       0
 16161 ;;Total ram usage:        2 bytes
 16162 ;; Hardware stack levels used:    1
 16163 ;; Hardware stack levels required when called:    5
 16164 ;; This function calls:
 16165 ;;		Nothing
 16166 ;; This function is called by:
 16167 ;;		_EUSART1_Initialize
 16168 ;; This function uses a non-reentrant model
 16169 ;;
 16170                           
 16171                           	psect	text81
 16172  005AE4                     __ptext81:
 16173                           	opt callstack 0
 16174  005AE4                     _EUSART1_SetErrorHandler:
 16175                           	opt callstack 23
 16176                           
 16177                           ;eusart1.c: 592: EUSART1_ErrorHandler = interruptHandler;
 16178                           
 16179                           ;incstack = 0
 16180  005AE4  C01A  F28F         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
 16181  005AE8  C01B  F290         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
 16182  005AEC  0012               	return		;funcret
 16183  005AEE                     __end_of_EUSART1_SetErrorHandler:
 16184                           	opt callstack 0
 16185                           
 16186 ;; *************** function _ADC_Initialize *****************
 16187 ;; Defined at:
 16188 ;;		line 60 in file "mcc_generated_files/adc.c"
 16189 ;; Parameters:    Size  Location     Type
 16190 ;;		None
 16191 ;; Auto vars:     Size  Location     Type
 16192 ;;		None
 16193 ;; Return value:  Size  Location     Type
 16194 ;;                  1    wreg      void 
 16195 ;; Registers used:
 16196 ;;		wreg, status,2
 16197 ;; Tracked objects:
 16198 ;;		On entry : 0/0
 16199 ;;		On exit  : 0/0
 16200 ;;		Unchanged: 0/0
 16201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16202 ;;      Params:         0       0       0       0       0       0       0
 16203 ;;      Locals:         0       0       0       0       0       0       0
 16204 ;;      Temps:          0       0       0       0       0       0       0
 16205 ;;      Totals:         0       0       0       0       0       0       0
 16206 ;;Total ram usage:        0 bytes
 16207 ;; Hardware stack levels used:    1
 16208 ;; Hardware stack levels required when called:    5
 16209 ;; This function calls:
 16210 ;;		Nothing
 16211 ;; This function is called by:
 16212 ;;		_SYSTEM_Initialize
 16213 ;;		_main
 16214 ;; This function uses a non-reentrant model
 16215 ;;
 16216                           
 16217                           	psect	text82
 16218  005A02                     __ptext82:
 16219                           	opt callstack 0
 16220  005A02                     _ADC_Initialize:
 16221                           	opt callstack 24
 16222                           
 16223                           ;adc.c: 65: ADCON0 = 0x01;
 16224                           
 16225                           ;incstack = 0
 16226  005A02  0E01               	movlw	1
 16227  005A04  6EC2               	movwf	4034,c	;volatile
 16228                           
 16229                           ;adc.c: 68: ADCON1 = 0x00;
 16230  005A06  0E00               	movlw	0
 16231  005A08  6EC1               	movwf	4033,c	;volatile
 16232                           
 16233                           ;adc.c: 71: ADCON2 = 0x95;
 16234  005A0A  0E95               	movlw	149
 16235  005A0C  6EC0               	movwf	4032,c	;volatile
 16236                           
 16237                           ;adc.c: 74: ADRESL = 0x00;
 16238  005A0E  0E00               	movlw	0
 16239  005A10  6EC3               	movwf	4035,c	;volatile
 16240                           
 16241                           ;adc.c: 77: ADRESH = 0x00;
 16242  005A12  0E00               	movlw	0
 16243  005A14  6EC4               	movwf	4036,c	;volatile
 16244  005A16  0012               	return		;funcret
 16245  005A18                     __end_of_ADC_Initialize:
 16246                           	opt callstack 0
 16247                           
 16248 ;; *************** function _LCD_init *****************
 16249 ;; Defined at:
 16250 ;;		line 20 in file "lcd.c"
 16251 ;; Parameters:    Size  Location     Type
 16252 ;;  address         1    wreg     unsigned char 
 16253 ;;  cols            1   32[COMRAM] unsigned char 
 16254 ;;  rows            1   33[COMRAM] unsigned char 
 16255 ;; Auto vars:     Size  Location     Type
 16256 ;;  address         1   36[COMRAM] unsigned char 
 16257 ;; Return value:  Size  Location     Type
 16258 ;;                  1    wreg      void 
 16259 ;; Registers used:
 16260 ;;		wreg, status,2, status,0, cstack
 16261 ;; Tracked objects:
 16262 ;;		On entry : 0/0
 16263 ;;		On exit  : 0/0
 16264 ;;		Unchanged: 0/0
 16265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16266 ;;      Params:         2       0       0       0       0       0       0
 16267 ;;      Locals:         1       0       0       0       0       0       0
 16268 ;;      Temps:          2       0       0       0       0       0       0
 16269 ;;      Totals:         5       0       0       0       0       0       0
 16270 ;;Total ram usage:        5 bytes
 16271 ;; Hardware stack levels used:    1
 16272 ;; Hardware stack levels required when called:    9
 16273 ;; This function calls:
 16274 ;;		_LCD_send_cmd
 16275 ;; This function is called by:
 16276 ;;		_main
 16277 ;; This function uses a non-reentrant model
 16278 ;;
 16279                           
 16280                           	psect	text83
 16281  005008                     __ptext83:
 16282                           	opt callstack 0
 16283  005008                     _LCD_init:
 16284                           	opt callstack 21
 16285                           
 16286                           ;incstack = 0
 16287                           ;LCD_init@address stored from wreg
 16288  005008  6E25               	movwf	LCD_init@address,c
 16289                           
 16290                           ;lcd.c: 21: _LCD_address = address;
 16291  00500A  C025  F039         	movff	LCD_init@address,__LCD_address
 16292                           
 16293                           ;lcd.c: 22: _LCD_cols = cols;
 16294  00500E  C021  F038         	movff	LCD_init@cols,__LCD_cols
 16295                           
 16296                           ;lcd.c: 23: _LCD_rows = rows;
 16297  005012  C022  F147         	movff	LCD_init@rows,__LCD_rows
 16298                           
 16299                           ;lcd.c: 25: LCD_send_cmd(0x02 | 0x01);
 16300  005016  0E03               	movlw	3
 16301  005018  ECFF  F029         	call	_LCD_send_cmd
 16302                           
 16303                           ;lcd.c: 26: LCD_send_cmd(0x02 | 0x01);
 16304  00501C  0E03               	movlw	3
 16305  00501E  ECFF  F029         	call	_LCD_send_cmd
 16306                           
 16307                           ;lcd.c: 27: LCD_send_cmd(0x02 | 0x01);
 16308  005022  0E03               	movlw	3
 16309  005024  ECFF  F029         	call	_LCD_send_cmd
 16310                           
 16311                           ;lcd.c: 28: LCD_send_cmd(0x02);
 16312  005028  0E02               	movlw	2
 16313  00502A  ECFF  F029         	call	_LCD_send_cmd
 16314                           
 16315                           ;lcd.c: 31: LCD_send_cmd(0x20 | 0x08 | 0x00 | 0x00);
 16316  00502E  0E28               	movlw	40
 16317  005030  ECFF  F029         	call	_LCD_send_cmd
 16318                           
 16319                           ;lcd.c: 33: LCD_send_cmd(0x08 | 0x04 | 0x00 | 0x00);
 16320  005034  0E0C               	movlw	12
 16321  005036  ECFF  F029         	call	_LCD_send_cmd
 16322                           
 16323                           ;lcd.c: 35: LCD_send_cmd(0x01);
 16324  00503A  0E01               	movlw	1
 16325  00503C  ECFF  F029         	call	_LCD_send_cmd
 16326                           
 16327                           ;lcd.c: 37: LCD_send_cmd(0x04 | 0x02);
 16328  005040  0E06               	movlw	6
 16329  005042  ECFF  F029         	call	_LCD_send_cmd
 16330                           
 16331                           ;lcd.c: 39: _delay((unsigned long)((200)*(8000000/4000.0)));
 16332  005046  0E03               	movlw	3
 16333  005048  6E24               	movwf	(??_LCD_init+1)& (0+255),c
 16334  00504A  0E08               	movlw	8
 16335  00504C  6E23               	movwf	??_LCD_init& (0+255),c
 16336  00504E  0E77               	movlw	119
 16337  005050                     u14277:
 16338  005050  2EE8               	decfsz	wreg,f,c
 16339  005052  D7FE               	bra	u14277
 16340  005054  2E23               	decfsz	??_LCD_init& (0+255),f,c
 16341  005056  D7FC               	bra	u14277
 16342  005058  2E24               	decfsz	(??_LCD_init+1)& (0+255),f,c
 16343  00505A  D7FA               	bra	u14277
 16344  00505C  F000               	nop	
 16345                           
 16346                           ;lcd.c: 41: LCD_send_cmd(0x01);
 16347  00505E  0E01               	movlw	1
 16348  005060  ECFF  F029         	call	_LCD_send_cmd
 16349                           
 16350                           ;lcd.c: 42: LCD_send_cmd(0x02);
 16351  005064  0E02               	movlw	2
 16352  005066  ECFF  F029         	call	_LCD_send_cmd
 16353  00506A  0012               	return		;funcret
 16354  00506C                     __end_of_LCD_init:
 16355                           	opt callstack 0
 16356                           
 16357 ;; *************** function _LCD_send_cmd *****************
 16358 ;; Defined at:
 16359 ;;		line 60 in file "lcd.c"
 16360 ;; Parameters:    Size  Location     Type
 16361 ;;  command         1    wreg     unsigned char 
 16362 ;; Auto vars:     Size  Location     Type
 16363 ;;  command         1   29[COMRAM] unsigned char 
 16364 ;;  nibble_upper    1   31[COMRAM] unsigned char 
 16365 ;;  nibble_lower    1   30[COMRAM] unsigned char 
 16366 ;; Return value:  Size  Location     Type
 16367 ;;                  1    wreg      void 
 16368 ;; Registers used:
 16369 ;;		wreg, status,2, status,0, cstack
 16370 ;; Tracked objects:
 16371 ;;		On entry : 0/0
 16372 ;;		On exit  : 0/0
 16373 ;;		Unchanged: 0/0
 16374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16375 ;;      Params:         0       0       0       0       0       0       0
 16376 ;;      Locals:         3       0       0       0       0       0       0
 16377 ;;      Temps:          0       0       0       0       0       0       0
 16378 ;;      Totals:         3       0       0       0       0       0       0
 16379 ;;Total ram usage:        3 bytes
 16380 ;; Hardware stack levels used:    1
 16381 ;; Hardware stack levels required when called:    8
 16382 ;; This function calls:
 16383 ;;		_I2C_select
 16384 ;;		_I2C_start
 16385 ;;		_I2C_stop
 16386 ;;		_I2C_write
 16387 ;; This function is called by:
 16388 ;;		_LCD_init
 16389 ;;		_LCD_clear
 16390 ;;		_LCD_select_line
 16391 ;; This function uses a non-reentrant model
 16392 ;;
 16393                           
 16394                           	psect	text84
 16395  0053FE                     __ptext84:
 16396                           	opt callstack 0
 16397  0053FE                     _LCD_send_cmd:
 16398                           	opt callstack 18
 16399                           
 16400                           ;incstack = 0
 16401                           ;LCD_send_cmd@command stored from wreg
 16402  0053FE  6E1E               	movwf	LCD_send_cmd@command,c
 16403                           
 16404                           ;lcd.c: 61: unsigned char nibble_lower, nibble_upper;;lcd.c: 62: nibble_lower = (command
      +                          <<4) & 0xF0;
 16405  005400  381E               	swapf	LCD_send_cmd@command,w,c
 16406  005402  0BF0               	andlw	240
 16407  005404  0BF0               	andlw	240
 16408  005406  6E1F               	movwf	LCD_send_cmd@nibble_lower,c
 16409                           
 16410                           ;lcd.c: 63: nibble_upper = command & 0xF0;
 16411  005408  501E               	movf	LCD_send_cmd@command,w,c
 16412  00540A  0BF0               	andlw	240
 16413  00540C  6E20               	movwf	LCD_send_cmd@nibble_upper,c
 16414                           
 16415                           ;lcd.c: 65: I2C_start();
 16416  00540E  EC7F  F02D         	call	_I2C_start	;wreg free
 16417                           
 16418                           ;lcd.c: 66: I2C_select(_LCD_address, 0x00);
 16419  005412  0E00               	movlw	0
 16420  005414  6E1C               	movwf	I2C_select@mode,c
 16421  005416  5039               	movf	__LCD_address,w,c
 16422  005418  EC42  F02D         	call	_I2C_select
 16423                           
 16424                           ;lcd.c: 68: I2C_write(nibble_upper | _LCD_backlight | 0b00000100);
 16425  00541C  5020               	movf	LCD_send_cmd@nibble_upper,w,c
 16426  00541E  1044               	iorwf	__LCD_backlight,w,c
 16427  005420  0904               	iorlw	4
 16428  005422  EC49  F02D         	call	_I2C_write
 16429                           
 16430                           ;lcd.c: 69: I2C_write(nibble_upper | _LCD_backlight);
 16431  005426  5020               	movf	LCD_send_cmd@nibble_upper,w,c
 16432  005428  1044               	iorwf	__LCD_backlight,w,c
 16433  00542A  EC49  F02D         	call	_I2C_write
 16434                           
 16435                           ;lcd.c: 71: I2C_write(nibble_lower | _LCD_backlight | 0b00000100);
 16436  00542E  501F               	movf	LCD_send_cmd@nibble_lower,w,c
 16437  005430  1044               	iorwf	__LCD_backlight,w,c
 16438  005432  0904               	iorlw	4
 16439  005434  EC49  F02D         	call	_I2C_write
 16440                           
 16441                           ;lcd.c: 72: I2C_write(nibble_lower | _LCD_backlight);
 16442  005438  501F               	movf	LCD_send_cmd@nibble_lower,w,c
 16443  00543A  1044               	iorwf	__LCD_backlight,w,c
 16444  00543C  EC49  F02D         	call	_I2C_write
 16445                           
 16446                           ;lcd.c: 75: I2C_stop();
 16447  005440  EC7B  F02D         	call	_I2C_stop	;wreg free
 16448  005444  0012               	return		;funcret
 16449  005446                     __end_of_LCD_send_cmd:
 16450                           	opt callstack 0
 16451                           
 16452 ;; *************** function _LCD_backlight *****************
 16453 ;; Defined at:
 16454 ;;		line 52 in file "lcd.c"
 16455 ;; Parameters:    Size  Location     Type
 16456 ;;  on              1    wreg     unsigned char 
 16457 ;; Auto vars:     Size  Location     Type
 16458 ;;  on              1   29[COMRAM] unsigned char 
 16459 ;; Return value:  Size  Location     Type
 16460 ;;                  1    wreg      void 
 16461 ;; Registers used:
 16462 ;;		wreg, status,2, status,0, cstack
 16463 ;; Tracked objects:
 16464 ;;		On entry : 0/0
 16465 ;;		On exit  : 0/0
 16466 ;;		Unchanged: 0/0
 16467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16468 ;;      Params:         0       0       0       0       0       0       0
 16469 ;;      Locals:         3       0       0       0       0       0       0
 16470 ;;      Temps:          0       0       0       0       0       0       0
 16471 ;;      Totals:         3       0       0       0       0       0       0
 16472 ;;Total ram usage:        3 bytes
 16473 ;; Hardware stack levels used:    1
 16474 ;; Hardware stack levels required when called:    8
 16475 ;; This function calls:
 16476 ;;		_I2C_select
 16477 ;;		_I2C_start
 16478 ;;		_I2C_stop
 16479 ;;		_I2C_write
 16480 ;; This function is called by:
 16481 ;;		_main
 16482 ;; This function uses a non-reentrant model
 16483 ;;
 16484                           
 16485                           	psect	text85
 16486  0056FE                     __ptext85:
 16487                           	opt callstack 0
 16488  0056FE                     _LCD_backlight:
 16489                           	opt callstack 22
 16490                           
 16491                           ;incstack = 0
 16492                           ;LCD_backlight@on stored from wreg
 16493  0056FE  6E1E               	movwf	LCD_backlight@on,c
 16494                           
 16495                           ;lcd.c: 53: _LCD_backlight = on ? 0x08 : 0x00;
 16496  005700  501E               	movf	LCD_backlight@on,w,c
 16497  005702  A4D8               	btfss	status,2,c
 16498  005704  D004               	goto	l11277
 16499  005706  0E00               	movlw	0
 16500  005708  6E20               	movwf	_LCD_backlight$2792+1,c
 16501  00570A  0E00               	movlw	0
 16502  00570C  D003               	goto	L4
 16503  00570E                     l11277:
 16504  00570E  0E00               	movlw	0
 16505  005710  6E20               	movwf	_LCD_backlight$2792+1,c
 16506  005712  0E08               	movlw	8
 16507  005714                     L4:
 16508  005714  6E1F               	movwf	_LCD_backlight$2792,c
 16509  005716  C01F  F044         	movff	_LCD_backlight$2792,__LCD_backlight
 16510                           
 16511                           ;lcd.c: 54: I2C_start();
 16512  00571A  EC7F  F02D         	call	_I2C_start	;wreg free
 16513                           
 16514                           ;lcd.c: 55: I2C_select(_LCD_address, 0x00);
 16515  00571E  0E00               	movlw	0
 16516  005720  6E1C               	movwf	I2C_select@mode,c
 16517  005722  5039               	movf	__LCD_address,w,c
 16518  005724  EC42  F02D         	call	_I2C_select
 16519                           
 16520                           ;lcd.c: 56: I2C_write(_LCD_backlight);
 16521  005728  5044               	movf	__LCD_backlight,w,c
 16522  00572A  EC49  F02D         	call	_I2C_write
 16523                           
 16524                           ;lcd.c: 57: I2C_stop();
 16525  00572E  EC7B  F02D         	call	_I2C_stop	;wreg free
 16526  005732  0012               	return		;funcret
 16527  005734                     __end_of_LCD_backlight:
 16528                           	opt callstack 0
 16529                           
 16530 ;; *************** function _I2C_stop *****************
 16531 ;; Defined at:
 16532 ;;		line 30 in file "i2c.c"
 16533 ;; Parameters:    Size  Location     Type
 16534 ;;		None
 16535 ;; Auto vars:     Size  Location     Type
 16536 ;;		None
 16537 ;; Return value:  Size  Location     Type
 16538 ;;                  1    wreg      void 
 16539 ;; Registers used:
 16540 ;;		wreg, status,2, status,0, cstack
 16541 ;; Tracked objects:
 16542 ;;		On entry : 0/0
 16543 ;;		On exit  : 0/0
 16544 ;;		Unchanged: 0/0
 16545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16546 ;;      Params:         0       0       0       0       0       0       0
 16547 ;;      Locals:         0       0       0       0       0       0       0
 16548 ;;      Temps:          0       0       0       0       0       0       0
 16549 ;;      Totals:         0       0       0       0       0       0       0
 16550 ;;Total ram usage:        0 bytes
 16551 ;; Hardware stack levels used:    1
 16552 ;; Hardware stack levels required when called:    6
 16553 ;; This function calls:
 16554 ;;		_I2C_wait
 16555 ;; This function is called by:
 16556 ;;		_LCD_backlight
 16557 ;;		_LCD_send_cmd
 16558 ;;		_LCD_send_data
 16559 ;;		_I2C_send
 16560 ;;		_I2C_sendN
 16561 ;;		_I2C_receive
 16562 ;; This function uses a non-reentrant model
 16563 ;;
 16564                           
 16565                           	psect	text86
 16566  005AF6                     __ptext86:
 16567                           	opt callstack 0
 16568  005AF6                     _I2C_stop:
 16569                           	opt callstack 20
 16570                           
 16571                           ;i2c.c: 31: I2C_wait();
 16572                           
 16573                           ;incstack = 0
 16574  005AF6  EC16  F02D         	call	_I2C_wait	;wreg free
 16575                           
 16576                           ;i2c.c: 32: SSP1CON2 |= 0x04;
 16577  005AFA  84C5               	bsf	4037,2,c	;volatile
 16578  005AFC  0012               	return		;funcret
 16579  005AFE                     __end_of_I2C_stop:
 16580                           	opt callstack 0
 16581                           
 16582 ;; *************** function _I2C_start *****************
 16583 ;; Defined at:
 16584 ;;		line 20 in file "i2c.c"
 16585 ;; Parameters:    Size  Location     Type
 16586 ;;		None
 16587 ;; Auto vars:     Size  Location     Type
 16588 ;;		None
 16589 ;; Return value:  Size  Location     Type
 16590 ;;                  1    wreg      void 
 16591 ;; Registers used:
 16592 ;;		wreg, status,2, status,0, cstack
 16593 ;; Tracked objects:
 16594 ;;		On entry : 0/0
 16595 ;;		On exit  : 0/0
 16596 ;;		Unchanged: 0/0
 16597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16598 ;;      Params:         0       0       0       0       0       0       0
 16599 ;;      Locals:         0       0       0       0       0       0       0
 16600 ;;      Temps:          0       0       0       0       0       0       0
 16601 ;;      Totals:         0       0       0       0       0       0       0
 16602 ;;Total ram usage:        0 bytes
 16603 ;; Hardware stack levels used:    1
 16604 ;; Hardware stack levels required when called:    6
 16605 ;; This function calls:
 16606 ;;		_I2C_wait
 16607 ;; This function is called by:
 16608 ;;		_LCD_backlight
 16609 ;;		_LCD_send_cmd
 16610 ;;		_LCD_send_data
 16611 ;;		_I2C_send
 16612 ;;		_I2C_sendN
 16613 ;;		_I2C_receive
 16614 ;; This function uses a non-reentrant model
 16615 ;;
 16616                           
 16617                           	psect	text87
 16618  005AFE                     __ptext87:
 16619                           	opt callstack 0
 16620  005AFE                     _I2C_start:
 16621                           	opt callstack 20
 16622                           
 16623                           ;i2c.c: 21: I2C_wait();
 16624                           
 16625                           ;incstack = 0
 16626  005AFE  EC16  F02D         	call	_I2C_wait	;wreg free
 16627                           
 16628                           ;i2c.c: 22: SSP1CON2 |= 0x01;
 16629  005B02  80C5               	bsf	4037,0,c	;volatile
 16630  005B04  0012               	return		;funcret
 16631  005B06                     __end_of_I2C_start:
 16632                           	opt callstack 0
 16633                           
 16634 ;; *************** function _I2C_select *****************
 16635 ;; Defined at:
 16636 ;;		line 35 in file "i2c.c"
 16637 ;; Parameters:    Size  Location     Type
 16638 ;;  address         1    wreg     unsigned char 
 16639 ;;  mode            1   27[COMRAM] unsigned char 
 16640 ;; Auto vars:     Size  Location     Type
 16641 ;;  address         1   28[COMRAM] unsigned char 
 16642 ;; Return value:  Size  Location     Type
 16643 ;;                  1    wreg      void 
 16644 ;; Registers used:
 16645 ;;		wreg, status,2, status,0, cstack
 16646 ;; Tracked objects:
 16647 ;;		On entry : 0/0
 16648 ;;		On exit  : 0/0
 16649 ;;		Unchanged: 0/0
 16650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16651 ;;      Params:         1       0       0       0       0       0       0
 16652 ;;      Locals:         1       0       0       0       0       0       0
 16653 ;;      Temps:          0       0       0       0       0       0       0
 16654 ;;      Totals:         2       0       0       0       0       0       0
 16655 ;;Total ram usage:        2 bytes
 16656 ;; Hardware stack levels used:    1
 16657 ;; Hardware stack levels required when called:    7
 16658 ;; This function calls:
 16659 ;;		_I2C_write
 16660 ;; This function is called by:
 16661 ;;		_LCD_backlight
 16662 ;;		_LCD_send_cmd
 16663 ;;		_LCD_send_data
 16664 ;;		_I2C_send
 16665 ;;		_I2C_sendN
 16666 ;;		_I2C_receive
 16667 ;; This function uses a non-reentrant model
 16668 ;;
 16669                           
 16670                           	psect	text88
 16671  005A84                     __ptext88:
 16672                           	opt callstack 0
 16673  005A84                     _I2C_select:
 16674                           	opt callstack 19
 16675                           
 16676                           ;incstack = 0
 16677                           ;I2C_select@address stored from wreg
 16678  005A84  6E1D               	movwf	I2C_select@address,c
 16679                           
 16680                           ;i2c.c: 36: I2C_write(address << 1 | mode);
 16681  005A86  501D               	movf	I2C_select@address,w,c
 16682  005A88  241D               	addwf	I2C_select@address,w,c
 16683  005A8A  101C               	iorwf	I2C_select@mode,w,c
 16684  005A8C  EC49  F02D         	call	_I2C_write
 16685  005A90  0012               	return		;funcret
 16686  005A92                     __end_of_I2C_select:
 16687                           	opt callstack 0
 16688                           
 16689 ;; *************** function _I2C_write *****************
 16690 ;; Defined at:
 16691 ;;		line 51 in file "i2c.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;  data            1    wreg     unsigned char 
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;  data            1   26[COMRAM] unsigned char 
 16696 ;; Return value:  Size  Location     Type
 16697 ;;                  1    wreg      void 
 16698 ;; Registers used:
 16699 ;;		wreg, status,2, status,0, cstack
 16700 ;; Tracked objects:
 16701 ;;		On entry : 0/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16705 ;;      Params:         0       0       0       0       0       0       0
 16706 ;;      Locals:         1       0       0       0       0       0       0
 16707 ;;      Temps:          0       0       0       0       0       0       0
 16708 ;;      Totals:         1       0       0       0       0       0       0
 16709 ;;Total ram usage:        1 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    6
 16712 ;; This function calls:
 16713 ;;		_I2C_wait
 16714 ;; This function is called by:
 16715 ;;		_I2C_select
 16716 ;;		_LCD_backlight
 16717 ;;		_LCD_send_cmd
 16718 ;;		_LCD_send_data
 16719 ;;		_I2C_send
 16720 ;;		_I2C_sendN
 16721 ;; This function uses a non-reentrant model
 16722 ;;
 16723                           
 16724                           	psect	text89
 16725  005A92                     __ptext89:
 16726                           	opt callstack 0
 16727  005A92                     _I2C_write:
 16728                           	opt callstack 20
 16729                           
 16730                           ;incstack = 0
 16731                           ;I2C_write@data stored from wreg
 16732  005A92  6E1B               	movwf	I2C_write@data,c
 16733                           
 16734                           ;i2c.c: 52: I2C_wait();
 16735  005A94  EC16  F02D         	call	_I2C_wait	;wreg free
 16736                           
 16737                           ;i2c.c: 53: SSP1BUF = data;
 16738  005A98  C01B  FFC9         	movff	I2C_write@data,4041	;volatile
 16739  005A9C  0012               	return		;funcret
 16740  005A9E                     __end_of_I2C_write:
 16741                           	opt callstack 0
 16742                           
 16743 ;; *************** function _I2C_wait *****************
 16744 ;; Defined at:
 16745 ;;		line 15 in file "i2c.c"
 16746 ;; Parameters:    Size  Location     Type
 16747 ;;		None
 16748 ;; Auto vars:     Size  Location     Type
 16749 ;;		None
 16750 ;; Return value:  Size  Location     Type
 16751 ;;                  1    wreg      void 
 16752 ;; Registers used:
 16753 ;;		wreg, status,2, status,0
 16754 ;; Tracked objects:
 16755 ;;		On entry : 0/0
 16756 ;;		On exit  : 0/0
 16757 ;;		Unchanged: 0/0
 16758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16759 ;;      Params:         0       0       0       0       0       0       0
 16760 ;;      Locals:         0       0       0       0       0       0       0
 16761 ;;      Temps:          1       0       0       0       0       0       0
 16762 ;;      Totals:         1       0       0       0       0       0       0
 16763 ;;Total ram usage:        1 bytes
 16764 ;; Hardware stack levels used:    1
 16765 ;; Hardware stack levels required when called:    5
 16766 ;; This function calls:
 16767 ;;		Nothing
 16768 ;; This function is called by:
 16769 ;;		_I2C_start
 16770 ;;		_I2C_stop
 16771 ;;		_I2C_write
 16772 ;;		_I2C_repeated_start
 16773 ;;		_I2C_read
 16774 ;; This function uses a non-reentrant model
 16775 ;;
 16776                           
 16777                           	psect	text90
 16778  005A2C                     __ptext90:
 16779                           	opt callstack 0
 16780  005A2C                     _I2C_wait:
 16781                           	opt callstack 20
 16782                           
 16783                           ;i2c.c: 17: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
 16784                           
 16785                           ;incstack = 0
 16786  005A2C  B4C7               	btfsc	4039,2,c	;volatile
 16787  005A2E  D7FE               	goto	_I2C_wait
 16788  005A30  CFC5 F01A          	movff	4037,??_I2C_wait	;volatile
 16789  005A34  0E1F               	movlw	31
 16790  005A36  161A               	andwf	??_I2C_wait,f,c
 16791  005A38  B4D8               	btfsc	status,2,c
 16792  005A3A  0012               	return	
 16793  005A3C  D7F7               	goto	_I2C_wait
 16794  005A3E                     __end_of_I2C_wait:
 16795                           	opt callstack 0
 16796                           
 16797 ;; *************** function _INTERRUPT_InterruptManager *****************
 16798 ;; Defined at:
 16799 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 16800 ;; Parameters:    Size  Location     Type
 16801 ;;		None
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;		None
 16804 ;; Return value:  Size  Location     Type
 16805 ;;                  1    wreg      void 
 16806 ;; Registers used:
 16807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 16808 ;; Tracked objects:
 16809 ;;		On entry : 0/0
 16810 ;;		On exit  : 0/0
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16813 ;;      Params:         0       0       0       0       0       0       0
 16814 ;;      Locals:         0       0       0       0       0       0       0
 16815 ;;      Temps:          4       0       0       0       0       0       0
 16816 ;;      Totals:         4       0       0       0       0       0       0
 16817 ;;Total ram usage:        4 bytes
 16818 ;; Hardware stack levels used:    1
 16819 ;; Hardware stack levels required when called:    4
 16820 ;; This function calls:
 16821 ;;		Absolute function
 16822 ;;		_EUSART1_Receive_ISR
 16823 ;;		_EUSART1_Transmit_ISR
 16824 ;;		_I2C1_BusCollisionISR
 16825 ;;		_I2C1_ISR
 16826 ;;		_I2C2_BusCollisionISR
 16827 ;;		_I2C2_ISR
 16828 ;;		_TMR3_ISR
 16829 ;; This function is called by:
 16830 ;;		Interrupt level 2
 16831 ;; This function uses a non-reentrant model
 16832 ;;
 16833                           
 16834                           	psect	intcode
 16835  000008                     __pintcode:
 16836                           	opt callstack 0
 16837  000008                     _INTERRUPT_InterruptManager:
 16838                           	opt callstack 18
 16839                           
 16840                           ;incstack = 0
 16841  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16842  00000A  CFFA F016          	movff	pclath,??_INTERRUPT_InterruptManager
 16843  00000E  CFFB F017          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16844  000012  CFD9 F018          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
 16845  000016  CFDA F019          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
 16846                           
 16847                           ;interrupt_manager.c: 61: if(INTCONbits.PEIE == 1)
 16848  00001A  ACF2               	btfss	4082,6,c	;volatile
 16849  00001C  D039               	goto	i2l466
 16850                           
 16851                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: if(PIE2bits.BCL1IE == 1 && PIR2bits
      +                          .BCL1IF == 1)
 16852  00001E  B6A0               	btfsc	4000,3,c	;volatile
 16853  000020  A6A1               	btfss	4001,3,c	;volatile
 16854  000022  D003               	goto	i2l457
 16855                           
 16856                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 65: I2C1_BusCollisionISR();
 16857  000024  EC99  F02D         	call	_I2C1_BusCollisionISR	;wreg free
 16858                           
 16859                           ;interrupt_manager.c: 66: }
 16860  000028  D033               	goto	i2l466
 16861  00002A                     i2l457:
 16862                           
 16863                           ;interrupt_manager.c: 67: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 16864  00002A  B69D               	btfsc	3997,3,c	;volatile
 16865  00002C  A69E               	btfss	3998,3,c	;volatile
 16866  00002E  D003               	goto	i2l459
 16867                           
 16868                           ;interrupt_manager.c: 68: {;interrupt_manager.c: 69: I2C1_ISR();
 16869  000030  ECB8  F01A         	call	_I2C1_ISR	;wreg free
 16870                           
 16871                           ;interrupt_manager.c: 70: }
 16872  000034  D02D               	goto	i2l466
 16873  000036                     i2l459:
 16874                           
 16875                           ;interrupt_manager.c: 71: else if(PIE3bits.BCL2IE == 1 && PIR3bits.BCL2IF == 1)
 16876  000036  BCA3               	btfsc	4003,6,c	;volatile
 16877  000038  ACA4               	btfss	4004,6,c	;volatile
 16878  00003A  D003               	goto	i2l461
 16879                           
 16880                           ;interrupt_manager.c: 72: {;interrupt_manager.c: 73: I2C2_BusCollisionISR();
 16881  00003C  EC97  F02D         	call	_I2C2_BusCollisionISR	;wreg free
 16882                           
 16883                           ;interrupt_manager.c: 74: }
 16884  000040  D027               	goto	i2l466
 16885  000042                     i2l461:
 16886                           
 16887                           ;interrupt_manager.c: 75: else if(PIE3bits.SSP2IE == 1 && PIR3bits.SSP2IF == 1)
 16888  000042  BEA3               	btfsc	4003,7,c	;volatile
 16889  000044  AEA4               	btfss	4004,7,c	;volatile
 16890  000046  D003               	goto	i2l463
 16891                           
 16892                           ;interrupt_manager.c: 76: {;interrupt_manager.c: 77: I2C2_ISR();
 16893  000048  EC91  F019         	call	_I2C2_ISR	;wreg free
 16894                           
 16895                           ;interrupt_manager.c: 78: }
 16896  00004C  D021               	goto	i2l466
 16897  00004E                     i2l463:
 16898                           
 16899                           ;interrupt_manager.c: 79: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16900  00004E  B89D               	btfsc	3997,4,c	;volatile
 16901  000050  A89E               	btfss	3998,4,c	;volatile
 16902  000052  D009               	goto	i2l465
 16903                           
 16904                           ;interrupt_manager.c: 80: {;interrupt_manager.c: 81: EUSART1_TxDefaultInterruptHandler()
      +                          ;
 16905  000054  D801               	call	i2u995_48
 16906  000056  D01C               	goto	i2l466
 16907  000058                     i2u995_48:
 16908  000058  0005               	push	
 16909  00005A  0102               	movlb	2	; () banked
 16910  00005C  6EFA               	movwf	pclath,c
 16911  00005E  5197               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
 16912  000060  6EFD               	movwf	tosl,c
 16913  000062  5198               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
 16914  000064  D00B               	goto	L5
 16915  000066                     i2l465:
 16916                           
 16917                           ;interrupt_manager.c: 83: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16918  000066  BA9D               	btfsc	3997,5,c	;volatile
 16919  000068  AA9E               	btfss	3998,5,c	;volatile
 16920  00006A  D00D               	goto	i2l467
 16921                           
 16922                           ;interrupt_manager.c: 84: {;interrupt_manager.c: 85: EUSART1_RxDefaultInterruptHandler()
      +                          ;
 16923  00006C  D801               	call	i2u998_48
 16924  00006E  D010               	goto	i2l466
 16925  000070                     i2u998_48:
 16926  000070  0005               	push	
 16927  000072  0102               	movlb	2	; () banked
 16928  000074  6EFA               	movwf	pclath,c
 16929  000076  5195               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
 16930  000078  6EFD               	movwf	tosl,c
 16931  00007A  5196               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
 16932  00007C                     L5:
 16933  00007C  6EFE               	movwf	tosh,c
 16934  00007E  50F8               	movf	tblptru,w,c
 16935  000080  6EFF               	movwf	tosu,c
 16936  000082  50FA               	movf	pclath,w,c
 16937  000084  0012               	return		;indir
 16938  000086                     i2l467:
 16939                           
 16940                           ;interrupt_manager.c: 87: else if(PIE2bits.TMR3IE == 1 && PIR2bits.TMR3IF == 1)
 16941  000086  B2A0               	btfsc	4000,1,c	;volatile
 16942  000088  A2A1               	btfss	4001,1,c	;volatile
 16943  00008A  D002               	goto	i2l466
 16944                           
 16945                           ;interrupt_manager.c: 88: {;interrupt_manager.c: 89: TMR3_ISR();
 16946  00008C  ECB5  F029         	call	_TMR3_ISR	;wreg free
 16947  000090                     i2l466:
 16948  000090  C019  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
 16949  000094  C018  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
 16950  000098  C017  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16951  00009C  C016  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16952  0000A0  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16953  0000A2  0011               	retfie		f
 16954  0000A4                     __end_of_INTERRUPT_InterruptManager:
 16955                           	opt callstack 0
 16956                           
 16957 ;; *************** function _TMR3_ISR *****************
 16958 ;; Defined at:
 16959 ;;		line 161 in file "mcc_generated_files/tmr3.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;		None
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;		None
 16964 ;; Return value:  Size  Location     Type
 16965 ;;                  1    wreg      void 
 16966 ;; Registers used:
 16967 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16973 ;;      Params:         0       0       0       0       0       0       0
 16974 ;;      Locals:         0       0       0       0       0       0       0
 16975 ;;      Temps:          0       0       0       0       0       0       0
 16976 ;;      Totals:         0       0       0       0       0       0       0
 16977 ;;Total ram usage:        0 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; Hardware stack levels required when called:    1
 16980 ;; This function calls:
 16981 ;;		Absolute function
 16982 ;;		_TMR3_DefaultInterruptHandler
 16983 ;;		_TMR3_WriteTimer
 16984 ;; This function is called by:
 16985 ;;		_INTERRUPT_InterruptManager
 16986 ;; This function uses a non-reentrant model
 16987 ;;
 16988                           
 16989                           	psect	text92
 16990  00536A                     __ptext92:
 16991                           	opt callstack 0
 16992  00536A                     _TMR3_ISR:
 16993                           	opt callstack 20
 16994                           
 16995                           ;tmr3.c: 165: PIR2bits.TMR3IF = 0;
 16996                           
 16997                           ;incstack = 0
 16998  00536A  92A1               	bcf	4001,1,c	;volatile
 16999                           
 17000                           ;tmr3.c: 166: TMR3_WriteTimer(timer3ReloadVal);
 17001  00536C  C181  F001         	movff	_timer3ReloadVal,TMR3_WriteTimer@timerVal	;volatile
 17002  005370  C182  F002         	movff	_timer3ReloadVal+1,TMR3_WriteTimer@timerVal+1	;volatile
 17003  005374  ECD7  F02C         	call	_TMR3_WriteTimer	;wreg free
 17004                           
 17005                           ;tmr3.c: 168: tmr3Counter++;
 17006  005378  0101               	movlb	1	; () banked
 17007  00537A  4B33               	infsnz	_tmr3Counter& (0+255),f,b
 17008  00537C  2B34               	incf	(_tmr3Counter+1)& (0+255),f,b
 17009                           
 17010                           ; BSR set to: 1
 17011                           ;tmr3.c: 170: if (tmr3Counter == 344) {
 17012  00537E  0E58               	movlw	88
 17013  005380  1933               	xorwf	_tmr3Counter& (0+255),w,b
 17014  005382  E109               	bnz	i2l8631
 17015  005384  0534               	decf	(_tmr3Counter+1)& (0+255),w,b
 17016  005386  A4D8               	btfss	status,2,c
 17017  005388  D006               	goto	i2l8631
 17018                           
 17019                           ; BSR set to: 1
 17020                           ;tmr3.c: 171: checkTCP = 1;
 17021  00538A  0E01               	movlw	1
 17022  00538C  6F48               	movwf	_checkTCP& (0+255),b
 17023                           
 17024                           ;tmr3.c: 172: tmr3Counter = 0;
 17025  00538E  0E00               	movlw	0
 17026  005390  6F34               	movwf	(_tmr3Counter+1)& (0+255),b
 17027  005392  0E00               	movlw	0
 17028  005394  6F33               	movwf	_tmr3Counter& (0+255),b
 17029  005396                     i2l8631:
 17030                           
 17031                           ; BSR set to: 1
 17032                           ;tmr3.c: 173: };tmr3.c: 175: if(TMR3_InterruptHandler)
 17033  005396  517F               	movf	_TMR3_InterruptHandler& (0+255),w,b
 17034  005398  1180               	iorwf	(_TMR3_InterruptHandler+1)& (0+255),w,b
 17035  00539A  B4D8               	btfsc	status,2,c
 17036  00539C  0012               	return	
 17037                           
 17038                           ; BSR set to: 1
 17039                           ;tmr3.c: 176: {;tmr3.c: 177: TMR3_InterruptHandler();
 17040  00539E  D801               	call	i2u927_48
 17041  0053A0  0012               	return	
 17042  0053A2                     i2u927_48:
 17043  0053A2  0005               	push	
 17044  0053A4  6EFA               	movwf	pclath,c
 17045  0053A6  517F               	movf	_TMR3_InterruptHandler& (0+255),w,b
 17046  0053A8  6EFD               	movwf	tosl,c
 17047  0053AA  5180               	movf	(_TMR3_InterruptHandler+1)& (0+255),w,b
 17048  0053AC  6EFE               	movwf	tosh,c
 17049  0053AE  50F8               	movf	tblptru,w,c
 17050  0053B0  6EFF               	movwf	tosu,c
 17051  0053B2  50FA               	movf	pclath,w,c
 17052  0053B4  0012               	return		;indir
 17053  0053B6                     __end_of_TMR3_ISR:
 17054                           	opt callstack 0
 17055                           
 17056 ;; *************** function _TMR3_WriteTimer *****************
 17057 ;; Defined at:
 17058 ;;		line 124 in file "mcc_generated_files/tmr3.c"
 17059 ;; Parameters:    Size  Location     Type
 17060 ;;  timerVal        2    0[COMRAM] unsigned int 
 17061 ;; Auto vars:     Size  Location     Type
 17062 ;;		None
 17063 ;; Return value:  Size  Location     Type
 17064 ;;                  1    wreg      void 
 17065 ;; Registers used:
 17066 ;;		wreg, status,2
 17067 ;; Tracked objects:
 17068 ;;		On entry : 0/0
 17069 ;;		On exit  : 0/0
 17070 ;;		Unchanged: 0/0
 17071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17072 ;;      Params:         2       0       0       0       0       0       0
 17073 ;;      Locals:         0       0       0       0       0       0       0
 17074 ;;      Temps:          0       0       0       0       0       0       0
 17075 ;;      Totals:         2       0       0       0       0       0       0
 17076 ;;Total ram usage:        2 bytes
 17077 ;; Hardware stack levels used:    1
 17078 ;; This function calls:
 17079 ;;		Nothing
 17080 ;; This function is called by:
 17081 ;;		_TMR3_ISR
 17082 ;;		_TMR3_Reload
 17083 ;; This function uses a non-reentrant model
 17084 ;;
 17085                           
 17086                           	psect	text93
 17087  0059AE                     __ptext93:
 17088                           	opt callstack 0
 17089  0059AE                     _TMR3_WriteTimer:
 17090                           	opt callstack 20
 17091                           
 17092                           ;tmr3.c: 126: if (T3CONbits.nT3SYNC == 1)
 17093                           
 17094                           ;incstack = 0
 17095  0059AE  A4B1               	btfss	4017,2,c	;volatile
 17096  0059B0  D007               	goto	i2l8287
 17097                           
 17098                           ;tmr3.c: 127: {;tmr3.c: 129: T3CONbits.TMR3ON = 0;
 17099  0059B2  90B1               	bcf	4017,0,c	;volatile
 17100                           
 17101                           ;tmr3.c: 132: TMR3H = (timerVal >> 8);
 17102  0059B4  5002               	movf	TMR3_WriteTimer@timerVal+1,w,c
 17103  0059B6  6EB3               	movwf	4019,c	;volatile
 17104                           
 17105                           ;tmr3.c: 133: TMR3L = (uint8_t) timerVal;
 17106  0059B8  C001  FFB2         	movff	TMR3_WriteTimer@timerVal,4018	;volatile
 17107                           
 17108                           ;tmr3.c: 136: T3CONbits.TMR3ON =1;
 17109  0059BC  80B1               	bsf	4017,0,c	;volatile
 17110                           
 17111                           ;tmr3.c: 137: }
 17112  0059BE  0012               	return	
 17113  0059C0                     i2l8287:
 17114                           
 17115                           ;tmr3.c: 138: else;tmr3.c: 139: {;tmr3.c: 141: TMR3H = (timerVal >> 8);
 17116  0059C0  5002               	movf	TMR3_WriteTimer@timerVal+1,w,c
 17117  0059C2  6EB3               	movwf	4019,c	;volatile
 17118                           
 17119                           ;tmr3.c: 142: TMR3L = (uint8_t) timerVal;
 17120  0059C4  C001  FFB2         	movff	TMR3_WriteTimer@timerVal,4018	;volatile
 17121  0059C8  0012               	return		;funcret
 17122  0059CA                     __end_of_TMR3_WriteTimer:
 17123                           	opt callstack 0
 17124                           
 17125 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 17126 ;; Defined at:
 17127 ;;		line 186 in file "mcc_generated_files/tmr3.c"
 17128 ;; Parameters:    Size  Location     Type
 17129 ;;		None
 17130 ;; Auto vars:     Size  Location     Type
 17131 ;;		None
 17132 ;; Return value:  Size  Location     Type
 17133 ;;                  1    wreg      void 
 17134 ;; Registers used:
 17135 ;;		None
 17136 ;; Tracked objects:
 17137 ;;		On entry : 0/0
 17138 ;;		On exit  : 0/0
 17139 ;;		Unchanged: 0/0
 17140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17141 ;;      Params:         0       0       0       0       0       0       0
 17142 ;;      Locals:         0       0       0       0       0       0       0
 17143 ;;      Temps:          0       0       0       0       0       0       0
 17144 ;;      Totals:         0       0       0       0       0       0       0
 17145 ;;Total ram usage:        0 bytes
 17146 ;; Hardware stack levels used:    1
 17147 ;; This function calls:
 17148 ;;		Nothing
 17149 ;; This function is called by:
 17150 ;;		_TMR3_Initialize
 17151 ;;		_TMR3_ISR
 17152 ;; This function uses a non-reentrant model
 17153 ;;
 17154                           
 17155                           	psect	text94
 17156  005B3C                     __ptext94:
 17157                           	opt callstack 0
 17158  005B3C                     _TMR3_DefaultInterruptHandler:
 17159                           	opt callstack 20
 17160                           
 17161                           ;incstack = 0
 17162  005B3C  0012               	return		;funcret
 17163  005B3E                     __end_of_TMR3_DefaultInterruptHandler:
 17164                           	opt callstack 0
 17165                           
 17166 ;; *************** function _I2C2_ISR *****************
 17167 ;; Defined at:
 17168 ;;		line 235 in file "mcc_generated_files/i2c2.c"
 17169 ;; Parameters:    Size  Location     Type
 17170 ;;		None
 17171 ;; Auto vars:     Size  Location     Type
 17172 ;;		None
 17173 ;; Return value:  Size  Location     Type
 17174 ;;                  1    wreg      void 
 17175 ;; Registers used:
 17176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17177 ;; Tracked objects:
 17178 ;;		On entry : 0/0
 17179 ;;		On exit  : 0/0
 17180 ;;		Unchanged: 0/0
 17181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17182 ;;      Params:         0       0       0       0       0       0       0
 17183 ;;      Locals:         0       0       0       0       0       0       0
 17184 ;;      Temps:          2       0       0       0       0       0       0
 17185 ;;      Totals:         2       0       0       0       0       0       0
 17186 ;;Total ram usage:        2 bytes
 17187 ;; Hardware stack levels used:    1
 17188 ;; Hardware stack levels required when called:    1
 17189 ;; This function calls:
 17190 ;;		_I2C2_FunctionComplete
 17191 ;;		_I2C2_Stop
 17192 ;; This function is called by:
 17193 ;;		_INTERRUPT_InterruptManager
 17194 ;; This function uses a non-reentrant model
 17195 ;;
 17196                           
 17197                           	psect	text95
 17198  003322                     __ptext95:
 17199                           	opt callstack 0
 17200  003322                     _I2C2_ISR:
 17201                           	opt callstack 20
 17202                           
 17203                           ;i2c2.c: 240: static uint8_t *pi2c_buf_ptr;;i2c2.c: 241: static uint16_t i2c_address = 0
      +                          ;;i2c2.c: 242: static uint8_t i2c_bytes_left = 0;;i2c2.c: 243: static uint8_t i2c_10bit_
      +                          address_restart = 0;;i2c2.c: 245: PIR3bits.SSP2IF = 0;
 17204                           
 17205                           ;incstack = 0
 17206  003322  9EA4               	bcf	4004,7,c	;volatile
 17207                           
 17208                           ;i2c2.c: 249: if(SSP2CON1bits.WCOL)
 17209  003324  AE6C               	btfss	3948,7,c	;volatile
 17210  003326  D100               	goto	i2l8619
 17211                           
 17212                           ;i2c2.c: 250: {;i2c2.c: 252: SSP2CON1bits.WCOL = 0;
 17213  003328  9E6C               	bcf	3948,7,c	;volatile
 17214                           
 17215                           ;i2c2.c: 253: i2c2_state = S_MASTER_IDLE;
 17216  00332A  0E00               	movlw	0
 17217  00332C  0100               	movlb	0	; () banked
 17218  00332E  6FF1               	movwf	_i2c2_state& (0+255),b
 17219                           
 17220                           ; BSR set to: 0
 17221                           ;i2c2.c: 254: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 17222  003330  0101               	movlb	1	; () banked
 17223  003332  EE20 F003          	lfsr	2,3
 17224  003336  513B               	movf	_p_i2c2_current& (0+255),w,b
 17225  003338  26D9               	addwf	fsr2l,f,c
 17226  00333A  513C               	movf	(_p_i2c2_current+1)& (0+255),w,b
 17227  00333C  22DA               	addwfc	fsr2h,f,c
 17228  00333E  CFDE F004          	movff	postinc2,??_I2C2_ISR
 17229  003342  CFDD F005          	movff	postdec2,??_I2C2_ISR+1
 17230  003346  C004  FFD9         	movff	??_I2C2_ISR,fsr2l
 17231  00334A  C005  FFDA         	movff	??_I2C2_ISR+1,fsr2h
 17232  00334E  0E01               	movlw	1
 17233  003350  6EDF               	movwf	indf2,c
 17234                           
 17235                           ; BSR set to: 1
 17236                           ;i2c2.c: 257: p_i2c2_current = (0);
 17237  003352  0E00               	movlw	0
 17238  003354  6F3B               	movwf	_p_i2c2_current& (0+255),b
 17239  003356  0E00               	movlw	0
 17240  003358  6F3C               	movwf	(_p_i2c2_current+1)& (0+255),b
 17241  00335A  0012               	return	
 17242  00335C                     i2l760:
 17243                           
 17244                           ; BSR set to: 0
 17245                           ;i2c2.c: 267: if(i2c2_object.trStatus.s.empty != 1)
 17246  00335C  0101               	movlb	1	; () banked
 17247  00335E  B30C               	btfsc	(_i2c2_object+4)& (0+255),1,b
 17248  003360  0012               	return	
 17249                           
 17250                           ; BSR set to: 1
 17251                           ;i2c2.c: 268: {;i2c2.c: 270: p_i2c2_current = i2c2_object.pTrHead;
 17252  003362  C10A  F13B         	movff	_i2c2_object+2,_p_i2c2_current
 17253  003366  C10B  F13C         	movff	_i2c2_object+3,_p_i2c2_current+1
 17254                           
 17255                           ; BSR set to: 1
 17256                           ;i2c2.c: 271: i2c2_trb_count = i2c2_object.pTrHead->count;
 17257  00336A  C10A  FFD9         	movff	_i2c2_object+2,fsr2l
 17258  00336E  C10B  FFDA         	movff	_i2c2_object+3,fsr2h
 17259  003372  50DF               	movf	indf2,w,c
 17260  003374  0100               	movlb	0	; () banked
 17261  003376  6FF0               	movwf	_i2c2_trb_count& (0+255),b
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;i2c2.c: 272: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 17265  003378  0101               	movlb	1	; () banked
 17266  00337A  EE20 F001          	lfsr	2,1
 17267  00337E  510A               	movf	(_i2c2_object+2)& (0+255),w,b
 17268  003380  26D9               	addwf	fsr2l,f,c
 17269  003382  510B               	movf	(_i2c2_object+3)& (0+255),w,b
 17270  003384  22DA               	addwfc	fsr2h,f,c
 17271  003386  CFDE F13D          	movff	postinc2,_p_i2c2_trb_current
 17272  00338A  CFDD F13E          	movff	postdec2,_p_i2c2_trb_current+1
 17273                           
 17274                           ; BSR set to: 1
 17275                           ;i2c2.c: 274: i2c2_object.pTrHead++;
 17276  00338E  0E05               	movlw	5
 17277  003390  270A               	addwf	(_i2c2_object+2)& (0+255),f,b
 17278  003392  0E00               	movlw	0
 17279  003394  230B               	addwfc	(_i2c2_object+3)& (0+255),f,b
 17280                           
 17281                           ; BSR set to: 1
 17282                           ;i2c2.c: 277: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 17283  003396  0E56               	movlw	low (_i2c2_tr_queue+5)
 17284  003398  190A               	xorwf	(_i2c2_object+2)& (0+255),w,b
 17285  00339A  E108               	bnz	i2l8511
 17286  00339C  0E01               	movlw	high (_i2c2_tr_queue+5)
 17287  00339E  190B               	xorwf	(_i2c2_object+3)& (0+255),w,b
 17288  0033A0  A4D8               	btfss	status,2,c
 17289  0033A2  D004               	goto	i2l8511
 17290                           
 17291                           ; BSR set to: 1
 17292                           ;i2c2.c: 278: {;i2c2.c: 280: i2c2_object.pTrHead = i2c2_tr_queue;
 17293  0033A4  0E51               	movlw	low _i2c2_tr_queue
 17294  0033A6  6F0A               	movwf	(_i2c2_object+2)& (0+255),b
 17295  0033A8  0E01               	movlw	high _i2c2_tr_queue
 17296  0033AA  6F0B               	movwf	(_i2c2_object+3)& (0+255),b
 17297  0033AC                     i2l8511:
 17298                           
 17299                           ; BSR set to: 1
 17300                           ;i2c2.c: 281: };i2c2.c: 285: i2c2_object.trStatus.s.full = 0;
 17301  0033AC  910C               	bcf	(_i2c2_object+4)& (0+255),0,b
 17302                           
 17303                           ;i2c2.c: 288: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 17304  0033AE  5108               	movf	_i2c2_object& (0+255),w,b
 17305  0033B0  190A               	xorwf	(_i2c2_object+2)& (0+255),w,b
 17306  0033B2  E104               	bnz	i2l763
 17307  0033B4  5109               	movf	(_i2c2_object+1)& (0+255),w,b
 17308  0033B6  190B               	xorwf	(_i2c2_object+3)& (0+255),w,b
 17309  0033B8  B4D8               	btfsc	status,2,c
 17310                           
 17311                           ; BSR set to: 1
 17312                           ;i2c2.c: 289: {;i2c2.c: 291: i2c2_object.trStatus.s.empty = 1;
 17313  0033BA  830C               	bsf	(_i2c2_object+4)& (0+255),1,b
 17314  0033BC                     i2l763:
 17315                           
 17316                           ; BSR set to: 1
 17317                           ;i2c2.c: 292: };i2c2.c: 295: SSP2CON2bits.SEN = 1;
 17318  0033BC  806B               	bsf	3947,0,c	;volatile
 17319  0033BE                     i2l8515:
 17320                           
 17321                           ;i2c2.c: 298: i2c2_state = S_MASTER_SEND_ADDR;
 17322  0033BE  0E02               	movlw	2
 17323  0033C0  0100               	movlb	0	; () banked
 17324  0033C2  6FF1               	movwf	_i2c2_state& (0+255),b
 17325  0033C4  0012               	return	
 17326  0033C6                     i2l766:
 17327                           
 17328                           ; BSR set to: 0
 17329                           ;i2c2.c: 317: if(SSP2CON2bits.ACKSTAT)
 17330  0033C6  AC6B               	btfss	3947,6,c	;volatile
 17331  0033C8  D006               	goto	i2l8523
 17332                           
 17333                           ; BSR set to: 0
 17334                           ;i2c2.c: 318: {;i2c2.c: 319: i2c2_object.i2cErrors++;
 17335  0033CA  0101               	movlb	1	; () banked
 17336  0033CC  2B0E               	incf	(_i2c2_object+6)& (0+255),f,b
 17337                           
 17338                           ; BSR set to: 1
 17339                           ;i2c2.c: 320: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 17340  0033CE  0E04               	movlw	4
 17341  0033D0  ECCB  F02A         	call	_I2C2_Stop
 17342                           
 17343                           ;i2c2.c: 321: }
 17344  0033D4  0012               	return	
 17345  0033D6                     i2l8523:
 17346                           
 17347                           ; BSR set to: 0
 17348                           ;i2c2.c: 322: else;i2c2.c: 323: {;i2c2.c: 325: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 17349  0033D6  90D8               	bcf	status,0,c
 17350  0033D8  303F               	rrcf	I2C2_ISR@i2c_address+1,w,c
 17351  0033DA  6E05               	movwf	(??_I2C2_ISR+1)& (0+255),c
 17352  0033DC  303E               	rrcf	I2C2_ISR@i2c_address,w,c
 17353  0033DE  6E04               	movwf	??_I2C2_ISR& (0+255),c
 17354  0033E0  5004               	movf	??_I2C2_ISR,w,c
 17355  0033E2  6E6F               	movwf	3951,c	;volatile
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;i2c2.c: 328: if(i2c_address & 0x01)
 17359  0033E4  A03E               	btfss	I2C2_ISR@i2c_address,0,c
 17360  0033E6  D003               	goto	i2l8529
 17361                           
 17362                           ; BSR set to: 0
 17363                           ;i2c2.c: 329: {;i2c2.c: 332: i2c2_state = S_MASTER_10BIT_RESTART;
 17364  0033E8  0E0B               	movlw	11
 17365  0033EA  6FF1               	movwf	_i2c2_state& (0+255),b
 17366                           
 17367                           ;i2c2.c: 333: }
 17368  0033EC  0012               	return	
 17369  0033EE                     i2l8529:
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;i2c2.c: 334: else;i2c2.c: 335: {;i2c2.c: 337: i2c2_state = S_MASTER_SEND_DATA;
 17373  0033EE  0E03               	movlw	3
 17374  0033F0  6FF1               	movwf	_i2c2_state& (0+255),b
 17375  0033F2  0012               	return	
 17376  0033F4                     i2l771:
 17377                           
 17378                           ; BSR set to: 0
 17379                           ;i2c2.c: 345: if(SSP2CON2bits.ACKSTAT)
 17380  0033F4  AC6B               	btfss	3947,6,c	;volatile
 17381  0033F6  D006               	goto	i2l772
 17382                           
 17383                           ; BSR set to: 0
 17384                           ;i2c2.c: 346: {;i2c2.c: 347: i2c2_object.i2cErrors++;
 17385  0033F8  0101               	movlb	1	; () banked
 17386  0033FA  2B0E               	incf	(_i2c2_object+6)& (0+255),f,b
 17387                           
 17388                           ; BSR set to: 1
 17389                           ;i2c2.c: 348: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 17390  0033FC  0E04               	movlw	4
 17391  0033FE  ECCB  F02A         	call	_I2C2_Stop
 17392                           
 17393                           ;i2c2.c: 349: }
 17394  003402  0012               	return	
 17395  003404                     i2l772:
 17396                           
 17397                           ; BSR set to: 0
 17398                           ;i2c2.c: 350: else;i2c2.c: 351: {;i2c2.c: 354: SSP2CON2bits.RSEN = 1;
 17399  003404  826B               	bsf	3947,1,c	;volatile
 17400                           
 17401                           ; BSR set to: 0
 17402                           ;i2c2.c: 358: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 17403  003406  C03E  F004         	movff	I2C2_ISR@i2c_address,??_I2C2_ISR
 17404  00340A  C03F  F005         	movff	I2C2_ISR@i2c_address+1,??_I2C2_ISR+1
 17405  00340E  C005  F004         	movff	??_I2C2_ISR+1,??_I2C2_ISR
 17406  003412  6A05               	clrf	??_I2C2_ISR+1,c
 17407  003414  0E06               	movlw	6
 17408  003416  1604               	andwf	??_I2C2_ISR,f,c
 17409  003418  0E00               	movlw	0
 17410  00341A  1605               	andwf	??_I2C2_ISR+1,f,c
 17411  00341C  0EF0               	movlw	240
 17412  00341E  1004               	iorwf	??_I2C2_ISR,w,c
 17413  003420  6E3E               	movwf	I2C2_ISR@i2c_address,c
 17414  003422  5005               	movf	??_I2C2_ISR+1,w,c
 17415  003424  6E3F               	movwf	I2C2_ISR@i2c_address+1,c
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;i2c2.c: 361: i2c_address |= 0x0001;
 17419  003426  803E               	bsf	I2C2_ISR@i2c_address,0,c
 17420                           
 17421                           ; BSR set to: 0
 17422                           ;i2c2.c: 364: i2c_10bit_address_restart = 1;
 17423  003428  0E01               	movlw	1
 17424  00342A  6FEE               	movwf	I2C2_ISR@i2c_10bit_address_restart& (0+255),b
 17425  00342C  D7C8               	goto	i2l8515
 17426  00342E                     i2l8543:
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;i2c2.c: 385: if(i2c_10bit_address_restart != 1)
 17430  00342E  05EE               	decf	I2C2_ISR@i2c_10bit_address_restart& (0+255),w,b
 17431  003430  B4D8               	btfsc	status,2,c
 17432  003432  D01C               	goto	i2l776
 17433                           
 17434                           ; BSR set to: 0
 17435                           ;i2c2.c: 386: {;i2c2.c: 388: i2c_address = p_i2c2_trb_current->address;
 17436  003434  C13D  FFD9         	movff	_p_i2c2_trb_current,fsr2l
 17437  003438  C13E  FFDA         	movff	_p_i2c2_trb_current+1,fsr2h
 17438  00343C  CFDE F03E          	movff	postinc2,I2C2_ISR@i2c_address
 17439  003440  CFDD F03F          	movff	postdec2,I2C2_ISR@i2c_address+1
 17440                           
 17441                           ; BSR set to: 0
 17442                           ;i2c2.c: 389: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 17443  003444  0101               	movlb	1	; () banked
 17444  003446  EE20 F003          	lfsr	2,3
 17445  00344A  513D               	movf	_p_i2c2_trb_current& (0+255),w,b
 17446  00344C  26D9               	addwf	fsr2l,f,c
 17447  00344E  513E               	movf	(_p_i2c2_trb_current+1)& (0+255),w,b
 17448  003450  22DA               	addwfc	fsr2h,f,c
 17449  003452  CFDE F139          	movff	postinc2,I2C2_ISR@pi2c_buf_ptr
 17450  003456  CFDD F13A          	movff	postdec2,I2C2_ISR@pi2c_buf_ptr+1
 17451                           
 17452                           ; BSR set to: 1
 17453                           ;i2c2.c: 390: i2c_bytes_left = p_i2c2_trb_current->length;
 17454  00345A  EE20 F002          	lfsr	2,2
 17455  00345E  513D               	movf	_p_i2c2_trb_current& (0+255),w,b
 17456  003460  26D9               	addwf	fsr2l,f,c
 17457  003462  513E               	movf	(_p_i2c2_trb_current+1)& (0+255),w,b
 17458  003464  22DA               	addwfc	fsr2h,f,c
 17459  003466  50DF               	movf	indf2,w,c
 17460  003468  0100               	movlb	0	; () banked
 17461  00346A  6FEF               	movwf	I2C2_ISR@i2c_bytes_left& (0+255),b
 17462  00346C                     i2l776:
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;i2c2.c: 413: else;i2c2.c: 414: {;i2c2.c: 416: SSP2BUF = i2c_address;
 17466  00346C  C03E  FF6F         	movff	I2C2_ISR@i2c_address,3951	;volatile
 17467                           
 17468                           ;i2c2.c: 417: if(i2c_address & 0x01)
 17469  003470  A03E               	btfss	I2C2_ISR@i2c_address,0,c
 17470  003472  D7BD               	goto	i2l8529
 17471                           
 17472                           ; BSR set to: 0
 17473                           ;i2c2.c: 418: {;i2c2.c: 420: i2c2_state = S_MASTER_ACK_ADDR;
 17474  003474  0E05               	movlw	5
 17475  003476  6FF1               	movwf	_i2c2_state& (0+255),b
 17476                           
 17477                           ;i2c2.c: 421: }
 17478  003478  0012               	return	
 17479  00347A                     i2l782:
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;i2c2.c: 433: if(SSP2CON2bits.ACKSTAT)
 17483  00347A  AC6B               	btfss	3947,6,c	;volatile
 17484  00347C  D007               	goto	i2l8571
 17485                           
 17486                           ; BSR set to: 0
 17487                           ;i2c2.c: 434: {;i2c2.c: 436: i2c2_object.i2cErrors++;
 17488  00347E  0101               	movlb	1	; () banked
 17489  003480  2B0E               	incf	(_i2c2_object+6)& (0+255),f,b
 17490                           
 17491                           ; BSR set to: 1
 17492                           ;i2c2.c: 439: SSP2CON2bits.ACKSTAT = 0;
 17493  003482  9C6B               	bcf	3947,6,c	;volatile
 17494                           
 17495                           ; BSR set to: 1
 17496                           ;i2c2.c: 442: I2C2_Stop(I2C2_DATA_NO_ACK);
 17497  003484  0E05               	movlw	5
 17498  003486  ECCB  F02A         	call	_I2C2_Stop
 17499                           
 17500                           ;i2c2.c: 444: }
 17501  00348A  0012               	return	
 17502  00348C                     i2l8571:
 17503                           
 17504                           ; BSR set to: 0
 17505                           ;i2c2.c: 445: else;i2c2.c: 446: {;i2c2.c: 448: if(i2c_bytes_left-- == 0U)
 17506  00348C  07EF               	decf	I2C2_ISR@i2c_bytes_left& (0+255),f,b
 17507  00348E  29EF               	incf	I2C2_ISR@i2c_bytes_left& (0+255),w,b
 17508  003490  A4D8               	btfss	status,2,c
 17509  003492  D00E               	goto	i2l8581
 17510                           
 17511                           ; BSR set to: 0
 17512                           ;i2c2.c: 449: {;i2c2.c: 453: p_i2c2_trb_current++;
 17513  003494  0E05               	movlw	5
 17514  003496  0101               	movlb	1	; () banked
 17515  003498  273D               	addwf	_p_i2c2_trb_current& (0+255),f,b
 17516  00349A  0E00               	movlw	0
 17517  00349C  233E               	addwfc	(_p_i2c2_trb_current+1)& (0+255),f,b
 17518                           
 17519                           ; BSR set to: 1
 17520                           ;i2c2.c: 456: if(--i2c2_trb_count == 0)
 17521  00349E  0100               	movlb	0	; () banked
 17522  0034A0  2FF0               	decfsz	_i2c2_trb_count& (0+255),f,b
 17523  0034A2  D004               	goto	i2l786
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;i2c2.c: 457: {;i2c2.c: 458: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 17527  0034A4  0E00               	movlw	0
 17528  0034A6  ECCB  F02A         	call	_I2C2_Stop
 17529                           
 17530                           ;i2c2.c: 459: }
 17531  0034AA  0012               	return	
 17532  0034AC                     i2l786:
 17533                           
 17534                           ; BSR set to: 0
 17535                           ;i2c2.c: 460: else;i2c2.c: 461: {;i2c2.c: 468: SSP2CON2bits.RSEN = 1;
 17536  0034AC  826B               	bsf	3947,1,c	;volatile
 17537  0034AE  D787               	goto	i2l8515
 17538  0034B0                     i2l8581:
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;i2c2.c: 475: else;i2c2.c: 476: {;i2c2.c: 478: SSP2BUF = *pi2c_buf_ptr++;
 17542  0034B0  C139  FFD9         	movff	I2C2_ISR@pi2c_buf_ptr,fsr2l
 17543  0034B4  C13A  FFDA         	movff	I2C2_ISR@pi2c_buf_ptr+1,fsr2h
 17544  0034B8  50DF               	movf	indf2,w,c
 17545  0034BA  6E6F               	movwf	3951,c	;volatile
 17546                           
 17547                           ; BSR set to: 0
 17548  0034BC  0101               	movlb	1	; () banked
 17549  0034BE  4B39               	infsnz	I2C2_ISR@pi2c_buf_ptr& (0+255),f,b
 17550  0034C0  2B3A               	incf	(I2C2_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 17551  0034C2  0012               	return	
 17552  0034C4                     i2l789:
 17553                           
 17554                           ; BSR set to: 0
 17555                           ;i2c2.c: 486: if(SSP2CON2bits.ACKSTAT)
 17556  0034C4  AC6B               	btfss	3947,6,c	;volatile
 17557  0034C6  D007               	goto	i2l790
 17558                           
 17559                           ; BSR set to: 0
 17560                           ;i2c2.c: 487: {;i2c2.c: 490: i2c2_object.i2cErrors++;
 17561  0034C8  0101               	movlb	1	; () banked
 17562  0034CA  2B0E               	incf	(_i2c2_object+6)& (0+255),f,b
 17563                           
 17564                           ; BSR set to: 1
 17565                           ;i2c2.c: 493: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 17566  0034CC  0E04               	movlw	4
 17567  0034CE  ECCB  F02A         	call	_I2C2_Stop
 17568                           
 17569                           ;i2c2.c: 496: SSP2CON2bits.ACKSTAT = 0;
 17570  0034D2  9C6B               	bcf	3947,6,c	;volatile
 17571                           
 17572                           ;i2c2.c: 497: }
 17573  0034D4  0012               	return	
 17574  0034D6                     i2l790:
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;i2c2.c: 498: else;i2c2.c: 499: {;i2c2.c: 500: SSP2CON2bits.RCEN = 1;
 17578  0034D6  866B               	bsf	3947,3,c	;volatile
 17579                           
 17580                           ; BSR set to: 0
 17581                           ;i2c2.c: 501: i2c2_state = S_MASTER_ACK_RCV_DATA;
 17582  0034D8  0E08               	movlw	8
 17583  0034DA  6FF1               	movwf	_i2c2_state& (0+255),b
 17584  0034DC  0012               	return	
 17585  0034DE                     i2l8593:
 17586                           
 17587                           ; BSR set to: 0
 17588                           ;i2c2.c: 510: i2c2_state = S_MASTER_ACK_RCV_DATA;
 17589  0034DE  0E08               	movlw	8
 17590  0034E0  6FF1               	movwf	_i2c2_state& (0+255),b
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;i2c2.c: 513: SSP2CON2bits.RCEN = 1;
 17594  0034E2  866B               	bsf	3947,3,c	;volatile
 17595                           
 17596                           ;i2c2.c: 515: break;
 17597  0034E4  0012               	return	
 17598  0034E6                     i2l8597:
 17599                           
 17600                           ; BSR set to: 0
 17601                           ;i2c2.c: 520: *pi2c_buf_ptr++ = SSP2BUF;
 17602  0034E6  C139  FFD9         	movff	I2C2_ISR@pi2c_buf_ptr,fsr2l
 17603  0034EA  C13A  FFDA         	movff	I2C2_ISR@pi2c_buf_ptr+1,fsr2h
 17604  0034EE  CF6F FFDF          	movff	3951,indf2	;volatile
 17605                           
 17606                           ; BSR set to: 0
 17607  0034F2  0101               	movlb	1	; () banked
 17608  0034F4  4B39               	infsnz	I2C2_ISR@pi2c_buf_ptr& (0+255),f,b
 17609  0034F6  2B3A               	incf	(I2C2_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 17610                           
 17611                           ; BSR set to: 1
 17612                           ;i2c2.c: 523: if(--i2c_bytes_left)
 17613  0034F8  0E01               	movlw	1
 17614  0034FA  0100               	movlb	0	; () banked
 17615  0034FC  5FEF               	subwf	I2C2_ISR@i2c_bytes_left& (0+255),f,b
 17616  0034FE  B4D8               	btfsc	status,2,c
 17617  003500  D004               	goto	i2l794
 17618                           
 17619                           ; BSR set to: 0
 17620                           ;i2c2.c: 524: {;i2c2.c: 530: SSP2CON2bits.ACKDT = 0;
 17621  003502  9A6B               	bcf	3947,5,c	;volatile
 17622                           
 17623                           ; BSR set to: 0
 17624                           ;i2c2.c: 533: i2c2_state = S_MASTER_RCV_DATA;
 17625  003504  0E06               	movlw	6
 17626  003506  6FF1               	movwf	_i2c2_state& (0+255),b
 17627                           
 17628                           ;i2c2.c: 534: }
 17629  003508  D003               	goto	i2l8609
 17630  00350A                     i2l794:
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;i2c2.c: 535: else;i2c2.c: 536: {;i2c2.c: 540: SSP2CON2bits.ACKDT = 1;
 17634  00350A  8A6B               	bsf	3947,5,c	;volatile
 17635                           
 17636                           ; BSR set to: 0
 17637                           ;i2c2.c: 542: I2C2_FunctionComplete();
 17638  00350C  ECE5  F02C         	call	_I2C2_FunctionComplete	;wreg free
 17639  003510                     i2l8609:
 17640                           
 17641                           ;i2c2.c: 543: };i2c2.c: 546: SSP2CON2bits.ACKEN = 1;
 17642  003510  886B               	bsf	3947,4,c	;volatile
 17643                           
 17644                           ;i2c2.c: 547: break;
 17645  003512  0012               	return	
 17646  003514                     i2l8611:
 17647                           
 17648                           ; BSR set to: 0
 17649                           ;i2c2.c: 550: case S_MASTER_SEND_STOP:;i2c2.c: 553: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 17650  003514  0E00               	movlw	0
 17651  003516  ECCB  F02A         	call	_I2C2_Stop
 17652                           
 17653                           ;i2c2.c: 554: break;
 17654  00351A  0012               	return	
 17655  00351C                     i2l8613:
 17656                           
 17657                           ; BSR set to: 0
 17658                           ;i2c2.c: 560: i2c2_object.i2cErrors++;
 17659  00351C  0101               	movlb	1	; () banked
 17660  00351E  2B0E               	incf	(_i2c2_object+6)& (0+255),f,b
 17661                           
 17662                           ; BSR set to: 1
 17663                           ;i2c2.c: 561: I2C2_Stop(I2C2_LOST_STATE);
 17664  003520  0E06               	movlw	6
 17665  003522  ECCB  F02A         	call	_I2C2_Stop
 17666                           
 17667                           ;i2c2.c: 562: break;
 17668  003526  0012               	return	
 17669  003528                     i2l8619:
 17670  003528  0100               	movlb	0	; () banked
 17671  00352A  51F1               	movf	_i2c2_state& (0+255),w,b
 17672                           
 17673                           ; Switch size 1, requested type "simple"
 17674                           ; Number of cases is 11, Range of values is 0 to 11
 17675                           ; switch strategies available:
 17676                           ; Name         Instructions Cycles
 17677                           ; simple_byte           34    18 (average)
 17678                           ;	Chosen strategy is simple_byte
 17679  00352C  0A00               	xorlw	0	; case 0
 17680  00352E  B4D8               	btfsc	status,2,c
 17681  003530  D715               	goto	i2l760
 17682  003532  0A01               	xorlw	1	; case 1
 17683  003534  B4D8               	btfsc	status,2,c
 17684  003536  D7BA               	goto	i2l786
 17685  003538  0A03               	xorlw	3	; case 2
 17686  00353A  B4D8               	btfsc	status,2,c
 17687  00353C  D778               	goto	i2l8543
 17688  00353E  0A01               	xorlw	1	; case 3
 17689  003540  B4D8               	btfsc	status,2,c
 17690  003542  D79B               	goto	i2l782
 17691  003544  0A07               	xorlw	7	; case 4
 17692  003546  B4D8               	btfsc	status,2,c
 17693  003548  D7E5               	goto	i2l8611
 17694  00354A  0A01               	xorlw	1	; case 5
 17695  00354C  B4D8               	btfsc	status,2,c
 17696  00354E  D7BA               	goto	i2l789
 17697  003550  0A03               	xorlw	3	; case 6
 17698  003552  B4D8               	btfsc	status,2,c
 17699  003554  D7C4               	goto	i2l8593
 17700  003556  0A01               	xorlw	1	; case 7
 17701  003558  B4D8               	btfsc	status,2,c
 17702  00355A  D7DC               	goto	i2l8611
 17703  00355C  0A0F               	xorlw	15	; case 8
 17704  00355E  B4D8               	btfsc	status,2,c
 17705  003560  D7C2               	goto	i2l8597
 17706  003562  0A02               	xorlw	2	; case 10
 17707  003564  B4D8               	btfsc	status,2,c
 17708  003566  D72F               	goto	i2l766
 17709  003568  0A01               	xorlw	1	; case 11
 17710  00356A  B4D8               	btfsc	status,2,c
 17711  00356C  D743               	goto	i2l771
 17712  00356E  D7D6               	goto	i2l8613
 17713  003570                     __end_of_I2C2_ISR:
 17714                           	opt callstack 0
 17715                           
 17716 ;; *************** function _I2C2_Stop *****************
 17717 ;; Defined at:
 17718 ;;		line 585 in file "mcc_generated_files/i2c2.c"
 17719 ;; Parameters:    Size  Location     Type
 17720 ;;  completion_c    1    wreg     enum E5843
 17721 ;; Auto vars:     Size  Location     Type
 17722 ;;  completion_c    1    2[COMRAM] enum E5843
 17723 ;; Return value:  Size  Location     Type
 17724 ;;                  1    wreg      void 
 17725 ;; Registers used:
 17726 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17727 ;; Tracked objects:
 17728 ;;		On entry : 0/0
 17729 ;;		On exit  : 0/0
 17730 ;;		Unchanged: 0/0
 17731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17732 ;;      Params:         0       0       0       0       0       0       0
 17733 ;;      Locals:         1       0       0       0       0       0       0
 17734 ;;      Temps:          2       0       0       0       0       0       0
 17735 ;;      Totals:         3       0       0       0       0       0       0
 17736 ;;Total ram usage:        3 bytes
 17737 ;; Hardware stack levels used:    1
 17738 ;; This function calls:
 17739 ;;		Nothing
 17740 ;; This function is called by:
 17741 ;;		_I2C2_ISR
 17742 ;; This function uses a non-reentrant model
 17743 ;;
 17744                           
 17745                           	psect	text96
 17746  005596                     __ptext96:
 17747                           	opt callstack 0
 17748  005596                     _I2C2_Stop:
 17749                           	opt callstack 20
 17750                           
 17751                           ;incstack = 0
 17752                           ;I2C2_Stop@completion_code stored from wreg
 17753  005596  6E03               	movwf	I2C2_Stop@completion_code,c
 17754                           
 17755                           ;i2c2.c: 588: SSP2CON2bits.PEN = 1;
 17756  005598  846B               	bsf	3947,2,c	;volatile
 17757                           
 17758                           ;i2c2.c: 591: if (p_i2c2_current->pTrFlag != (0))
 17759  00559A  0101               	movlb	1	; () banked
 17760  00559C  EE20 F003          	lfsr	2,3
 17761  0055A0  513B               	movf	_p_i2c2_current& (0+255),w,b
 17762  0055A2  26D9               	addwf	fsr2l,f,c
 17763  0055A4  513C               	movf	(_p_i2c2_current+1)& (0+255),w,b
 17764  0055A6  22DA               	addwfc	fsr2h,f,c
 17765  0055A8  50DE               	movf	postinc2,w,c
 17766  0055AA  10DE               	iorwf	postinc2,w,c
 17767  0055AC  B4D8               	btfsc	status,2,c
 17768  0055AE  D010               	goto	i2l8065
 17769                           
 17770                           ; BSR set to: 1
 17771                           ;i2c2.c: 592: {;i2c2.c: 594: *(p_i2c2_current->pTrFlag) = completion_code;
 17772  0055B0  EE20 F003          	lfsr	2,3
 17773  0055B4  513B               	movf	_p_i2c2_current& (0+255),w,b
 17774  0055B6  26D9               	addwf	fsr2l,f,c
 17775  0055B8  513C               	movf	(_p_i2c2_current+1)& (0+255),w,b
 17776  0055BA  22DA               	addwfc	fsr2h,f,c
 17777  0055BC  CFDE F001          	movff	postinc2,??_I2C2_Stop
 17778  0055C0  CFDD F002          	movff	postdec2,??_I2C2_Stop+1
 17779  0055C4  C001  FFD9         	movff	??_I2C2_Stop,fsr2l
 17780  0055C8  C002  FFDA         	movff	??_I2C2_Stop+1,fsr2h
 17781  0055CC  C003  FFDF         	movff	I2C2_Stop@completion_code,indf2
 17782  0055D0                     i2l8065:
 17783                           
 17784                           ; BSR set to: 1
 17785                           ;i2c2.c: 595: };i2c2.c: 598: i2c2_state = S_MASTER_IDLE;
 17786  0055D0  0E00               	movlw	0
 17787  0055D2  0100               	movlb	0	; () banked
 17788  0055D4  6FF1               	movwf	_i2c2_state& (0+255),b
 17789                           
 17790                           ; BSR set to: 0
 17791  0055D6  0012               	return		;funcret
 17792  0055D8                     __end_of_I2C2_Stop:
 17793                           	opt callstack 0
 17794                           
 17795 ;; *************** function _I2C2_FunctionComplete *****************
 17796 ;; Defined at:
 17797 ;;		line 567 in file "mcc_generated_files/i2c2.c"
 17798 ;; Parameters:    Size  Location     Type
 17799 ;;		None
 17800 ;; Auto vars:     Size  Location     Type
 17801 ;;		None
 17802 ;; Return value:  Size  Location     Type
 17803 ;;                  1    wreg      void 
 17804 ;; Registers used:
 17805 ;;		wreg, status,2, status,0
 17806 ;; Tracked objects:
 17807 ;;		On entry : 0/0
 17808 ;;		On exit  : 0/0
 17809 ;;		Unchanged: 0/0
 17810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17811 ;;      Params:         0       0       0       0       0       0       0
 17812 ;;      Locals:         0       0       0       0       0       0       0
 17813 ;;      Temps:          0       0       0       0       0       0       0
 17814 ;;      Totals:         0       0       0       0       0       0       0
 17815 ;;Total ram usage:        0 bytes
 17816 ;; Hardware stack levels used:    1
 17817 ;; This function calls:
 17818 ;;		Nothing
 17819 ;; This function is called by:
 17820 ;;		_I2C2_ISR
 17821 ;; This function uses a non-reentrant model
 17822 ;;
 17823                           
 17824                           	psect	text97
 17825  0059CA                     __ptext97:
 17826                           	opt callstack 0
 17827  0059CA                     _I2C2_FunctionComplete:
 17828                           	opt callstack 20
 17829                           
 17830                           ;i2c2.c: 571: p_i2c2_trb_current++;
 17831                           
 17832                           ; BSR set to: 0
 17833                           ;incstack = 0
 17834  0059CA  0E05               	movlw	5
 17835  0059CC  0101               	movlb	1	; () banked
 17836  0059CE  273D               	addwf	_p_i2c2_trb_current& (0+255),f,b
 17837  0059D0  0E00               	movlw	0
 17838  0059D2  233E               	addwfc	(_p_i2c2_trb_current+1)& (0+255),f,b
 17839                           
 17840                           ; BSR set to: 1
 17841                           ;i2c2.c: 574: if(--i2c2_trb_count == 0)
 17842  0059D4  0100               	movlb	0	; () banked
 17843  0059D6  2FF0               	decfsz	_i2c2_trb_count& (0+255),f,b
 17844  0059D8  D003               	goto	i2l8073
 17845                           
 17846                           ; BSR set to: 0
 17847                           ;i2c2.c: 575: {;i2c2.c: 576: i2c2_state = S_MASTER_SEND_STOP;
 17848  0059DA  0E04               	movlw	4
 17849  0059DC  6FF1               	movwf	_i2c2_state& (0+255),b
 17850                           
 17851                           ;i2c2.c: 577: }
 17852  0059DE  0012               	return	
 17853  0059E0                     i2l8073:
 17854                           
 17855                           ; BSR set to: 0
 17856                           ;i2c2.c: 578: else;i2c2.c: 579: {;i2c2.c: 580: i2c2_state = S_MASTER_RESTART;
 17857  0059E0  0E01               	movlw	1
 17858  0059E2  6FF1               	movwf	_i2c2_state& (0+255),b
 17859                           
 17860                           ; BSR set to: 0
 17861  0059E4  0012               	return		;funcret
 17862  0059E6                     __end_of_I2C2_FunctionComplete:
 17863                           	opt callstack 0
 17864                           
 17865 ;; *************** function _I2C2_BusCollisionISR *****************
 17866 ;; Defined at:
 17867 ;;		line 744 in file "mcc_generated_files/i2c2.c"
 17868 ;; Parameters:    Size  Location     Type
 17869 ;;		None
 17870 ;; Auto vars:     Size  Location     Type
 17871 ;;		None
 17872 ;; Return value:  Size  Location     Type
 17873 ;;                  1    wreg      void 
 17874 ;; Registers used:
 17875 ;;		None
 17876 ;; Tracked objects:
 17877 ;;		On entry : 0/0
 17878 ;;		On exit  : 0/0
 17879 ;;		Unchanged: 0/0
 17880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17881 ;;      Params:         0       0       0       0       0       0       0
 17882 ;;      Locals:         0       0       0       0       0       0       0
 17883 ;;      Temps:          0       0       0       0       0       0       0
 17884 ;;      Totals:         0       0       0       0       0       0       0
 17885 ;;Total ram usage:        0 bytes
 17886 ;; Hardware stack levels used:    1
 17887 ;; This function calls:
 17888 ;;		Nothing
 17889 ;; This function is called by:
 17890 ;;		_INTERRUPT_InterruptManager
 17891 ;; This function uses a non-reentrant model
 17892 ;;
 17893                           
 17894                           	psect	text98
 17895  005B2E                     __ptext98:
 17896                           	opt callstack 0
 17897  005B2E                     _I2C2_BusCollisionISR:
 17898                           	opt callstack 21
 17899                           
 17900                           ;i2c2.c: 747: PIR3bits.BCL2IF = 0;
 17901                           
 17902                           ; BSR set to: 0
 17903                           ;incstack = 0
 17904  005B2E  9CA4               	bcf	4004,6,c	;volatile
 17905  005B30  0012               	return		;funcret
 17906  005B32                     __end_of_I2C2_BusCollisionISR:
 17907                           	opt callstack 0
 17908                           
 17909 ;; *************** function _I2C1_ISR *****************
 17910 ;; Defined at:
 17911 ;;		line 235 in file "mcc_generated_files/i2c1.c"
 17912 ;; Parameters:    Size  Location     Type
 17913 ;;		None
 17914 ;; Auto vars:     Size  Location     Type
 17915 ;;		None
 17916 ;; Return value:  Size  Location     Type
 17917 ;;                  1    wreg      void 
 17918 ;; Registers used:
 17919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17920 ;; Tracked objects:
 17921 ;;		On entry : 0/0
 17922 ;;		On exit  : 0/0
 17923 ;;		Unchanged: 0/0
 17924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17925 ;;      Params:         0       0       0       0       0       0       0
 17926 ;;      Locals:         0       0       0       0       0       0       0
 17927 ;;      Temps:          2       0       0       0       0       0       0
 17928 ;;      Totals:         2       0       0       0       0       0       0
 17929 ;;Total ram usage:        2 bytes
 17930 ;; Hardware stack levels used:    1
 17931 ;; Hardware stack levels required when called:    1
 17932 ;; This function calls:
 17933 ;;		_I2C1_FunctionComplete
 17934 ;;		_I2C1_Stop
 17935 ;; This function is called by:
 17936 ;;		_INTERRUPT_InterruptManager
 17937 ;; This function uses a non-reentrant model
 17938 ;;
 17939                           
 17940                           	psect	text99
 17941  003570                     __ptext99:
 17942                           	opt callstack 0
 17943  003570                     _I2C1_ISR:
 17944                           	opt callstack 20
 17945                           
 17946                           ;i2c1.c: 238: static uint8_t *pi2c_buf_ptr;;i2c1.c: 239: static uint16_t i2c_address = 0
      +                          ;;i2c1.c: 240: static uint8_t i2c_bytes_left = 0;;i2c1.c: 241: static uint8_t i2c_10bit_
      +                          address_restart = 0;;i2c1.c: 243: PIR1bits.SSP1IF = 0;
 17947                           
 17948                           ;incstack = 0
 17949  003570  969E               	bcf	3998,3,c	;volatile
 17950                           
 17951                           ;i2c1.c: 247: if(SSP1CON1bits.WCOL)
 17952  003572  AEC6               	btfss	4038,7,c	;volatile
 17953  003574  D100               	goto	i2l8483
 17954                           
 17955                           ;i2c1.c: 248: {;i2c1.c: 250: SSP1CON1bits.WCOL = 0;
 17956  003576  9EC6               	bcf	4038,7,c	;volatile
 17957                           
 17958                           ;i2c1.c: 251: i2c1_state = S_MASTER_IDLE;
 17959  003578  0E00               	movlw	0
 17960  00357A  0100               	movlb	0	; () banked
 17961  00357C  6FF5               	movwf	_i2c1_state& (0+255),b
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;i2c1.c: 252: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 17965  00357E  0101               	movlb	1	; () banked
 17966  003580  EE20 F003          	lfsr	2,3
 17967  003584  5141               	movf	_p_i2c1_current& (0+255),w,b
 17968  003586  26D9               	addwf	fsr2l,f,c
 17969  003588  5142               	movf	(_p_i2c1_current+1)& (0+255),w,b
 17970  00358A  22DA               	addwfc	fsr2h,f,c
 17971  00358C  CFDE F004          	movff	postinc2,??_I2C1_ISR
 17972  003590  CFDD F005          	movff	postdec2,??_I2C1_ISR+1
 17973  003594  C004  FFD9         	movff	??_I2C1_ISR,fsr2l
 17974  003598  C005  FFDA         	movff	??_I2C1_ISR+1,fsr2h
 17975  00359C  0E01               	movlw	1
 17976  00359E  6EDF               	movwf	indf2,c
 17977                           
 17978                           ; BSR set to: 1
 17979                           ;i2c1.c: 255: p_i2c1_current = (0);
 17980  0035A0  0E00               	movlw	0
 17981  0035A2  6F41               	movwf	_p_i2c1_current& (0+255),b
 17982  0035A4  0E00               	movlw	0
 17983  0035A6  6F42               	movwf	(_p_i2c1_current+1)& (0+255),b
 17984  0035A8  0012               	return	
 17985  0035AA                     i2l610:
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;i2c1.c: 265: if(i2c1_object.trStatus.s.empty != 1)
 17989  0035AA  0101               	movlb	1	; () banked
 17990  0035AC  B313               	btfsc	(_i2c1_object+4)& (0+255),1,b
 17991  0035AE  0012               	return	
 17992                           
 17993                           ; BSR set to: 1
 17994                           ;i2c1.c: 266: {;i2c1.c: 268: p_i2c1_current = i2c1_object.pTrHead;
 17995  0035B0  C111  F141         	movff	_i2c1_object+2,_p_i2c1_current
 17996  0035B4  C112  F142         	movff	_i2c1_object+3,_p_i2c1_current+1
 17997                           
 17998                           ; BSR set to: 1
 17999                           ;i2c1.c: 269: i2c1_trb_count = i2c1_object.pTrHead->count;
 18000  0035B8  C111  FFD9         	movff	_i2c1_object+2,fsr2l
 18001  0035BC  C112  FFDA         	movff	_i2c1_object+3,fsr2h
 18002  0035C0  50DF               	movf	indf2,w,c
 18003  0035C2  0100               	movlb	0	; () banked
 18004  0035C4  6FF4               	movwf	_i2c1_trb_count& (0+255),b
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;i2c1.c: 270: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 18008  0035C6  0101               	movlb	1	; () banked
 18009  0035C8  EE20 F001          	lfsr	2,1
 18010  0035CC  5111               	movf	(_i2c1_object+2)& (0+255),w,b
 18011  0035CE  26D9               	addwf	fsr2l,f,c
 18012  0035D0  5112               	movf	(_i2c1_object+3)& (0+255),w,b
 18013  0035D2  22DA               	addwfc	fsr2h,f,c
 18014  0035D4  CFDE F143          	movff	postinc2,_p_i2c1_trb_current
 18015  0035D8  CFDD F144          	movff	postdec2,_p_i2c1_trb_current+1
 18016                           
 18017                           ; BSR set to: 1
 18018                           ;i2c1.c: 272: i2c1_object.pTrHead++;
 18019  0035DC  0E05               	movlw	5
 18020  0035DE  2711               	addwf	(_i2c1_object+2)& (0+255),f,b
 18021  0035E0  0E00               	movlw	0
 18022  0035E2  2312               	addwfc	(_i2c1_object+3)& (0+255),f,b
 18023                           
 18024                           ; BSR set to: 1
 18025                           ;i2c1.c: 275: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 18026  0035E4  0E65               	movlw	low (_i2c1_tr_queue+5)
 18027  0035E6  1911               	xorwf	(_i2c1_object+2)& (0+255),w,b
 18028  0035E8  E108               	bnz	i2l8375
 18029  0035EA  0E01               	movlw	high (_i2c1_tr_queue+5)
 18030  0035EC  1912               	xorwf	(_i2c1_object+3)& (0+255),w,b
 18031  0035EE  A4D8               	btfss	status,2,c
 18032  0035F0  D004               	goto	i2l8375
 18033                           
 18034                           ; BSR set to: 1
 18035                           ;i2c1.c: 276: {;i2c1.c: 278: i2c1_object.pTrHead = i2c1_tr_queue;
 18036  0035F2  0E60               	movlw	low _i2c1_tr_queue
 18037  0035F4  6F11               	movwf	(_i2c1_object+2)& (0+255),b
 18038  0035F6  0E01               	movlw	high _i2c1_tr_queue
 18039  0035F8  6F12               	movwf	(_i2c1_object+3)& (0+255),b
 18040  0035FA                     i2l8375:
 18041                           
 18042                           ; BSR set to: 1
 18043                           ;i2c1.c: 279: };i2c1.c: 283: i2c1_object.trStatus.s.full = 0;
 18044  0035FA  9113               	bcf	(_i2c1_object+4)& (0+255),0,b
 18045                           
 18046                           ;i2c1.c: 286: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 18047  0035FC  510F               	movf	_i2c1_object& (0+255),w,b
 18048  0035FE  1911               	xorwf	(_i2c1_object+2)& (0+255),w,b
 18049  003600  E104               	bnz	i2l613
 18050  003602  5110               	movf	(_i2c1_object+1)& (0+255),w,b
 18051  003604  1912               	xorwf	(_i2c1_object+3)& (0+255),w,b
 18052  003606  B4D8               	btfsc	status,2,c
 18053                           
 18054                           ; BSR set to: 1
 18055                           ;i2c1.c: 287: {;i2c1.c: 289: i2c1_object.trStatus.s.empty = 1;
 18056  003608  8313               	bsf	(_i2c1_object+4)& (0+255),1,b
 18057  00360A                     i2l613:
 18058                           
 18059                           ; BSR set to: 1
 18060                           ;i2c1.c: 290: };i2c1.c: 293: SSP1CON2bits.SEN = 1;
 18061  00360A  80C5               	bsf	4037,0,c	;volatile
 18062  00360C                     i2l8379:
 18063                           
 18064                           ;i2c1.c: 296: i2c1_state = S_MASTER_SEND_ADDR;
 18065  00360C  0E02               	movlw	2
 18066  00360E  0100               	movlb	0	; () banked
 18067  003610  6FF5               	movwf	_i2c1_state& (0+255),b
 18068  003612  0012               	return	
 18069  003614                     i2l616:
 18070                           
 18071                           ; BSR set to: 0
 18072                           ;i2c1.c: 315: if(SSP1CON2bits.ACKSTAT)
 18073  003614  ACC5               	btfss	4037,6,c	;volatile
 18074  003616  D006               	goto	i2l8387
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;i2c1.c: 316: {;i2c1.c: 317: i2c1_object.i2cErrors++;
 18078  003618  0101               	movlb	1	; () banked
 18079  00361A  2B15               	incf	(_i2c1_object+6)& (0+255),f,b
 18080                           
 18081                           ; BSR set to: 1
 18082                           ;i2c1.c: 318: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 18083  00361C  0E04               	movlw	4
 18084  00361E  ECEC  F02A         	call	_I2C1_Stop
 18085                           
 18086                           ;i2c1.c: 319: }
 18087  003622  0012               	return	
 18088  003624                     i2l8387:
 18089                           
 18090                           ; BSR set to: 0
 18091                           ;i2c1.c: 320: else;i2c1.c: 321: {;i2c1.c: 323: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 18092  003624  90D8               	bcf	status,0,c
 18093  003626  3041               	rrcf	I2C1_ISR@i2c_address+1,w,c
 18094  003628  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
 18095  00362A  3040               	rrcf	I2C1_ISR@i2c_address,w,c
 18096  00362C  6E04               	movwf	??_I2C1_ISR& (0+255),c
 18097  00362E  5004               	movf	??_I2C1_ISR,w,c
 18098  003630  6EC9               	movwf	4041,c	;volatile
 18099                           
 18100                           ; BSR set to: 0
 18101                           ;i2c1.c: 326: if(i2c_address & 0x01)
 18102  003632  A040               	btfss	I2C1_ISR@i2c_address,0,c
 18103  003634  D003               	goto	i2l8393
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;i2c1.c: 327: {;i2c1.c: 330: i2c1_state = S_MASTER_10BIT_RESTART;
 18107  003636  0E0B               	movlw	11
 18108  003638  6FF5               	movwf	_i2c1_state& (0+255),b
 18109                           
 18110                           ;i2c1.c: 331: }
 18111  00363A  0012               	return	
 18112  00363C                     i2l8393:
 18113                           
 18114                           ; BSR set to: 0
 18115                           ;i2c1.c: 332: else;i2c1.c: 333: {;i2c1.c: 335: i2c1_state = S_MASTER_SEND_DATA;
 18116  00363C  0E03               	movlw	3
 18117  00363E  6FF5               	movwf	_i2c1_state& (0+255),b
 18118  003640  0012               	return	
 18119  003642                     i2l621:
 18120                           
 18121                           ; BSR set to: 0
 18122                           ;i2c1.c: 343: if(SSP1CON2bits.ACKSTAT)
 18123  003642  ACC5               	btfss	4037,6,c	;volatile
 18124  003644  D006               	goto	i2l622
 18125                           
 18126                           ; BSR set to: 0
 18127                           ;i2c1.c: 344: {;i2c1.c: 345: i2c1_object.i2cErrors++;
 18128  003646  0101               	movlb	1	; () banked
 18129  003648  2B15               	incf	(_i2c1_object+6)& (0+255),f,b
 18130                           
 18131                           ; BSR set to: 1
 18132                           ;i2c1.c: 346: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 18133  00364A  0E04               	movlw	4
 18134  00364C  ECEC  F02A         	call	_I2C1_Stop
 18135                           
 18136                           ;i2c1.c: 347: }
 18137  003650  0012               	return	
 18138  003652                     i2l622:
 18139                           
 18140                           ; BSR set to: 0
 18141                           ;i2c1.c: 348: else;i2c1.c: 349: {;i2c1.c: 352: SSP1CON2bits.RSEN = 1;
 18142  003652  82C5               	bsf	4037,1,c	;volatile
 18143                           
 18144                           ; BSR set to: 0
 18145                           ;i2c1.c: 356: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 18146  003654  C040  F004         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
 18147  003658  C041  F005         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
 18148  00365C  C005  F004         	movff	??_I2C1_ISR+1,??_I2C1_ISR
 18149  003660  6A05               	clrf	??_I2C1_ISR+1,c
 18150  003662  0E06               	movlw	6
 18151  003664  1604               	andwf	??_I2C1_ISR,f,c
 18152  003666  0E00               	movlw	0
 18153  003668  1605               	andwf	??_I2C1_ISR+1,f,c
 18154  00366A  0EF0               	movlw	240
 18155  00366C  1004               	iorwf	??_I2C1_ISR,w,c
 18156  00366E  6E40               	movwf	I2C1_ISR@i2c_address,c
 18157  003670  5005               	movf	??_I2C1_ISR+1,w,c
 18158  003672  6E41               	movwf	I2C1_ISR@i2c_address+1,c
 18159                           
 18160                           ; BSR set to: 0
 18161                           ;i2c1.c: 359: i2c_address |= 0x0001;
 18162  003674  8040               	bsf	I2C1_ISR@i2c_address,0,c
 18163                           
 18164                           ; BSR set to: 0
 18165                           ;i2c1.c: 362: i2c_10bit_address_restart = 1;
 18166  003676  0E01               	movlw	1
 18167  003678  6FF2               	movwf	I2C1_ISR@i2c_10bit_address_restart& (0+255),b
 18168  00367A  D7C8               	goto	i2l8379
 18169  00367C                     i2l8407:
 18170                           
 18171                           ; BSR set to: 0
 18172                           ;i2c1.c: 383: if(i2c_10bit_address_restart != 1)
 18173  00367C  05F2               	decf	I2C1_ISR@i2c_10bit_address_restart& (0+255),w,b
 18174  00367E  B4D8               	btfsc	status,2,c
 18175  003680  D01C               	goto	i2l626
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;i2c1.c: 384: {;i2c1.c: 386: i2c_address = p_i2c1_trb_current->address;
 18179  003682  C143  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 18180  003686  C144  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 18181  00368A  CFDE F040          	movff	postinc2,I2C1_ISR@i2c_address
 18182  00368E  CFDD F041          	movff	postdec2,I2C1_ISR@i2c_address+1
 18183                           
 18184                           ; BSR set to: 0
 18185                           ;i2c1.c: 387: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 18186  003692  0101               	movlb	1	; () banked
 18187  003694  EE20 F003          	lfsr	2,3
 18188  003698  5143               	movf	_p_i2c1_trb_current& (0+255),w,b
 18189  00369A  26D9               	addwf	fsr2l,f,c
 18190  00369C  5144               	movf	(_p_i2c1_trb_current+1)& (0+255),w,b
 18191  00369E  22DA               	addwfc	fsr2h,f,c
 18192  0036A0  CFDE F13F          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 18193  0036A4  CFDD F140          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 18194                           
 18195                           ; BSR set to: 1
 18196                           ;i2c1.c: 388: i2c_bytes_left = p_i2c1_trb_current->length;
 18197  0036A8  EE20 F002          	lfsr	2,2
 18198  0036AC  5143               	movf	_p_i2c1_trb_current& (0+255),w,b
 18199  0036AE  26D9               	addwf	fsr2l,f,c
 18200  0036B0  5144               	movf	(_p_i2c1_trb_current+1)& (0+255),w,b
 18201  0036B2  22DA               	addwfc	fsr2h,f,c
 18202  0036B4  50DF               	movf	indf2,w,c
 18203  0036B6  0100               	movlb	0	; () banked
 18204  0036B8  6FF3               	movwf	I2C1_ISR@i2c_bytes_left& (0+255),b
 18205  0036BA                     i2l626:
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;i2c1.c: 411: else;i2c1.c: 412: {;i2c1.c: 414: SSP1BUF = i2c_address;
 18209  0036BA  C040  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
 18210                           
 18211                           ;i2c1.c: 415: if(i2c_address & 0x01)
 18212  0036BE  A040               	btfss	I2C1_ISR@i2c_address,0,c
 18213  0036C0  D7BD               	goto	i2l8393
 18214                           
 18215                           ; BSR set to: 0
 18216                           ;i2c1.c: 416: {;i2c1.c: 418: i2c1_state = S_MASTER_ACK_ADDR;
 18217  0036C2  0E05               	movlw	5
 18218  0036C4  6FF5               	movwf	_i2c1_state& (0+255),b
 18219                           
 18220                           ;i2c1.c: 419: }
 18221  0036C6  0012               	return	
 18222  0036C8                     i2l632:
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;i2c1.c: 431: if(SSP1CON2bits.ACKSTAT)
 18226  0036C8  ACC5               	btfss	4037,6,c	;volatile
 18227  0036CA  D007               	goto	i2l8435
 18228                           
 18229                           ; BSR set to: 0
 18230                           ;i2c1.c: 432: {;i2c1.c: 434: i2c1_object.i2cErrors++;
 18231  0036CC  0101               	movlb	1	; () banked
 18232  0036CE  2B15               	incf	(_i2c1_object+6)& (0+255),f,b
 18233                           
 18234                           ; BSR set to: 1
 18235                           ;i2c1.c: 437: SSP1CON2bits.ACKSTAT = 0;
 18236  0036D0  9CC5               	bcf	4037,6,c	;volatile
 18237                           
 18238                           ; BSR set to: 1
 18239                           ;i2c1.c: 440: I2C1_Stop(I2C1_DATA_NO_ACK);
 18240  0036D2  0E05               	movlw	5
 18241  0036D4  ECEC  F02A         	call	_I2C1_Stop
 18242                           
 18243                           ;i2c1.c: 442: }
 18244  0036D8  0012               	return	
 18245  0036DA                     i2l8435:
 18246                           
 18247                           ; BSR set to: 0
 18248                           ;i2c1.c: 443: else;i2c1.c: 444: {;i2c1.c: 446: if(i2c_bytes_left-- == 0U)
 18249  0036DA  07F3               	decf	I2C1_ISR@i2c_bytes_left& (0+255),f,b
 18250  0036DC  29F3               	incf	I2C1_ISR@i2c_bytes_left& (0+255),w,b
 18251  0036DE  A4D8               	btfss	status,2,c
 18252  0036E0  D00E               	goto	i2l8445
 18253                           
 18254                           ; BSR set to: 0
 18255                           ;i2c1.c: 447: {;i2c1.c: 451: p_i2c1_trb_current++;
 18256  0036E2  0E05               	movlw	5
 18257  0036E4  0101               	movlb	1	; () banked
 18258  0036E6  2743               	addwf	_p_i2c1_trb_current& (0+255),f,b
 18259  0036E8  0E00               	movlw	0
 18260  0036EA  2344               	addwfc	(_p_i2c1_trb_current+1)& (0+255),f,b
 18261                           
 18262                           ; BSR set to: 1
 18263                           ;i2c1.c: 454: if(--i2c1_trb_count == 0)
 18264  0036EC  0100               	movlb	0	; () banked
 18265  0036EE  2FF4               	decfsz	_i2c1_trb_count& (0+255),f,b
 18266  0036F0  D004               	goto	i2l636
 18267                           
 18268                           ; BSR set to: 0
 18269                           ;i2c1.c: 455: {;i2c1.c: 456: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 18270  0036F2  0E00               	movlw	0
 18271  0036F4  ECEC  F02A         	call	_I2C1_Stop
 18272                           
 18273                           ;i2c1.c: 457: }
 18274  0036F8  0012               	return	
 18275  0036FA                     i2l636:
 18276                           
 18277                           ; BSR set to: 0
 18278                           ;i2c1.c: 458: else;i2c1.c: 459: {;i2c1.c: 466: SSP1CON2bits.RSEN = 1;
 18279  0036FA  82C5               	bsf	4037,1,c	;volatile
 18280  0036FC  D787               	goto	i2l8379
 18281  0036FE                     i2l8445:
 18282                           
 18283                           ; BSR set to: 0
 18284                           ;i2c1.c: 473: else;i2c1.c: 474: {;i2c1.c: 476: SSP1BUF = *pi2c_buf_ptr++;
 18285  0036FE  C13F  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 18286  003702  C140  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 18287  003706  50DF               	movf	indf2,w,c
 18288  003708  6EC9               	movwf	4041,c	;volatile
 18289                           
 18290                           ; BSR set to: 0
 18291  00370A  0101               	movlb	1	; () banked
 18292  00370C  4B3F               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 18293  00370E  2B40               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 18294  003710  0012               	return	
 18295  003712                     i2l639:
 18296                           
 18297                           ; BSR set to: 0
 18298                           ;i2c1.c: 484: if(SSP1CON2bits.ACKSTAT)
 18299  003712  ACC5               	btfss	4037,6,c	;volatile
 18300  003714  D007               	goto	i2l640
 18301                           
 18302                           ; BSR set to: 0
 18303                           ;i2c1.c: 485: {;i2c1.c: 488: i2c1_object.i2cErrors++;
 18304  003716  0101               	movlb	1	; () banked
 18305  003718  2B15               	incf	(_i2c1_object+6)& (0+255),f,b
 18306                           
 18307                           ; BSR set to: 1
 18308                           ;i2c1.c: 491: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 18309  00371A  0E04               	movlw	4
 18310  00371C  ECEC  F02A         	call	_I2C1_Stop
 18311                           
 18312                           ;i2c1.c: 494: SSP1CON2bits.ACKSTAT = 0;
 18313  003720  9CC5               	bcf	4037,6,c	;volatile
 18314                           
 18315                           ;i2c1.c: 495: }
 18316  003722  0012               	return	
 18317  003724                     i2l640:
 18318                           
 18319                           ; BSR set to: 0
 18320                           ;i2c1.c: 496: else;i2c1.c: 497: {;i2c1.c: 498: SSP1CON2bits.RCEN = 1;
 18321  003724  86C5               	bsf	4037,3,c	;volatile
 18322                           
 18323                           ; BSR set to: 0
 18324                           ;i2c1.c: 499: i2c1_state = S_MASTER_ACK_RCV_DATA;
 18325  003726  0E08               	movlw	8
 18326  003728  6FF5               	movwf	_i2c1_state& (0+255),b
 18327  00372A  0012               	return	
 18328  00372C                     i2l8457:
 18329                           
 18330                           ; BSR set to: 0
 18331                           ;i2c1.c: 508: i2c1_state = S_MASTER_ACK_RCV_DATA;
 18332  00372C  0E08               	movlw	8
 18333  00372E  6FF5               	movwf	_i2c1_state& (0+255),b
 18334                           
 18335                           ; BSR set to: 0
 18336                           ;i2c1.c: 511: SSP1CON2bits.RCEN = 1;
 18337  003730  86C5               	bsf	4037,3,c	;volatile
 18338                           
 18339                           ;i2c1.c: 513: break;
 18340  003732  0012               	return	
 18341  003734                     i2l8461:
 18342                           
 18343                           ; BSR set to: 0
 18344                           ;i2c1.c: 518: *pi2c_buf_ptr++ = SSP1BUF;
 18345  003734  C13F  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 18346  003738  C140  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 18347  00373C  CFC9 FFDF          	movff	4041,indf2	;volatile
 18348                           
 18349                           ; BSR set to: 0
 18350  003740  0101               	movlb	1	; () banked
 18351  003742  4B3F               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 18352  003744  2B40               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 18353                           
 18354                           ; BSR set to: 1
 18355                           ;i2c1.c: 521: if(--i2c_bytes_left)
 18356  003746  0E01               	movlw	1
 18357  003748  0100               	movlb	0	; () banked
 18358  00374A  5FF3               	subwf	I2C1_ISR@i2c_bytes_left& (0+255),f,b
 18359  00374C  B4D8               	btfsc	status,2,c
 18360  00374E  D004               	goto	i2l644
 18361                           
 18362                           ; BSR set to: 0
 18363                           ;i2c1.c: 522: {;i2c1.c: 528: SSP1CON2bits.ACKDT = 0;
 18364  003750  9AC5               	bcf	4037,5,c	;volatile
 18365                           
 18366                           ; BSR set to: 0
 18367                           ;i2c1.c: 531: i2c1_state = S_MASTER_RCV_DATA;
 18368  003752  0E06               	movlw	6
 18369  003754  6FF5               	movwf	_i2c1_state& (0+255),b
 18370                           
 18371                           ;i2c1.c: 532: }
 18372  003756  D003               	goto	i2l8473
 18373  003758                     i2l644:
 18374                           
 18375                           ; BSR set to: 0
 18376                           ;i2c1.c: 533: else;i2c1.c: 534: {;i2c1.c: 538: SSP1CON2bits.ACKDT = 1;
 18377  003758  8AC5               	bsf	4037,5,c	;volatile
 18378                           
 18379                           ; BSR set to: 0
 18380                           ;i2c1.c: 540: I2C1_FunctionComplete();
 18381  00375A  ECF3  F02C         	call	_I2C1_FunctionComplete	;wreg free
 18382  00375E                     i2l8473:
 18383                           
 18384                           ;i2c1.c: 541: };i2c1.c: 544: SSP1CON2bits.ACKEN = 1;
 18385  00375E  88C5               	bsf	4037,4,c	;volatile
 18386                           
 18387                           ;i2c1.c: 545: break;
 18388  003760  0012               	return	
 18389  003762                     i2l8475:
 18390                           
 18391                           ; BSR set to: 0
 18392                           ;i2c1.c: 548: case S_MASTER_SEND_STOP:;i2c1.c: 551: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 18393  003762  0E00               	movlw	0
 18394  003764  ECEC  F02A         	call	_I2C1_Stop
 18395                           
 18396                           ;i2c1.c: 552: break;
 18397  003768  0012               	return	
 18398  00376A                     i2l8477:
 18399                           
 18400                           ; BSR set to: 0
 18401                           ;i2c1.c: 558: i2c1_object.i2cErrors++;
 18402  00376A  0101               	movlb	1	; () banked
 18403  00376C  2B15               	incf	(_i2c1_object+6)& (0+255),f,b
 18404                           
 18405                           ; BSR set to: 1
 18406                           ;i2c1.c: 559: I2C1_Stop(I2C1_LOST_STATE);
 18407  00376E  0E06               	movlw	6
 18408  003770  ECEC  F02A         	call	_I2C1_Stop
 18409                           
 18410                           ;i2c1.c: 560: break;
 18411  003774  0012               	return	
 18412  003776                     i2l8483:
 18413  003776  0100               	movlb	0	; () banked
 18414  003778  51F5               	movf	_i2c1_state& (0+255),w,b
 18415                           
 18416                           ; Switch size 1, requested type "simple"
 18417                           ; Number of cases is 11, Range of values is 0 to 11
 18418                           ; switch strategies available:
 18419                           ; Name         Instructions Cycles
 18420                           ; simple_byte           34    18 (average)
 18421                           ;	Chosen strategy is simple_byte
 18422  00377A  0A00               	xorlw	0	; case 0
 18423  00377C  B4D8               	btfsc	status,2,c
 18424  00377E  D715               	goto	i2l610
 18425  003780  0A01               	xorlw	1	; case 1
 18426  003782  B4D8               	btfsc	status,2,c
 18427  003784  D7BA               	goto	i2l636
 18428  003786  0A03               	xorlw	3	; case 2
 18429  003788  B4D8               	btfsc	status,2,c
 18430  00378A  D778               	goto	i2l8407
 18431  00378C  0A01               	xorlw	1	; case 3
 18432  00378E  B4D8               	btfsc	status,2,c
 18433  003790  D79B               	goto	i2l632
 18434  003792  0A07               	xorlw	7	; case 4
 18435  003794  B4D8               	btfsc	status,2,c
 18436  003796  D7E5               	goto	i2l8475
 18437  003798  0A01               	xorlw	1	; case 5
 18438  00379A  B4D8               	btfsc	status,2,c
 18439  00379C  D7BA               	goto	i2l639
 18440  00379E  0A03               	xorlw	3	; case 6
 18441  0037A0  B4D8               	btfsc	status,2,c
 18442  0037A2  D7C4               	goto	i2l8457
 18443  0037A4  0A01               	xorlw	1	; case 7
 18444  0037A6  B4D8               	btfsc	status,2,c
 18445  0037A8  D7DC               	goto	i2l8475
 18446  0037AA  0A0F               	xorlw	15	; case 8
 18447  0037AC  B4D8               	btfsc	status,2,c
 18448  0037AE  D7C2               	goto	i2l8461
 18449  0037B0  0A02               	xorlw	2	; case 10
 18450  0037B2  B4D8               	btfsc	status,2,c
 18451  0037B4  D72F               	goto	i2l616
 18452  0037B6  0A01               	xorlw	1	; case 11
 18453  0037B8  B4D8               	btfsc	status,2,c
 18454  0037BA  D743               	goto	i2l621
 18455  0037BC  D7D6               	goto	i2l8477
 18456  0037BE                     __end_of_I2C1_ISR:
 18457                           	opt callstack 0
 18458                           
 18459 ;; *************** function _I2C1_Stop *****************
 18460 ;; Defined at:
 18461 ;;		line 583 in file "mcc_generated_files/i2c1.c"
 18462 ;; Parameters:    Size  Location     Type
 18463 ;;  completion_c    1    wreg     enum E5843
 18464 ;; Auto vars:     Size  Location     Type
 18465 ;;  completion_c    1    2[COMRAM] enum E5843
 18466 ;; Return value:  Size  Location     Type
 18467 ;;                  1    wreg      void 
 18468 ;; Registers used:
 18469 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18470 ;; Tracked objects:
 18471 ;;		On entry : 0/0
 18472 ;;		On exit  : 0/0
 18473 ;;		Unchanged: 0/0
 18474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18475 ;;      Params:         0       0       0       0       0       0       0
 18476 ;;      Locals:         1       0       0       0       0       0       0
 18477 ;;      Temps:          2       0       0       0       0       0       0
 18478 ;;      Totals:         3       0       0       0       0       0       0
 18479 ;;Total ram usage:        3 bytes
 18480 ;; Hardware stack levels used:    1
 18481 ;; This function calls:
 18482 ;;		Nothing
 18483 ;; This function is called by:
 18484 ;;		_I2C1_ISR
 18485 ;; This function uses a non-reentrant model
 18486 ;;
 18487                           
 18488                           	psect	text100
 18489  0055D8                     __ptext100:
 18490                           	opt callstack 0
 18491  0055D8                     _I2C1_Stop:
 18492                           	opt callstack 20
 18493                           
 18494                           ;incstack = 0
 18495                           ;I2C1_Stop@completion_code stored from wreg
 18496  0055D8  6E03               	movwf	I2C1_Stop@completion_code,c
 18497                           
 18498                           ;i2c1.c: 586: SSP1CON2bits.PEN = 1;
 18499  0055DA  84C5               	bsf	4037,2,c	;volatile
 18500                           
 18501                           ;i2c1.c: 589: if (p_i2c1_current->pTrFlag != (0))
 18502  0055DC  0101               	movlb	1	; () banked
 18503  0055DE  EE20 F003          	lfsr	2,3
 18504  0055E2  5141               	movf	_p_i2c1_current& (0+255),w,b
 18505  0055E4  26D9               	addwf	fsr2l,f,c
 18506  0055E6  5142               	movf	(_p_i2c1_current+1)& (0+255),w,b
 18507  0055E8  22DA               	addwfc	fsr2h,f,c
 18508  0055EA  50DE               	movf	postinc2,w,c
 18509  0055EC  10DE               	iorwf	postinc2,w,c
 18510  0055EE  B4D8               	btfsc	status,2,c
 18511  0055F0  D010               	goto	i2l8049
 18512                           
 18513                           ; BSR set to: 1
 18514                           ;i2c1.c: 590: {;i2c1.c: 592: *(p_i2c1_current->pTrFlag) = completion_code;
 18515  0055F2  EE20 F003          	lfsr	2,3
 18516  0055F6  5141               	movf	_p_i2c1_current& (0+255),w,b
 18517  0055F8  26D9               	addwf	fsr2l,f,c
 18518  0055FA  5142               	movf	(_p_i2c1_current+1)& (0+255),w,b
 18519  0055FC  22DA               	addwfc	fsr2h,f,c
 18520  0055FE  CFDE F001          	movff	postinc2,??_I2C1_Stop
 18521  005602  CFDD F002          	movff	postdec2,??_I2C1_Stop+1
 18522  005606  C001  FFD9         	movff	??_I2C1_Stop,fsr2l
 18523  00560A  C002  FFDA         	movff	??_I2C1_Stop+1,fsr2h
 18524  00560E  C003  FFDF         	movff	I2C1_Stop@completion_code,indf2
 18525  005612                     i2l8049:
 18526                           
 18527                           ; BSR set to: 1
 18528                           ;i2c1.c: 593: };i2c1.c: 596: i2c1_state = S_MASTER_IDLE;
 18529  005612  0E00               	movlw	0
 18530  005614  0100               	movlb	0	; () banked
 18531  005616  6FF5               	movwf	_i2c1_state& (0+255),b
 18532                           
 18533                           ; BSR set to: 0
 18534  005618  0012               	return		;funcret
 18535  00561A                     __end_of_I2C1_Stop:
 18536                           	opt callstack 0
 18537                           
 18538 ;; *************** function _I2C1_FunctionComplete *****************
 18539 ;; Defined at:
 18540 ;;		line 565 in file "mcc_generated_files/i2c1.c"
 18541 ;; Parameters:    Size  Location     Type
 18542 ;;		None
 18543 ;; Auto vars:     Size  Location     Type
 18544 ;;		None
 18545 ;; Return value:  Size  Location     Type
 18546 ;;                  1    wreg      void 
 18547 ;; Registers used:
 18548 ;;		wreg, status,2, status,0
 18549 ;; Tracked objects:
 18550 ;;		On entry : 0/0
 18551 ;;		On exit  : 0/0
 18552 ;;		Unchanged: 0/0
 18553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18554 ;;      Params:         0       0       0       0       0       0       0
 18555 ;;      Locals:         0       0       0       0       0       0       0
 18556 ;;      Temps:          0       0       0       0       0       0       0
 18557 ;;      Totals:         0       0       0       0       0       0       0
 18558 ;;Total ram usage:        0 bytes
 18559 ;; Hardware stack levels used:    1
 18560 ;; This function calls:
 18561 ;;		Nothing
 18562 ;; This function is called by:
 18563 ;;		_I2C1_ISR
 18564 ;; This function uses a non-reentrant model
 18565 ;;
 18566                           
 18567                           	psect	text101
 18568  0059E6                     __ptext101:
 18569                           	opt callstack 0
 18570  0059E6                     _I2C1_FunctionComplete:
 18571                           	opt callstack 20
 18572                           
 18573                           ;i2c1.c: 569: p_i2c1_trb_current++;
 18574                           
 18575                           ; BSR set to: 0
 18576                           ;incstack = 0
 18577  0059E6  0E05               	movlw	5
 18578  0059E8  0101               	movlb	1	; () banked
 18579  0059EA  2743               	addwf	_p_i2c1_trb_current& (0+255),f,b
 18580  0059EC  0E00               	movlw	0
 18581  0059EE  2344               	addwfc	(_p_i2c1_trb_current+1)& (0+255),f,b
 18582                           
 18583                           ; BSR set to: 1
 18584                           ;i2c1.c: 572: if(--i2c1_trb_count == 0)
 18585  0059F0  0100               	movlb	0	; () banked
 18586  0059F2  2FF4               	decfsz	_i2c1_trb_count& (0+255),f,b
 18587  0059F4  D003               	goto	i2l8057
 18588                           
 18589                           ; BSR set to: 0
 18590                           ;i2c1.c: 573: {;i2c1.c: 574: i2c1_state = S_MASTER_SEND_STOP;
 18591  0059F6  0E04               	movlw	4
 18592  0059F8  6FF5               	movwf	_i2c1_state& (0+255),b
 18593                           
 18594                           ;i2c1.c: 575: }
 18595  0059FA  0012               	return	
 18596  0059FC                     i2l8057:
 18597                           
 18598                           ; BSR set to: 0
 18599                           ;i2c1.c: 576: else;i2c1.c: 577: {;i2c1.c: 578: i2c1_state = S_MASTER_RESTART;
 18600  0059FC  0E01               	movlw	1
 18601  0059FE  6FF5               	movwf	_i2c1_state& (0+255),b
 18602                           
 18603                           ; BSR set to: 0
 18604  005A00  0012               	return		;funcret
 18605  005A02                     __end_of_I2C1_FunctionComplete:
 18606                           	opt callstack 0
 18607                           
 18608 ;; *************** function _I2C1_BusCollisionISR *****************
 18609 ;; Defined at:
 18610 ;;		line 742 in file "mcc_generated_files/i2c1.c"
 18611 ;; Parameters:    Size  Location     Type
 18612 ;;		None
 18613 ;; Auto vars:     Size  Location     Type
 18614 ;;		None
 18615 ;; Return value:  Size  Location     Type
 18616 ;;                  1    wreg      void 
 18617 ;; Registers used:
 18618 ;;		None
 18619 ;; Tracked objects:
 18620 ;;		On entry : 0/0
 18621 ;;		On exit  : 0/0
 18622 ;;		Unchanged: 0/0
 18623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18624 ;;      Params:         0       0       0       0       0       0       0
 18625 ;;      Locals:         0       0       0       0       0       0       0
 18626 ;;      Temps:          0       0       0       0       0       0       0
 18627 ;;      Totals:         0       0       0       0       0       0       0
 18628 ;;Total ram usage:        0 bytes
 18629 ;; Hardware stack levels used:    1
 18630 ;; This function calls:
 18631 ;;		Nothing
 18632 ;; This function is called by:
 18633 ;;		_INTERRUPT_InterruptManager
 18634 ;; This function uses a non-reentrant model
 18635 ;;
 18636                           
 18637                           	psect	text102
 18638  005B32                     __ptext102:
 18639                           	opt callstack 0
 18640  005B32                     _I2C1_BusCollisionISR:
 18641                           	opt callstack 21
 18642                           
 18643                           ;i2c1.c: 745: PIR2bits.BCL1IF = 0;
 18644                           
 18645                           ; BSR set to: 0
 18646                           ;incstack = 0
 18647  005B32  96A1               	bcf	4001,3,c	;volatile
 18648  005B34  0012               	return		;funcret
 18649  005B36                     __end_of_I2C1_BusCollisionISR:
 18650                           	opt callstack 0
 18651                           
 18652 ;; *************** function _EUSART1_Transmit_ISR *****************
 18653 ;; Defined at:
 18654 ;;		line 300 in file "mcc_generated_files/eusart1.c"
 18655 ;; Parameters:    Size  Location     Type
 18656 ;;		None
 18657 ;; Auto vars:     Size  Location     Type
 18658 ;;		None
 18659 ;; Return value:  Size  Location     Type
 18660 ;;                  1    wreg      void 
 18661 ;; Registers used:
 18662 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18663 ;; Tracked objects:
 18664 ;;		On entry : 0/0
 18665 ;;		On exit  : 0/0
 18666 ;;		Unchanged: 0/0
 18667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18668 ;;      Params:         0       0       0       0       0       0       0
 18669 ;;      Locals:         0       0       0       0       0       0       0
 18670 ;;      Temps:          0       0       0       0       0       0       0
 18671 ;;      Totals:         0       0       0       0       0       0       0
 18672 ;;Total ram usage:        0 bytes
 18673 ;; Hardware stack levels used:    1
 18674 ;; This function calls:
 18675 ;;		Nothing
 18676 ;; This function is called by:
 18677 ;;		_EUSART1_Initialize
 18678 ;;		_INTERRUPT_InterruptManager
 18679 ;; This function uses a non-reentrant model
 18680 ;;
 18681                           
 18682                           	psect	text103
 18683  005830                     __ptext103:
 18684                           	opt callstack 0
 18685  005830                     _EUSART1_Transmit_ISR:
 18686                           	opt callstack 21
 18687                           
 18688                           ;eusart1.c: 304: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 18689                           
 18690                           ;incstack = 0
 18691  005830  0E08               	movlw	8
 18692  005832  0101               	movlb	1	; () banked
 18693  005834  6183               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 18694  005836  D010               	goto	i2l268
 18695                           
 18696                           ; BSR set to: 1
 18697                           ;eusart1.c: 305: {;eusart1.c: 306: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 18698  005838  0E78               	movlw	low _eusart1TxBuffer
 18699  00583A  243C               	addwf	_eusart1TxTail,w,c	;volatile
 18700  00583C  6ED9               	movwf	fsr2l,c
 18701  00583E  6ADA               	clrf	fsr2h,c
 18702  005840  0E02               	movlw	high _eusart1TxBuffer
 18703  005842  22DA               	addwfc	fsr2h,f,c
 18704  005844  50DF               	movf	indf2,w,c
 18705  005846  6EAD               	movwf	4013,c	;volatile
 18706                           
 18707                           ; BSR set to: 1
 18708  005848  2A3C               	incf	_eusart1TxTail,f,c	;volatile
 18709                           
 18710                           ; BSR set to: 1
 18711                           ;eusart1.c: 307: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 18712  00584A  0E07               	movlw	7
 18713  00584C  643C               	cpfsgt	_eusart1TxTail,c	;volatile
 18714  00584E  D002               	goto	i2l8327
 18715                           
 18716                           ; BSR set to: 1
 18717                           ;eusart1.c: 308: {;eusart1.c: 309: eusart1TxTail = 0;
 18718  005850  0E00               	movlw	0
 18719  005852  6E3C               	movwf	_eusart1TxTail,c	;volatile
 18720  005854                     i2l8327:
 18721                           
 18722                           ; BSR set to: 1
 18723                           ;eusart1.c: 310: };eusart1.c: 311: eusart1TxBufferRemaining++;
 18724  005854  2B83               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 18725                           
 18726                           ;eusart1.c: 312: }
 18727  005856  0012               	return	
 18728  005858                     i2l268:
 18729                           
 18730                           ; BSR set to: 1
 18731                           ;eusart1.c: 313: else;eusart1.c: 314: {;eusart1.c: 315: PIE1bits.TX1IE = 0;
 18732  005858  989D               	bcf	3997,4,c	;volatile
 18733                           
 18734                           ; BSR set to: 1
 18735  00585A  0012               	return		;funcret
 18736  00585C                     __end_of_EUSART1_Transmit_ISR:
 18737                           	opt callstack 0
 18738                           
 18739 ;; *************** function _EUSART1_Receive_ISR *****************
 18740 ;; Defined at:
 18741 ;;		line 319 in file "mcc_generated_files/eusart1.c"
 18742 ;; Parameters:    Size  Location     Type
 18743 ;;		None
 18744 ;; Auto vars:     Size  Location     Type
 18745 ;;		None
 18746 ;; Return value:  Size  Location     Type
 18747 ;;                  1    wreg      void 
 18748 ;; Registers used:
 18749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 18750 ;; Tracked objects:
 18751 ;;		On entry : 0/0
 18752 ;;		On exit  : 0/0
 18753 ;;		Unchanged: 0/0
 18754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18755 ;;      Params:         0       0       0       0       0       0       0
 18756 ;;      Locals:         0       0       0       0       0       0       0
 18757 ;;      Temps:          0       0       0       0       0       0       0
 18758 ;;      Totals:         0       0       0       0       0       0       0
 18759 ;;Total ram usage:        0 bytes
 18760 ;; Hardware stack levels used:    1
 18761 ;; Hardware stack levels required when called:    3
 18762 ;; This function calls:
 18763 ;;		Absolute function
 18764 ;;		_EUSART1_DefaultErrorHandler
 18765 ;;		_EUSART1_DefaultFramingErrorHandler
 18766 ;;		_EUSART1_DefaultOverrunErrorHandler
 18767 ;;		_EUSART1_RxDataHandler
 18768 ;; This function is called by:
 18769 ;;		_EUSART1_Initialize
 18770 ;;		_INTERRUPT_InterruptManager
 18771 ;; This function uses a non-reentrant model
 18772 ;;
 18773                           
 18774                           	psect	text104
 18775  004AB6                     __ptext104:
 18776                           	opt callstack 0
 18777  004AB6                     _EUSART1_Receive_ISR:
 18778                           	opt callstack 18
 18779                           
 18780                           ;eusart1.c: 322: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
 18781                           
 18782                           ; BSR set to: 1
 18783                           ;incstack = 0
 18784  004AB6  0E00               	movlw	low _eusart1RxStatusBuffer
 18785  004AB8  243B               	addwf	_eusart1RxHead,w,c	;volatile
 18786  004ABA  6ED9               	movwf	fsr2l,c
 18787  004ABC  6ADA               	clrf	fsr2h,c
 18788  004ABE  0E01               	movlw	high _eusart1RxStatusBuffer
 18789  004AC0  22DA               	addwfc	fsr2h,f,c
 18790  004AC2  0E00               	movlw	0
 18791  004AC4  6EDF               	movwf	indf2,c
 18792                           
 18793                           ;eusart1.c: 324: if(RCSTA1bits.FERR){
 18794  004AC6  A4AB               	btfss	4011,2,c	;volatile
 18795  004AC8  D015               	goto	i2u894_49
 18796                           
 18797                           ;eusart1.c: 325: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
 18798  004ACA  0E00               	movlw	low _eusart1RxStatusBuffer
 18799  004ACC  243B               	addwf	_eusart1RxHead,w,c	;volatile
 18800  004ACE  6ED9               	movwf	fsr2l,c
 18801  004AD0  6ADA               	clrf	fsr2h,c
 18802  004AD2  0E01               	movlw	high _eusart1RxStatusBuffer
 18803  004AD4  22DA               	addwfc	fsr2h,f,c
 18804  004AD6  0101               	movlb	1	; () banked
 18805  004AD8  82DF               	bsf	indf2,1,c
 18806                           
 18807                           ; BSR set to: 1
 18808                           ;eusart1.c: 326: EUSART1_FramingErrorHandler();
 18809  004ADA  D801               	call	i2u894_48
 18810  004ADC  D00B               	goto	i2u894_49
 18811  004ADE                     i2u894_48:
 18812  004ADE  0005               	push	
 18813  004AE0  0102               	movlb	2	; () banked
 18814  004AE2  6EFA               	movwf	pclath,c
 18815  004AE4  5193               	movf	_EUSART1_FramingErrorHandler& (0+255),w,b
 18816  004AE6  6EFD               	movwf	tosl,c
 18817  004AE8  5194               	movf	(_EUSART1_FramingErrorHandler+1)& (0+255),w,b
 18818  004AEA  6EFE               	movwf	tosh,c
 18819  004AEC  50F8               	movf	tblptru,w,c
 18820  004AEE  6EFF               	movwf	tosu,c
 18821  004AF0  50FA               	movf	pclath,w,c
 18822  004AF2  0012               	return		;indir
 18823  004AF4                     i2u894_49:
 18824                           
 18825                           ;eusart1.c: 327: };eusart1.c: 329: if(RCSTA1bits.OERR){
 18826  004AF4  A2AB               	btfss	4011,1,c	;volatile
 18827  004AF6  D015               	goto	i2u896_49
 18828                           
 18829                           ;eusart1.c: 330: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
 18830  004AF8  0E00               	movlw	low _eusart1RxStatusBuffer
 18831  004AFA  243B               	addwf	_eusart1RxHead,w,c	;volatile
 18832  004AFC  6ED9               	movwf	fsr2l,c
 18833  004AFE  6ADA               	clrf	fsr2h,c
 18834  004B00  0E01               	movlw	high _eusart1RxStatusBuffer
 18835  004B02  22DA               	addwfc	fsr2h,f,c
 18836  004B04  0101               	movlb	1	; () banked
 18837  004B06  84DF               	bsf	indf2,2,c
 18838                           
 18839                           ; BSR set to: 1
 18840                           ;eusart1.c: 331: EUSART1_OverrunErrorHandler();
 18841  004B08  D801               	call	i2u896_48
 18842  004B0A  D00B               	goto	i2u896_49
 18843  004B0C                     i2u896_48:
 18844  004B0C  0005               	push	
 18845  004B0E  0102               	movlb	2	; () banked
 18846  004B10  6EFA               	movwf	pclath,c
 18847  004B12  5191               	movf	_EUSART1_OverrunErrorHandler& (0+255),w,b
 18848  004B14  6EFD               	movwf	tosl,c
 18849  004B16  5192               	movf	(_EUSART1_OverrunErrorHandler+1)& (0+255),w,b
 18850  004B18  6EFE               	movwf	tosh,c
 18851  004B1A  50F8               	movf	tblptru,w,c
 18852  004B1C  6EFF               	movwf	tosu,c
 18853  004B1E  50FA               	movf	pclath,w,c
 18854  004B20  0012               	return		;indir
 18855  004B22                     i2u896_49:
 18856                           
 18857                           ;eusart1.c: 332: };eusart1.c: 334: if(eusart1RxStatusBuffer[eusart1RxHead].status){
 18858  004B22  0E00               	movlw	low _eusart1RxStatusBuffer
 18859  004B24  243B               	addwf	_eusart1RxHead,w,c	;volatile
 18860  004B26  6ED9               	movwf	fsr2l,c
 18861  004B28  6ADA               	clrf	fsr2h,c
 18862  004B2A  0E01               	movlw	high _eusart1RxStatusBuffer
 18863  004B2C  22DA               	addwfc	fsr2h,f,c
 18864  004B2E  50DF               	movf	indf2,w,c
 18865  004B30  B4D8               	btfsc	status,2,c
 18866  004B32  D00D               	goto	i2l8347
 18867                           
 18868                           ;eusart1.c: 335: EUSART1_ErrorHandler();
 18869  004B34  D801               	call	i2u898_48
 18870  004B36  0012               	return	
 18871  004B38                     i2u898_48:
 18872  004B38  0005               	push	
 18873  004B3A  0102               	movlb	2	; () banked
 18874  004B3C  6EFA               	movwf	pclath,c
 18875  004B3E  518F               	movf	_EUSART1_ErrorHandler& (0+255),w,b
 18876  004B40  6EFD               	movwf	tosl,c
 18877  004B42  5190               	movf	(_EUSART1_ErrorHandler+1)& (0+255),w,b
 18878  004B44  6EFE               	movwf	tosh,c
 18879  004B46  50F8               	movf	tblptru,w,c
 18880  004B48  6EFF               	movwf	tosu,c
 18881  004B4A  50FA               	movf	pclath,w,c
 18882  004B4C  0012               	return		;indir
 18883  004B4E                     i2l8347:
 18884                           
 18885                           ;eusart1.c: 337: EUSART1_RxDataHandler();
 18886  004B4E  EC1A  F010         	call	_EUSART1_RxDataHandler	;wreg free
 18887  004B52  0012               	return		;funcret
 18888  004B54                     __end_of_EUSART1_Receive_ISR:
 18889                           	opt callstack 0
 18890                           
 18891 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 18892 ;; Defined at:
 18893 ;;		line 571 in file "mcc_generated_files/eusart1.c"
 18894 ;; Parameters:    Size  Location     Type
 18895 ;;		None
 18896 ;; Auto vars:     Size  Location     Type
 18897 ;;		None
 18898 ;; Return value:  Size  Location     Type
 18899 ;;                  1    wreg      void 
 18900 ;; Registers used:
 18901 ;;		None
 18902 ;; Tracked objects:
 18903 ;;		On entry : 0/0
 18904 ;;		On exit  : 0/0
 18905 ;;		Unchanged: 0/0
 18906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18907 ;;      Params:         0       0       0       0       0       0       0
 18908 ;;      Locals:         0       0       0       0       0       0       0
 18909 ;;      Temps:          0       0       0       0       0       0       0
 18910 ;;      Totals:         0       0       0       0       0       0       0
 18911 ;;Total ram usage:        0 bytes
 18912 ;; Hardware stack levels used:    1
 18913 ;; This function calls:
 18914 ;;		Nothing
 18915 ;; This function is called by:
 18916 ;;		_EUSART1_Initialize
 18917 ;;		_EUSART1_Receive_ISR
 18918 ;; This function uses a non-reentrant model
 18919 ;;
 18920                           
 18921                           	psect	text105
 18922  005B12                     __ptext105:
 18923                           	opt callstack 0
 18924  005B12                     _EUSART1_DefaultOverrunErrorHandler:
 18925                           	opt callstack 20
 18926                           
 18927                           ;eusart1.c: 574: RCSTA1bits.CREN = 0;
 18928                           
 18929                           ;incstack = 0
 18930  005B12  98AB               	bcf	4011,4,c	;volatile
 18931                           
 18932                           ;eusart1.c: 575: RCSTA1bits.CREN = 1;
 18933  005B14  88AB               	bsf	4011,4,c	;volatile
 18934  005B16  0012               	return		;funcret
 18935  005B18                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 18936                           	opt callstack 0
 18937                           
 18938 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
 18939 ;; Defined at:
 18940 ;;		line 569 in file "mcc_generated_files/eusart1.c"
 18941 ;; Parameters:    Size  Location     Type
 18942 ;;		None
 18943 ;; Auto vars:     Size  Location     Type
 18944 ;;		None
 18945 ;; Return value:  Size  Location     Type
 18946 ;;                  1    wreg      void 
 18947 ;; Registers used:
 18948 ;;		None
 18949 ;; Tracked objects:
 18950 ;;		On entry : 0/0
 18951 ;;		On exit  : 0/0
 18952 ;;		Unchanged: 0/0
 18953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18954 ;;      Params:         0       0       0       0       0       0       0
 18955 ;;      Locals:         0       0       0       0       0       0       0
 18956 ;;      Temps:          0       0       0       0       0       0       0
 18957 ;;      Totals:         0       0       0       0       0       0       0
 18958 ;;Total ram usage:        0 bytes
 18959 ;; Hardware stack levels used:    1
 18960 ;; This function calls:
 18961 ;;		Nothing
 18962 ;; This function is called by:
 18963 ;;		_EUSART1_Initialize
 18964 ;;		_EUSART1_Receive_ISR
 18965 ;; This function uses a non-reentrant model
 18966 ;;
 18967                           
 18968                           	psect	text106
 18969  005B3E                     __ptext106:
 18970                           	opt callstack 0
 18971  005B3E                     _EUSART1_DefaultFramingErrorHandler:
 18972                           	opt callstack 20
 18973                           
 18974                           ;incstack = 0
 18975  005B3E  0012               	return		;funcret
 18976  005B40                     __end_of_EUSART1_DefaultFramingErrorHandler:
 18977                           	opt callstack 0
 18978                           
 18979 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 18980 ;; Defined at:
 18981 ;;		line 579 in file "mcc_generated_files/eusart1.c"
 18982 ;; Parameters:    Size  Location     Type
 18983 ;;		None
 18984 ;; Auto vars:     Size  Location     Type
 18985 ;;		None
 18986 ;; Return value:  Size  Location     Type
 18987 ;;                  1    wreg      void 
 18988 ;; Registers used:
 18989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18990 ;; Tracked objects:
 18991 ;;		On entry : 0/0
 18992 ;;		On exit  : 0/0
 18993 ;;		Unchanged: 0/0
 18994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18995 ;;      Params:         0       0       0       0       0       0       0
 18996 ;;      Locals:         0       0       0       0       0       0       0
 18997 ;;      Temps:          0       0       0       0       0       0       0
 18998 ;;      Totals:         0       0       0       0       0       0       0
 18999 ;;Total ram usage:        0 bytes
 19000 ;; Hardware stack levels used:    1
 19001 ;; Hardware stack levels required when called:    2
 19002 ;; This function calls:
 19003 ;;		_EUSART1_RxDataHandler
 19004 ;; This function is called by:
 19005 ;;		_EUSART1_Initialize
 19006 ;;		_EUSART1_Receive_ISR
 19007 ;; This function uses a non-reentrant model
 19008 ;;
 19009                           
 19010                           	psect	text107
 19011  005B18                     __ptext107:
 19012                           	opt callstack 0
 19013  005B18                     _EUSART1_DefaultErrorHandler:
 19014                           	opt callstack 18
 19015                           
 19016                           ;eusart1.c: 580: EUSART1_RxDataHandler();
 19017                           
 19018                           ;incstack = 0
 19019  005B18  EC1A  F010         	call	_EUSART1_RxDataHandler	;wreg free
 19020  005B1C  0012               	return		;funcret
 19021  005B1E                     __end_of_EUSART1_DefaultErrorHandler:
 19022                           	opt callstack 0
 19023                           
 19024 ;; *************** function _EUSART1_RxDataHandler *****************
 19025 ;; Defined at:
 19026 ;;		line 343 in file "mcc_generated_files/eusart1.c"
 19027 ;; Parameters:    Size  Location     Type
 19028 ;;		None
 19029 ;; Auto vars:     Size  Location     Type
 19030 ;;  i               2   19[COMRAM] int 
 19031 ;;  i               2   17[COMRAM] int 
 19032 ;;  i               2   15[COMRAM] int 
 19033 ;;  i               2   13[COMRAM] int 
 19034 ;;  i               2   11[COMRAM] int 
 19035 ;;  i               2    9[COMRAM] int 
 19036 ;;  i               2    7[COMRAM] int 
 19037 ;;  i               2    5[COMRAM] int 
 19038 ;; Return value:  Size  Location     Type
 19039 ;;                  1    wreg      void 
 19040 ;; Registers used:
 19041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19042 ;; Tracked objects:
 19043 ;;		On entry : 0/0
 19044 ;;		On exit  : 0/0
 19045 ;;		Unchanged: 0/0
 19046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19047 ;;      Params:         0       0       0       0       0       0       0
 19048 ;;      Locals:        16       0       0       0       0       0       0
 19049 ;;      Temps:          1       0       0       0       0       0       0
 19050 ;;      Totals:        17       0       0       0       0       0       0
 19051 ;;Total ram usage:       17 bytes
 19052 ;; Hardware stack levels used:    1
 19053 ;; Hardware stack levels required when called:    1
 19054 ;; This function calls:
 19055 ;;		__stepReverse_
 19056 ;;		__step_
 19057 ;;		i2_PWM5_LoadDutyValue
 19058 ;; This function is called by:
 19059 ;;		_EUSART1_Receive_ISR
 19060 ;;		_EUSART1_DefaultErrorHandler
 19061 ;; This function uses a non-reentrant model
 19062 ;;
 19063                           
 19064                           	psect	text108
 19065  002034                     __ptext108:
 19066                           	opt callstack 0
 19067  002034                     _EUSART1_RxDataHandler:
 19068                           	opt callstack 19
 19069                           
 19070                           ;eusart1.c: 345: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 19071                           
 19072                           ;incstack = 0
 19073  002034  0E2C               	movlw	low _eusart1RxBuffer
 19074  002036  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19075  002038  6ED9               	movwf	fsr2l,c
 19076  00203A  6ADA               	clrf	fsr2h,c
 19077  00203C  0E00               	movlw	high _eusart1RxBuffer
 19078  00203E  22DA               	addwfc	fsr2h,f,c
 19079  002040  CFAE FFDF          	movff	4014,indf2	;volatile
 19080  002044  2A3B               	incf	_eusart1RxHead,f,c	;volatile
 19081                           
 19082                           ;eusart1.c: 347: if (unitTestCounter == 0 ) {
 19083  002046  5036               	movf	_unitTestCounter,w,c
 19084  002048  1037               	iorwf	_unitTestCounter+1,w,c
 19085  00204A  A4D8               	btfss	status,2,c
 19086  00204C  D022               	goto	i2l7359
 19087                           
 19088                           ;eusart1.c: 349: if (atCheck ==0) {
 19089  00204E  0100               	movlb	0	; () banked
 19090  002050  51FC               	movf	_atCheck& (0+255),w,b
 19091  002052  A4D8               	btfss	status,2,c
 19092  002054  D00C               	goto	i2l7351
 19093                           
 19094                           ; BSR set to: 0
 19095                           ;eusart1.c: 350: if (eusart1RxBuffer[eusart1RxHead-1] == 'O') {
 19096  002056  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19097  002058  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19098  00205A  6ED9               	movwf	fsr2l,c
 19099  00205C  6ADA               	clrf	fsr2h,c
 19100  00205E  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19101  002060  22DA               	addwfc	fsr2h,f,c
 19102  002062  0E4F               	movlw	79
 19103  002064  18DE               	xorwf	postinc2,w,c
 19104  002066  A4D8               	btfss	status,2,c
 19105  002068  D2E3               	goto	i2l7631
 19106                           
 19107                           ; BSR set to: 0
 19108                           ;eusart1.c: 352: atCheck = 1;
 19109  00206A  0E01               	movlw	1
 19110  00206C  D010               	goto	L6
 19111  00206E                     i2l7351:
 19112                           
 19113                           ; BSR set to: 0
 19114  00206E  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19115  002070  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19116  002072  6ED9               	movwf	fsr2l,c
 19117  002074  6ADA               	clrf	fsr2h,c
 19118  002076  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19119  002078  22DA               	addwfc	fsr2h,f,c
 19120  00207A  0E4B               	movlw	75
 19121  00207C  18DE               	xorwf	postinc2,w,c
 19122  00207E  A4D8               	btfss	status,2,c
 19123  002080  D005               	goto	i2l7357
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;eusart1.c: 357: atCheck = 0;
 19127  002082  0E00               	movlw	0
 19128  002084  6FFC               	movwf	_atCheck& (0+255),b
 19129  002086                     i2l7355:
 19130                           
 19131                           ;eusart1.c: 358: unitTestCounter++;
 19132  002086  4A36               	infsnz	_unitTestCounter,f,c
 19133  002088  2A37               	incf	_unitTestCounter+1,f,c
 19134                           
 19135                           ;eusart1.c: 360: } else {
 19136  00208A  D2D2               	goto	i2l7631
 19137  00208C                     i2l7357:
 19138                           
 19139                           ; BSR set to: 0
 19140                           ;eusart1.c: 361: atCheck = 0;
 19141  00208C  0E00               	movlw	0
 19142  00208E                     L6:
 19143  00208E  6FFC               	movwf	_atCheck& (0+255),b
 19144  002090  D2CF               	goto	i2l7631
 19145  002092                     i2l7359:
 19146  002092  0436               	decf	_unitTestCounter,w,c
 19147  002094  1037               	iorwf	_unitTestCounter+1,w,c
 19148  002096  A4D8               	btfss	status,2,c
 19149  002098  D020               	goto	i2l7375
 19150                           
 19151                           ;eusart1.c: 365: if (muxSetup ==0) {
 19152  00209A  0100               	movlb	0	; () banked
 19153  00209C  51FB               	movf	_muxSetup& (0+255),w,b
 19154  00209E  A4D8               	btfss	status,2,c
 19155  0020A0  D00C               	goto	i2l7367
 19156                           
 19157                           ; BSR set to: 0
 19158                           ;eusart1.c: 366: if (eusart1RxBuffer[eusart1RxHead-1] == 'O') {
 19159  0020A2  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19160  0020A4  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19161  0020A6  6ED9               	movwf	fsr2l,c
 19162  0020A8  6ADA               	clrf	fsr2h,c
 19163  0020AA  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19164  0020AC  22DA               	addwfc	fsr2h,f,c
 19165  0020AE  0E4F               	movlw	79
 19166  0020B0  18DE               	xorwf	postinc2,w,c
 19167  0020B2  A4D8               	btfss	status,2,c
 19168  0020B4  D2BD               	goto	i2l7631
 19169                           
 19170                           ; BSR set to: 0
 19171                           ;eusart1.c: 368: muxSetup = 1;
 19172  0020B6  0E01               	movlw	1
 19173  0020B8  D00E               	goto	L7
 19174  0020BA                     i2l7367:
 19175                           
 19176                           ; BSR set to: 0
 19177  0020BA  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19178  0020BC  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19179  0020BE  6ED9               	movwf	fsr2l,c
 19180  0020C0  6ADA               	clrf	fsr2h,c
 19181  0020C2  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19182  0020C4  22DA               	addwfc	fsr2h,f,c
 19183  0020C6  0E4B               	movlw	75
 19184  0020C8  18DE               	xorwf	postinc2,w,c
 19185  0020CA  A4D8               	btfss	status,2,c
 19186  0020CC  D003               	goto	i2l7373
 19187                           
 19188                           ; BSR set to: 0
 19189                           ;eusart1.c: 373: muxSetup = 0;
 19190  0020CE  0E00               	movlw	0
 19191  0020D0  6FFB               	movwf	_muxSetup& (0+255),b
 19192  0020D2  D7D9               	goto	i2l7355
 19193  0020D4                     i2l7373:
 19194                           
 19195                           ; BSR set to: 0
 19196                           ;eusart1.c: 377: muxSetup = 0;
 19197  0020D4  0E00               	movlw	0
 19198  0020D6                     L7:
 19199  0020D6  6FFB               	movwf	_muxSetup& (0+255),b
 19200  0020D8  D2AB               	goto	i2l7631
 19201  0020DA                     i2l7375:
 19202  0020DA  0E02               	movlw	2
 19203  0020DC  1836               	xorwf	_unitTestCounter,w,c
 19204  0020DE  1037               	iorwf	_unitTestCounter+1,w,c
 19205  0020E0  A4D8               	btfss	status,2,c
 19206  0020E2  D020               	goto	i2l7391
 19207                           
 19208                           ;eusart1.c: 380: if (serverSetup ==0) {
 19209  0020E4  0100               	movlb	0	; () banked
 19210  0020E6  51FA               	movf	_serverSetup& (0+255),w,b
 19211  0020E8  A4D8               	btfss	status,2,c
 19212  0020EA  D00C               	goto	i2l7383
 19213                           
 19214                           ; BSR set to: 0
 19215                           ;eusart1.c: 381: if (eusart1RxBuffer[eusart1RxHead-1] == 'O') {
 19216  0020EC  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19217  0020EE  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19218  0020F0  6ED9               	movwf	fsr2l,c
 19219  0020F2  6ADA               	clrf	fsr2h,c
 19220  0020F4  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19221  0020F6  22DA               	addwfc	fsr2h,f,c
 19222  0020F8  0E4F               	movlw	79
 19223  0020FA  18DE               	xorwf	postinc2,w,c
 19224  0020FC  A4D8               	btfss	status,2,c
 19225  0020FE  D298               	goto	i2l7631
 19226                           
 19227                           ; BSR set to: 0
 19228                           ;eusart1.c: 383: serverSetup = 1;
 19229  002100  0E01               	movlw	1
 19230  002102  D00E               	goto	L8
 19231  002104                     i2l7383:
 19232                           
 19233                           ; BSR set to: 0
 19234  002104  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19235  002106  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19236  002108  6ED9               	movwf	fsr2l,c
 19237  00210A  6ADA               	clrf	fsr2h,c
 19238  00210C  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19239  00210E  22DA               	addwfc	fsr2h,f,c
 19240  002110  0E4B               	movlw	75
 19241  002112  18DE               	xorwf	postinc2,w,c
 19242  002114  A4D8               	btfss	status,2,c
 19243  002116  D003               	goto	i2l7389
 19244                           
 19245                           ; BSR set to: 0
 19246                           ;eusart1.c: 388: serverSetup = 0;
 19247  002118  0E00               	movlw	0
 19248  00211A  6FFA               	movwf	_serverSetup& (0+255),b
 19249  00211C  D7B4               	goto	i2l7355
 19250  00211E                     i2l7389:
 19251                           
 19252                           ; BSR set to: 0
 19253                           ;eusart1.c: 392: serverSetup = 0;
 19254  00211E  0E00               	movlw	0
 19255  002120                     L8:
 19256  002120  6FFA               	movwf	_serverSetup& (0+255),b
 19257  002122  D286               	goto	i2l7631
 19258  002124                     i2l7391:
 19259  002124  0E03               	movlw	3
 19260  002126  1836               	xorwf	_unitTestCounter,w,c
 19261  002128  1037               	iorwf	_unitTestCounter+1,w,c
 19262  00212A  A4D8               	btfss	status,2,c
 19263  00212C  D03E               	goto	i2l7415
 19264                           
 19265                           ;eusart1.c: 395: if (ipSetFlag == 0) {
 19266  00212E  0101               	movlb	1	; () banked
 19267  002130  5145               	movf	_ipSetFlag& (0+255),w,b
 19268  002132  1146               	iorwf	(_ipSetFlag+1)& (0+255),w,b
 19269  002134  A4D8               	btfss	status,2,c
 19270  002136  D00E               	goto	i2l7399
 19271                           
 19272                           ; BSR set to: 1
 19273                           ;eusart1.c: 396: if (eusart1RxBuffer[eusart1RxHead-1] == '1') {
 19274  002138  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19275  00213A  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19276  00213C  6ED9               	movwf	fsr2l,c
 19277  00213E  6ADA               	clrf	fsr2h,c
 19278  002140  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19279  002142  22DA               	addwfc	fsr2h,f,c
 19280  002144  0E31               	movlw	49
 19281  002146  18DE               	xorwf	postinc2,w,c
 19282  002148  A4D8               	btfss	status,2,c
 19283  00214A  D272               	goto	i2l7631
 19284                           
 19285                           ; BSR set to: 1
 19286                           ;eusart1.c: 398: ipSetFlag = 1;
 19287  00214C  0E00               	movlw	0
 19288  00214E  6F46               	movwf	(_ipSetFlag+1)& (0+255),b
 19289  002150  0E01               	movlw	1
 19290  002152  D029               	goto	L10
 19291  002154                     i2l7399:
 19292                           
 19293                           ; BSR set to: 1
 19294  002154  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19295  002156  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19296  002158  6ED9               	movwf	fsr2l,c
 19297  00215A  6ADA               	clrf	fsr2h,c
 19298  00215C  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19299  00215E  22DA               	addwfc	fsr2h,f,c
 19300  002160  0E39               	movlw	57
 19301  002162  18DE               	xorwf	postinc2,w,c
 19302  002164  A4D8               	btfss	status,2,c
 19303  002166  D008               	goto	i2l7405
 19304                           
 19305                           ; BSR set to: 1
 19306  002168  0545               	decf	_ipSetFlag& (0+255),w,b
 19307  00216A  1146               	iorwf	(_ipSetFlag+1)& (0+255),w,b
 19308  00216C  A4D8               	btfss	status,2,c
 19309  00216E  D004               	goto	i2l7405
 19310                           
 19311                           ; BSR set to: 1
 19312                           ;eusart1.c: 403: ipSetFlag = 2;
 19313  002170  0E00               	movlw	0
 19314  002172  6F46               	movwf	(_ipSetFlag+1)& (0+255),b
 19315  002174  0E02               	movlw	2
 19316  002176  D017               	goto	L10
 19317  002178                     i2l7405:
 19318                           
 19319                           ; BSR set to: 1
 19320  002178  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19321  00217A  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19322  00217C  6ED9               	movwf	fsr2l,c
 19323  00217E  6ADA               	clrf	fsr2h,c
 19324  002180  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19325  002182  22DA               	addwfc	fsr2h,f,c
 19326  002184  0E32               	movlw	50
 19327  002186  18DE               	xorwf	postinc2,w,c
 19328  002188  A4D8               	btfss	status,2,c
 19329  00218A  D00A               	goto	i2l7413
 19330                           
 19331                           ; BSR set to: 1
 19332  00218C  0E02               	movlw	2
 19333  00218E  1945               	xorwf	_ipSetFlag& (0+255),w,b
 19334  002190  1146               	iorwf	(_ipSetFlag+1)& (0+255),w,b
 19335  002192  A4D8               	btfss	status,2,c
 19336  002194  D005               	goto	i2l7413
 19337                           
 19338                           ; BSR set to: 1
 19339                           ;eusart1.c: 407: ipSetFlag = 0;
 19340  002196  0E00               	movlw	0
 19341  002198  6F46               	movwf	(_ipSetFlag+1)& (0+255),b
 19342  00219A  0E00               	movlw	0
 19343  00219C  6F45               	movwf	_ipSetFlag& (0+255),b
 19344  00219E  D773               	goto	i2l7355
 19345  0021A0                     i2l7413:
 19346                           
 19347                           ; BSR set to: 1
 19348                           ;eusart1.c: 411: ipSetFlag = 0;
 19349  0021A0  0E00               	movlw	0
 19350  0021A2  6F46               	movwf	(_ipSetFlag+1)& (0+255),b
 19351  0021A4  0E00               	movlw	0
 19352  0021A6                     L10:
 19353  0021A6  6F45               	movwf	_ipSetFlag& (0+255),b
 19354  0021A8  D243               	goto	i2l7631
 19355  0021AA                     i2l7415:
 19356  0021AA  0E04               	movlw	4
 19357  0021AC  1836               	xorwf	_unitTestCounter,w,c
 19358  0021AE  1037               	iorwf	_unitTestCounter+1,w,c
 19359  0021B0  A4D8               	btfss	status,2,c
 19360  0021B2  D23E               	goto	i2l7631
 19361                           
 19362                           ;eusart1.c: 414: if (commandReceive == 0 && commandReceive2 == 0 && commandReceive3 == 0
      +                           && commandReceive4 == 0) {
 19363  0021B4  0100               	movlb	0	; () banked
 19364  0021B6  51F9               	movf	_commandReceive& (0+255),w,b
 19365  0021B8  A4D8               	btfss	status,2,c
 19366  0021BA  D039               	goto	i2l7441
 19367                           
 19368                           ; BSR set to: 0
 19369  0021BC  51F8               	movf	_commandReceive2& (0+255),w,b
 19370  0021BE  A4D8               	btfss	status,2,c
 19371  0021C0  D036               	goto	i2l7441
 19372                           
 19373                           ; BSR set to: 0
 19374  0021C2  51F7               	movf	_commandReceive3& (0+255),w,b
 19375  0021C4  A4D8               	btfss	status,2,c
 19376  0021C6  D033               	goto	i2l7441
 19377                           
 19378                           ; BSR set to: 0
 19379  0021C8  51F6               	movf	_commandReceive4& (0+255),w,b
 19380  0021CA  A4D8               	btfss	status,2,c
 19381  0021CC  D030               	goto	i2l7441
 19382                           
 19383                           ; BSR set to: 0
 19384                           ;eusart1.c: 415: if (eusart1RxBuffer[eusart1RxHead-1] == 'S') {
 19385  0021CE  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19386  0021D0  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19387  0021D2  6ED9               	movwf	fsr2l,c
 19388  0021D4  6ADA               	clrf	fsr2h,c
 19389  0021D6  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19390  0021D8  22DA               	addwfc	fsr2h,f,c
 19391  0021DA  0E53               	movlw	83
 19392  0021DC  18DE               	xorwf	postinc2,w,c
 19393  0021DE  A4D8               	btfss	status,2,c
 19394  0021E0  D002               	goto	i2l7429
 19395                           
 19396                           ; BSR set to: 0
 19397                           ;eusart1.c: 417: commandReceive = 1;
 19398  0021E2  0E01               	movlw	1
 19399  0021E4  D090               	goto	L11
 19400  0021E6                     i2l7429:
 19401                           
 19402                           ; BSR set to: 0
 19403  0021E6  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19404  0021E8  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19405  0021EA  6ED9               	movwf	fsr2l,c
 19406  0021EC  6ADA               	clrf	fsr2h,c
 19407  0021EE  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19408  0021F0  22DA               	addwfc	fsr2h,f,c
 19409  0021F2  0E44               	movlw	68
 19410  0021F4  18DE               	xorwf	postinc2,w,c
 19411  0021F6  A4D8               	btfss	status,2,c
 19412  0021F8  D002               	goto	i2l7433
 19413                           
 19414                           ; BSR set to: 0
 19415                           ;eusart1.c: 421: commandReceive2 = 1;
 19416  0021FA  0E01               	movlw	1
 19417  0021FC  D1C1               	goto	L12
 19418  0021FE                     i2l7433:
 19419                           
 19420                           ; BSR set to: 0
 19421  0021FE  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19422  002200  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19423  002202  6ED9               	movwf	fsr2l,c
 19424  002204  6ADA               	clrf	fsr2h,c
 19425  002206  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19426  002208  22DA               	addwfc	fsr2h,f,c
 19427  00220A  0E58               	movlw	88
 19428  00220C  18DE               	xorwf	postinc2,w,c
 19429  00220E  A4D8               	btfss	status,2,c
 19430  002210  D002               	goto	i2l7437
 19431                           
 19432                           ; BSR set to: 0
 19433                           ;eusart1.c: 423: commandReceive3 = 1;
 19434  002212  0E01               	movlw	1
 19435  002214  D1E8               	goto	L13
 19436  002216                     i2l7437:
 19437                           
 19438                           ; BSR set to: 0
 19439  002216  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19440  002218  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19441  00221A  6ED9               	movwf	fsr2l,c
 19442  00221C  6ADA               	clrf	fsr2h,c
 19443  00221E  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19444  002220  22DA               	addwfc	fsr2h,f,c
 19445  002222  0E59               	movlw	89
 19446  002224  18DE               	xorwf	postinc2,w,c
 19447  002226  A4D8               	btfss	status,2,c
 19448  002228  D203               	goto	i2l7631
 19449                           
 19450                           ; BSR set to: 0
 19451                           ;eusart1.c: 425: commandReceive4 = 1;
 19452  00222A  0E01               	movlw	1
 19453  00222C  D200               	goto	L14
 19454  00222E                     i2l7441:
 19455                           
 19456                           ; BSR set to: 0
 19457  00222E  05F9               	decf	_commandReceive& (0+255),w,b
 19458  002230  A4D8               	btfss	status,2,c
 19459  002232  D06B               	goto	i2l7475
 19460                           
 19461                           ; BSR set to: 0
 19462                           ;eusart1.c: 432: if (eusart1RxBuffer[eusart1RxHead-1] == '0') {
 19463  002234  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19464  002236  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19465  002238  6ED9               	movwf	fsr2l,c
 19466  00223A  6ADA               	clrf	fsr2h,c
 19467  00223C  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19468  00223E  22DA               	addwfc	fsr2h,f,c
 19469  002240  0E30               	movlw	48
 19470  002242  18DE               	xorwf	postinc2,w,c
 19471  002244  A4D8               	btfss	status,2,c
 19472  002246  D00A               	goto	i2l7449
 19473                           
 19474                           ; BSR set to: 0
 19475                           ;eusart1.c: 434: manualSpeed = 1;
 19476  002248  0E00               	movlw	0
 19477  00224A  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
 19478  00224C  0E01               	movlw	1
 19479  00224E  6FFE               	movwf	_manualSpeed& (0+255),b
 19480                           
 19481                           ; BSR set to: 0
 19482                           ;eusart1.c: 435: PWM5_LoadDutyValue(1023);
 19483  002250  0E03               	movlw	3
 19484  002252  6E02               	movwf	i2PWM5_LoadDutyValue@dutyValue+1,c
 19485  002254  6801               	setf	i2PWM5_LoadDutyValue@dutyValue,c
 19486  002256  ECE7  F02B         	call	i2_PWM5_LoadDutyValue	;wreg free
 19487                           
 19488                           ;eusart1.c: 437: } else if (eusart1RxBuffer[eusart1RxHead-1] == '1') {
 19489  00225A  D053               	goto	i2l325
 19490  00225C                     i2l7449:
 19491                           
 19492                           ; BSR set to: 0
 19493  00225C  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19494  00225E  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19495  002260  6ED9               	movwf	fsr2l,c
 19496  002262  6ADA               	clrf	fsr2h,c
 19497  002264  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19498  002266  22DA               	addwfc	fsr2h,f,c
 19499  002268  0E31               	movlw	49
 19500  00226A  18DE               	xorwf	postinc2,w,c
 19501  00226C  A4D8               	btfss	status,2,c
 19502  00226E  D00B               	goto	i2l7455
 19503                           
 19504                           ; BSR set to: 0
 19505                           ;eusart1.c: 439: manualSpeed = 1;
 19506  002270  0E00               	movlw	0
 19507  002272  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
 19508  002274  0E01               	movlw	1
 19509  002276  6FFE               	movwf	_manualSpeed& (0+255),b
 19510                           
 19511                           ; BSR set to: 0
 19512                           ;eusart1.c: 440: PWM5_LoadDutyValue(500);
 19513  002278  0E01               	movlw	1
 19514  00227A  6E02               	movwf	i2PWM5_LoadDutyValue@dutyValue+1,c
 19515  00227C  0EF4               	movlw	244
 19516  00227E  6E01               	movwf	i2PWM5_LoadDutyValue@dutyValue,c
 19517  002280  ECE7  F02B         	call	i2_PWM5_LoadDutyValue	;wreg free
 19518                           
 19519                           ;eusart1.c: 442: } else if (eusart1RxBuffer[eusart1RxHead-1] == '2') {
 19520  002284  D03E               	goto	i2l325
 19521  002286                     i2l7455:
 19522                           
 19523                           ; BSR set to: 0
 19524  002286  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19525  002288  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19526  00228A  6ED9               	movwf	fsr2l,c
 19527  00228C  6ADA               	clrf	fsr2h,c
 19528  00228E  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19529  002290  22DA               	addwfc	fsr2h,f,c
 19530  002292  0E32               	movlw	50
 19531  002294  18DE               	xorwf	postinc2,w,c
 19532  002296  A4D8               	btfss	status,2,c
 19533  002298  D00B               	goto	i2l7461
 19534                           
 19535                           ; BSR set to: 0
 19536                           ;eusart1.c: 444: manualSpeed = 2;
 19537  00229A  0E00               	movlw	0
 19538  00229C  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
 19539  00229E  0E02               	movlw	2
 19540  0022A0  6FFE               	movwf	_manualSpeed& (0+255),b
 19541                           
 19542                           ; BSR set to: 0
 19543                           ;eusart1.c: 445: PWM5_LoadDutyValue(330);
 19544  0022A2  0E01               	movlw	1
 19545  0022A4  6E02               	movwf	i2PWM5_LoadDutyValue@dutyValue+1,c
 19546  0022A6  0E4A               	movlw	74
 19547  0022A8  6E01               	movwf	i2PWM5_LoadDutyValue@dutyValue,c
 19548  0022AA  ECE7  F02B         	call	i2_PWM5_LoadDutyValue	;wreg free
 19549                           
 19550                           ;eusart1.c: 447: } else if (eusart1RxBuffer[eusart1RxHead-1] == '3') {
 19551  0022AE  D029               	goto	i2l325
 19552  0022B0                     i2l7461:
 19553                           
 19554                           ; BSR set to: 0
 19555  0022B0  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19556  0022B2  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19557  0022B4  6ED9               	movwf	fsr2l,c
 19558  0022B6  6ADA               	clrf	fsr2h,c
 19559  0022B8  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19560  0022BA  22DA               	addwfc	fsr2h,f,c
 19561  0022BC  0E33               	movlw	51
 19562  0022BE  18DE               	xorwf	postinc2,w,c
 19563  0022C0  A4D8               	btfss	status,2,c
 19564  0022C2  D00B               	goto	i2l7467
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;eusart1.c: 449: manualSpeed = 3;
 19568  0022C4  0E00               	movlw	0
 19569  0022C6  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
 19570  0022C8  0E03               	movlw	3
 19571  0022CA  6FFE               	movwf	_manualSpeed& (0+255),b
 19572                           
 19573                           ; BSR set to: 0
 19574                           ;eusart1.c: 450: PWM5_LoadDutyValue(170);
 19575  0022CC  0E00               	movlw	0
 19576  0022CE  6E02               	movwf	i2PWM5_LoadDutyValue@dutyValue+1,c
 19577  0022D0  0EAA               	movlw	170
 19578  0022D2  6E01               	movwf	i2PWM5_LoadDutyValue@dutyValue,c
 19579  0022D4  ECE7  F02B         	call	i2_PWM5_LoadDutyValue	;wreg free
 19580                           
 19581                           ;eusart1.c: 452: } else if (eusart1RxBuffer[eusart1RxHead-1] == '4') {
 19582  0022D8  D014               	goto	i2l325
 19583  0022DA                     i2l7467:
 19584                           
 19585                           ; BSR set to: 0
 19586  0022DA  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19587  0022DC  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19588  0022DE  6ED9               	movwf	fsr2l,c
 19589  0022E0  6ADA               	clrf	fsr2h,c
 19590  0022E2  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19591  0022E4  22DA               	addwfc	fsr2h,f,c
 19592  0022E6  0E34               	movlw	52
 19593  0022E8  18DE               	xorwf	postinc2,w,c
 19594  0022EA  A4D8               	btfss	status,2,c
 19595  0022EC  D00A               	goto	i2l325
 19596                           
 19597                           ; BSR set to: 0
 19598                           ;eusart1.c: 454: manualSpeed = 4;
 19599  0022EE  0E00               	movlw	0
 19600  0022F0  6FFF               	movwf	(_manualSpeed+1)& (0+255),b
 19601  0022F2  0E04               	movlw	4
 19602  0022F4  6FFE               	movwf	_manualSpeed& (0+255),b
 19603                           
 19604                           ; BSR set to: 0
 19605                           ;eusart1.c: 455: PWM5_LoadDutyValue(0);
 19606  0022F6  0E00               	movlw	0
 19607  0022F8  6E02               	movwf	i2PWM5_LoadDutyValue@dutyValue+1,c
 19608  0022FA  0E00               	movlw	0
 19609  0022FC  6E01               	movwf	i2PWM5_LoadDutyValue@dutyValue,c
 19610  0022FE  ECE7  F02B         	call	i2_PWM5_LoadDutyValue	;wreg free
 19611  002302                     i2l325:
 19612                           
 19613                           ;eusart1.c: 457: };eusart1.c: 458: commandReceive = 0;
 19614                           
 19615                           ; BSR set to: 0
 19616  002302  0E00               	movlw	0
 19617  002304  0100               	movlb	0	; () banked
 19618  002306                     L11:
 19619  002306  6FF9               	movwf	_commandReceive& (0+255),b
 19620                           
 19621                           ;eusart1.c: 460: } else if (commandReceive2 == 1){
 19622  002308  D193               	goto	i2l7631
 19623  00230A                     i2l7475:
 19624                           
 19625                           ; BSR set to: 0
 19626  00230A  05F8               	decf	_commandReceive2& (0+255),w,b
 19627  00230C  A4D8               	btfss	status,2,c
 19628  00230E  D13A               	goto	i2l7607
 19629                           
 19630                           ; BSR set to: 0
 19631                           ;eusart1.c: 461: if (eusart1RxBuffer[eusart1RxHead-1] == '1') {
 19632  002310  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19633  002312  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19634  002314  6ED9               	movwf	fsr2l,c
 19635  002316  6ADA               	clrf	fsr2h,c
 19636  002318  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19637  00231A  22DA               	addwfc	fsr2h,f,c
 19638  00231C  0E31               	movlw	49
 19639  00231E  18DE               	xorwf	postinc2,w,c
 19640  002320  A4D8               	btfss	status,2,c
 19641  002322  D01D               	goto	i2l7493
 19642                           
 19643                           ; BSR set to: 0
 19644                           ;eusart1.c: 463: for (int i = 0; i < 12; i++) {
 19645  002324  0E00               	movlw	0
 19646  002326  6E07               	movwf	EUSART1_RxDataHandler@i+1,c
 19647  002328  0E00               	movlw	0
 19648  00232A  6E06               	movwf	EUSART1_RxDataHandler@i,c
 19649  00232C                     i2l7485:
 19650                           
 19651                           ;eusart1.c: 464: _delay((unsigned long)((50)*(8000000/4000.0)));
 19652  00232C  0E82               	movlw	130
 19653  00232E  6E05               	movwf	??_EUSART1_RxDataHandler& (0+255),c
 19654  002330  0EDE               	movlw	222
 19655  002332                     i2u1428_47:
 19656  002332  2EE8               	decfsz	wreg,f,c
 19657  002334  D7FE               	bra	i2u1428_47
 19658  002336  2E05               	decfsz	??_EUSART1_RxDataHandler& (0+255),f,c
 19659  002338  D7FC               	bra	i2u1428_47
 19660                           
 19661                           ;eusart1.c: 465: _step_(0);
 19662  00233A  0E00               	movlw	0
 19663  00233C  6E02               	movwf	__step_@stepDirection+1,c
 19664  00233E  0E00               	movlw	0
 19665  002340  6E01               	movwf	__step_@stepDirection,c
 19666  002342  EC13  F029         	call	__step_	;wreg free
 19667  002346  4A06               	infsnz	EUSART1_RxDataHandler@i,f,c
 19668  002348  2A07               	incf	EUSART1_RxDataHandler@i+1,f,c
 19669  00234A  BE07               	btfsc	EUSART1_RxDataHandler@i+1,7,c
 19670  00234C  D7EF               	goto	i2l7485
 19671  00234E  5007               	movf	EUSART1_RxDataHandler@i+1,w,c
 19672  002350  E105               	bnz	i2u766_40
 19673  002352  0E0C               	movlw	12
 19674  002354  5C06               	subwf	EUSART1_RxDataHandler@i,w,c
 19675  002356  B0D8               	btfsc	status,0,c
 19676  002358  D111               	goto	i2l7605
 19677  00235A  D7E8               	goto	i2l7485
 19678  00235C                     i2u766_40:
 19679  00235C  D10F               	goto	i2l7605
 19680  00235E                     i2l7493:
 19681                           
 19682                           ; BSR set to: 0
 19683  00235E  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19684  002360  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19685  002362  6ED9               	movwf	fsr2l,c
 19686  002364  6ADA               	clrf	fsr2h,c
 19687  002366  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19688  002368  22DA               	addwfc	fsr2h,f,c
 19689  00236A  0E32               	movlw	50
 19690  00236C  18DE               	xorwf	postinc2,w,c
 19691  00236E  A4D8               	btfss	status,2,c
 19692  002370  D01D               	goto	i2l7509
 19693                           
 19694                           ; BSR set to: 0
 19695                           ;eusart1.c: 470: for (int i = 0; i < 24; i++) {
 19696  002372  0E00               	movlw	0
 19697  002374  6E09               	movwf	EUSART1_RxDataHandler@i_530+1,c
 19698  002376  0E00               	movlw	0
 19699  002378  6E08               	movwf	EUSART1_RxDataHandler@i_530,c
 19700  00237A                     i2l7501:
 19701                           
 19702                           ;eusart1.c: 471: _delay((unsigned long)((50)*(8000000/4000.0)));
 19703  00237A  0E82               	movlw	130
 19704  00237C  6E05               	movwf	??_EUSART1_RxDataHandler& (0+255),c
 19705  00237E  0EDE               	movlw	222
 19706  002380                     i2u1429_47:
 19707  002380  2EE8               	decfsz	wreg,f,c
 19708  002382  D7FE               	bra	i2u1429_47
 19709  002384  2E05               	decfsz	??_EUSART1_RxDataHandler& (0+255),f,c
 19710  002386  D7FC               	bra	i2u1429_47
 19711                           
 19712                           ;eusart1.c: 472: _step_(0);
 19713  002388  0E00               	movlw	0
 19714  00238A  6E02               	movwf	__step_@stepDirection+1,c
 19715  00238C  0E00               	movlw	0
 19716  00238E  6E01               	movwf	__step_@stepDirection,c
 19717  002390  EC13  F029         	call	__step_	;wreg free
 19718  002394  4A08               	infsnz	EUSART1_RxDataHandler@i_530,f,c
 19719  002396  2A09               	incf	EUSART1_RxDataHandler@i_530+1,f,c
 19720  002398  BE09               	btfsc	EUSART1_RxDataHandler@i_530+1,7,c
 19721  00239A  D7EF               	goto	i2l7501
 19722  00239C  5009               	movf	EUSART1_RxDataHandler@i_530+1,w,c
 19723  00239E  E105               	bnz	i2u768_40
 19724  0023A0  0E18               	movlw	24
 19725  0023A2  5C08               	subwf	EUSART1_RxDataHandler@i_530,w,c
 19726  0023A4  B0D8               	btfsc	status,0,c
 19727  0023A6  D0EA               	goto	i2l7605
 19728  0023A8  D7E8               	goto	i2l7501
 19729  0023AA                     i2u768_40:
 19730  0023AA  D0E8               	goto	i2l7605
 19731  0023AC                     i2l7509:
 19732                           
 19733                           ; BSR set to: 0
 19734  0023AC  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19735  0023AE  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19736  0023B0  6ED9               	movwf	fsr2l,c
 19737  0023B2  6ADA               	clrf	fsr2h,c
 19738  0023B4  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19739  0023B6  22DA               	addwfc	fsr2h,f,c
 19740  0023B8  0E33               	movlw	51
 19741  0023BA  18DE               	xorwf	postinc2,w,c
 19742  0023BC  A4D8               	btfss	status,2,c
 19743  0023BE  D01D               	goto	i2l7525
 19744                           
 19745                           ; BSR set to: 0
 19746                           ;eusart1.c: 478: for (int i = 0; i < 36; i++) {
 19747  0023C0  0E00               	movlw	0
 19748  0023C2  6E0B               	movwf	EUSART1_RxDataHandler@i_531+1,c
 19749  0023C4  0E00               	movlw	0
 19750  0023C6  6E0A               	movwf	EUSART1_RxDataHandler@i_531,c
 19751  0023C8                     i2l7517:
 19752                           
 19753                           ;eusart1.c: 479: _delay((unsigned long)((50)*(8000000/4000.0)));
 19754  0023C8  0E82               	movlw	130
 19755  0023CA  6E05               	movwf	??_EUSART1_RxDataHandler& (0+255),c
 19756  0023CC  0EDE               	movlw	222
 19757  0023CE                     i2u1430_47:
 19758  0023CE  2EE8               	decfsz	wreg,f,c
 19759  0023D0  D7FE               	bra	i2u1430_47
 19760  0023D2  2E05               	decfsz	??_EUSART1_RxDataHandler& (0+255),f,c
 19761  0023D4  D7FC               	bra	i2u1430_47
 19762                           
 19763                           ;eusart1.c: 480: _step_(0);
 19764  0023D6  0E00               	movlw	0
 19765  0023D8  6E02               	movwf	__step_@stepDirection+1,c
 19766  0023DA  0E00               	movlw	0
 19767  0023DC  6E01               	movwf	__step_@stepDirection,c
 19768  0023DE  EC13  F029         	call	__step_	;wreg free
 19769  0023E2  4A0A               	infsnz	EUSART1_RxDataHandler@i_531,f,c
 19770  0023E4  2A0B               	incf	EUSART1_RxDataHandler@i_531+1,f,c
 19771  0023E6  BE0B               	btfsc	EUSART1_RxDataHandler@i_531+1,7,c
 19772  0023E8  D7EF               	goto	i2l7517
 19773  0023EA  500B               	movf	EUSART1_RxDataHandler@i_531+1,w,c
 19774  0023EC  E105               	bnz	i2u770_40
 19775  0023EE  0E24               	movlw	36
 19776  0023F0  5C0A               	subwf	EUSART1_RxDataHandler@i_531,w,c
 19777  0023F2  B0D8               	btfsc	status,0,c
 19778  0023F4  D0C3               	goto	i2l7605
 19779  0023F6  D7E8               	goto	i2l7517
 19780  0023F8                     i2u770_40:
 19781  0023F8  D0C1               	goto	i2l7605
 19782  0023FA                     i2l7525:
 19783                           
 19784                           ; BSR set to: 0
 19785  0023FA  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19786  0023FC  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19787  0023FE  6ED9               	movwf	fsr2l,c
 19788  002400  6ADA               	clrf	fsr2h,c
 19789  002402  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19790  002404  22DA               	addwfc	fsr2h,f,c
 19791  002406  0E34               	movlw	52
 19792  002408  18DE               	xorwf	postinc2,w,c
 19793  00240A  A4D8               	btfss	status,2,c
 19794  00240C  D01D               	goto	i2l7541
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;eusart1.c: 485: for (int i = 0; i < 12; i++) {
 19798  00240E  0E00               	movlw	0
 19799  002410  6E0D               	movwf	EUSART1_RxDataHandler@i_532+1,c
 19800  002412  0E00               	movlw	0
 19801  002414  6E0C               	movwf	EUSART1_RxDataHandler@i_532,c
 19802  002416                     i2l7533:
 19803                           
 19804                           ;eusart1.c: 486: _delay((unsigned long)((50)*(8000000/4000.0)));
 19805  002416  0E82               	movlw	130
 19806  002418  6E05               	movwf	??_EUSART1_RxDataHandler& (0+255),c
 19807  00241A  0EDE               	movlw	222
 19808  00241C                     i2u1431_47:
 19809  00241C  2EE8               	decfsz	wreg,f,c
 19810  00241E  D7FE               	bra	i2u1431_47
 19811  002420  2E05               	decfsz	??_EUSART1_RxDataHandler& (0+255),f,c
 19812  002422  D7FC               	bra	i2u1431_47
 19813                           
 19814                           ;eusart1.c: 487: _stepReverse_(0);
 19815  002424  0E00               	movlw	0
 19816  002426  6E02               	movwf	__stepReverse_@stepDirection+1,c
 19817  002428  0E00               	movlw	0
 19818  00242A  6E01               	movwf	__stepReverse_@stepDirection,c
 19819  00242C  ECBC  F028         	call	__stepReverse_	;wreg free
 19820  002430  4A0C               	infsnz	EUSART1_RxDataHandler@i_532,f,c
 19821  002432  2A0D               	incf	EUSART1_RxDataHandler@i_532+1,f,c
 19822  002434  BE0D               	btfsc	EUSART1_RxDataHandler@i_532+1,7,c
 19823  002436  D7EF               	goto	i2l7533
 19824  002438  500D               	movf	EUSART1_RxDataHandler@i_532+1,w,c
 19825  00243A  E105               	bnz	i2u772_40
 19826  00243C  0E0C               	movlw	12
 19827  00243E  5C0C               	subwf	EUSART1_RxDataHandler@i_532,w,c
 19828  002440  B0D8               	btfsc	status,0,c
 19829  002442  D09C               	goto	i2l7605
 19830  002444  D7E8               	goto	i2l7533
 19831  002446                     i2u772_40:
 19832  002446  D09A               	goto	i2l7605
 19833  002448                     i2l7541:
 19834                           
 19835                           ; BSR set to: 0
 19836  002448  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19837  00244A  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19838  00244C  6ED9               	movwf	fsr2l,c
 19839  00244E  6ADA               	clrf	fsr2h,c
 19840  002450  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19841  002452  22DA               	addwfc	fsr2h,f,c
 19842  002454  0E35               	movlw	53
 19843  002456  18DE               	xorwf	postinc2,w,c
 19844  002458  A4D8               	btfss	status,2,c
 19845  00245A  D01E               	goto	i2l7557
 19846                           
 19847                           ; BSR set to: 0
 19848                           ;eusart1.c: 492: for (int i = 0; i < 24; i++) {
 19849  00245C  0E00               	movlw	0
 19850  00245E  6E0F               	movwf	EUSART1_RxDataHandler@i_534+1,c
 19851  002460  0E00               	movlw	0
 19852  002462  6E0E               	movwf	EUSART1_RxDataHandler@i_534,c
 19853  002464                     i2l7545:
 19854  002464  BE0F               	btfsc	EUSART1_RxDataHandler@i_534+1,7,c
 19855  002466  D008               	goto	i2l7549
 19856  002468  500F               	movf	EUSART1_RxDataHandler@i_534+1,w,c
 19857  00246A  E105               	bnz	i2u774_40
 19858  00246C  0E18               	movlw	24
 19859  00246E  5C0E               	subwf	EUSART1_RxDataHandler@i_534,w,c
 19860  002470  B0D8               	btfsc	status,0,c
 19861  002472  D084               	goto	i2l7605
 19862  002474  D001               	goto	i2l7549
 19863  002476                     i2u774_40:
 19864  002476  D082               	goto	i2l7605
 19865  002478                     i2l7549:
 19866                           
 19867                           ;eusart1.c: 493: _delay((unsigned long)((50)*(8000000/4000.0)));
 19868  002478  0E82               	movlw	130
 19869  00247A  6E05               	movwf	??_EUSART1_RxDataHandler& (0+255),c
 19870  00247C  0EDE               	movlw	222
 19871  00247E                     i2u1432_47:
 19872  00247E  2EE8               	decfsz	wreg,f,c
 19873  002480  D7FE               	bra	i2u1432_47
 19874  002482  2E05               	decfsz	??_EUSART1_RxDataHandler& (0+255),f,c
 19875  002484  D7FC               	bra	i2u1432_47
 19876                           
 19877                           ;eusart1.c: 494: _stepReverse_(0);
 19878  002486  0E00               	movlw	0
 19879  002488  6E02               	movwf	__stepReverse_@stepDirection+1,c
 19880  00248A  0E00               	movlw	0
 19881  00248C  6E01               	movwf	__stepReverse_@stepDirection,c
 19882  00248E  ECBC  F028         	call	__stepReverse_	;wreg free
 19883  002492  4A0E               	infsnz	EUSART1_RxDataHandler@i_534,f,c
 19884  002494  2A0F               	incf	EUSART1_RxDataHandler@i_534+1,f,c
 19885  002496  D7E6               	goto	i2l7545
 19886  002498                     i2l7557:
 19887                           
 19888                           ; BSR set to: 0
 19889  002498  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19890  00249A  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19891  00249C  6ED9               	movwf	fsr2l,c
 19892  00249E  6ADA               	clrf	fsr2h,c
 19893  0024A0  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19894  0024A2  22DA               	addwfc	fsr2h,f,c
 19895  0024A4  0E36               	movlw	54
 19896  0024A6  18DE               	xorwf	postinc2,w,c
 19897  0024A8  A4D8               	btfss	status,2,c
 19898  0024AA  D01C               	goto	i2l7573
 19899                           
 19900                           ; BSR set to: 0
 19901                           ;eusart1.c: 500: for (int i = 0; i < 36; i++) {
 19902  0024AC  0E00               	movlw	0
 19903  0024AE  6E11               	movwf	EUSART1_RxDataHandler@i_535+1,c
 19904  0024B0  0E00               	movlw	0
 19905  0024B2  6E10               	movwf	EUSART1_RxDataHandler@i_535,c
 19906  0024B4                     i2l7561:
 19907  0024B4  BE11               	btfsc	EUSART1_RxDataHandler@i_535+1,7,c
 19908  0024B6  D006               	goto	i2l7565
 19909  0024B8  5011               	movf	EUSART1_RxDataHandler@i_535+1,w,c
 19910  0024BA  E160               	bnz	i2l7605
 19911  0024BC  0E24               	movlw	36
 19912  0024BE  5C10               	subwf	EUSART1_RxDataHandler@i_535,w,c
 19913  0024C0  B0D8               	btfsc	status,0,c
 19914  0024C2  D05C               	goto	i2l7605
 19915  0024C4                     i2l7565:
 19916                           
 19917                           ;eusart1.c: 501: _delay((unsigned long)((50)*(8000000/4000.0)));
 19918  0024C4  0E82               	movlw	130
 19919  0024C6  6E05               	movwf	??_EUSART1_RxDataHandler& (0+255),c
 19920  0024C8  0EDE               	movlw	222
 19921  0024CA                     i2u1433_47:
 19922  0024CA  2EE8               	decfsz	wreg,f,c
 19923  0024CC  D7FE               	bra	i2u1433_47
 19924  0024CE  2E05               	decfsz	??_EUSART1_RxDataHandler& (0+255),f,c
 19925  0024D0  D7FC               	bra	i2u1433_47
 19926                           
 19927                           ;eusart1.c: 502: _stepReverse_(0);
 19928  0024D2  0E00               	movlw	0
 19929  0024D4  6E02               	movwf	__stepReverse_@stepDirection+1,c
 19930  0024D6  0E00               	movlw	0
 19931  0024D8  6E01               	movwf	__stepReverse_@stepDirection,c
 19932  0024DA  ECBC  F028         	call	__stepReverse_	;wreg free
 19933  0024DE  4A10               	infsnz	EUSART1_RxDataHandler@i_535,f,c
 19934  0024E0  2A11               	incf	EUSART1_RxDataHandler@i_535+1,f,c
 19935  0024E2  D7E8               	goto	i2l7561
 19936  0024E4                     i2l7573:
 19937                           
 19938                           ; BSR set to: 0
 19939  0024E4  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19940  0024E6  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19941  0024E8  6ED9               	movwf	fsr2l,c
 19942  0024EA  6ADA               	clrf	fsr2h,c
 19943  0024EC  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19944  0024EE  22DA               	addwfc	fsr2h,f,c
 19945  0024F0  0E37               	movlw	55
 19946  0024F2  18DE               	xorwf	postinc2,w,c
 19947  0024F4  A4D8               	btfss	status,2,c
 19948  0024F6  D01C               	goto	i2l7589
 19949                           
 19950                           ; BSR set to: 0
 19951                           ;eusart1.c: 507: for (int i = 0; i < 6; i++) {
 19952  0024F8  0E00               	movlw	0
 19953  0024FA  6E13               	movwf	EUSART1_RxDataHandler@i_536+1,c
 19954  0024FC  0E00               	movlw	0
 19955  0024FE  6E12               	movwf	EUSART1_RxDataHandler@i_536,c
 19956  002500                     i2l7577:
 19957  002500  BE13               	btfsc	EUSART1_RxDataHandler@i_536+1,7,c
 19958  002502  D006               	goto	i2l7581
 19959  002504  5013               	movf	EUSART1_RxDataHandler@i_536+1,w,c
 19960  002506  E13A               	bnz	i2l7605
 19961  002508  0E06               	movlw	6
 19962  00250A  5C12               	subwf	EUSART1_RxDataHandler@i_536,w,c
 19963  00250C  B0D8               	btfsc	status,0,c
 19964  00250E  D036               	goto	i2l7605
 19965  002510                     i2l7581:
 19966                           
 19967                           ;eusart1.c: 508: _delay((unsigned long)((50)*(8000000/4000.0)));
 19968  002510  0E82               	movlw	130
 19969  002512  6E05               	movwf	??_EUSART1_RxDataHandler& (0+255),c
 19970  002514  0EDE               	movlw	222
 19971  002516                     i2u1434_47:
 19972  002516  2EE8               	decfsz	wreg,f,c
 19973  002518  D7FE               	bra	i2u1434_47
 19974  00251A  2E05               	decfsz	??_EUSART1_RxDataHandler& (0+255),f,c
 19975  00251C  D7FC               	bra	i2u1434_47
 19976                           
 19977                           ;eusart1.c: 509: _step_(0);
 19978  00251E  0E00               	movlw	0
 19979  002520  6E02               	movwf	__step_@stepDirection+1,c
 19980  002522  0E00               	movlw	0
 19981  002524  6E01               	movwf	__step_@stepDirection,c
 19982  002526  EC13  F029         	call	__step_	;wreg free
 19983  00252A  4A12               	infsnz	EUSART1_RxDataHandler@i_536,f,c
 19984  00252C  2A13               	incf	EUSART1_RxDataHandler@i_536+1,f,c
 19985  00252E  D7E8               	goto	i2l7577
 19986  002530                     i2l7589:
 19987                           
 19988                           ; BSR set to: 0
 19989  002530  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 19990  002532  243B               	addwf	_eusart1RxHead,w,c	;volatile
 19991  002534  6ED9               	movwf	fsr2l,c
 19992  002536  6ADA               	clrf	fsr2h,c
 19993  002538  0E00               	movlw	high (_eusart1RxBuffer+65535)
 19994  00253A  22DA               	addwfc	fsr2h,f,c
 19995  00253C  0E38               	movlw	56
 19996  00253E  18DE               	xorwf	postinc2,w,c
 19997  002540  A4D8               	btfss	status,2,c
 19998  002542  D01C               	goto	i2l7605
 19999                           
 20000                           ; BSR set to: 0
 20001                           ;eusart1.c: 514: for (int i = 0; i < 6; i++) {
 20002  002544  0E00               	movlw	0
 20003  002546  6E15               	movwf	EUSART1_RxDataHandler@i_537+1,c
 20004  002548  0E00               	movlw	0
 20005  00254A  6E14               	movwf	EUSART1_RxDataHandler@i_537,c
 20006  00254C                     i2l7593:
 20007  00254C  BE15               	btfsc	EUSART1_RxDataHandler@i_537+1,7,c
 20008  00254E  D006               	goto	i2l7597
 20009  002550  5015               	movf	EUSART1_RxDataHandler@i_537+1,w,c
 20010  002552  E114               	bnz	i2l7605
 20011  002554  0E06               	movlw	6
 20012  002556  5C14               	subwf	EUSART1_RxDataHandler@i_537,w,c
 20013  002558  B0D8               	btfsc	status,0,c
 20014  00255A  D010               	goto	i2l7605
 20015  00255C                     i2l7597:
 20016                           
 20017                           ;eusart1.c: 515: _delay((unsigned long)((50)*(8000000/4000.0)));
 20018  00255C  0E82               	movlw	130
 20019  00255E  6E05               	movwf	??_EUSART1_RxDataHandler& (0+255),c
 20020  002560  0EDE               	movlw	222
 20021  002562                     i2u1435_47:
 20022  002562  2EE8               	decfsz	wreg,f,c
 20023  002564  D7FE               	bra	i2u1435_47
 20024  002566  2E05               	decfsz	??_EUSART1_RxDataHandler& (0+255),f,c
 20025  002568  D7FC               	bra	i2u1435_47
 20026                           
 20027                           ;eusart1.c: 516: _stepReverse_(0);
 20028  00256A  0E00               	movlw	0
 20029  00256C  6E02               	movwf	__stepReverse_@stepDirection+1,c
 20030  00256E  0E00               	movlw	0
 20031  002570  6E01               	movwf	__stepReverse_@stepDirection,c
 20032  002572  ECBC  F028         	call	__stepReverse_	;wreg free
 20033  002576  4A14               	infsnz	EUSART1_RxDataHandler@i_537,f,c
 20034  002578  2A15               	incf	EUSART1_RxDataHandler@i_537+1,f,c
 20035  00257A  D7E8               	goto	i2l7593
 20036  00257C                     i2l7605:
 20037                           
 20038                           ;eusart1.c: 517: };eusart1.c: 519: };eusart1.c: 521: commandReceive2 = 0;
 20039  00257C  0E00               	movlw	0
 20040  00257E  0100               	movlb	0	; () banked
 20041  002580                     L12:
 20042  002580  6FF8               	movwf	_commandReceive2& (0+255),b
 20043                           
 20044                           ;eusart1.c: 523: } else if (commandReceive3 == 1){
 20045  002582  D056               	goto	i2l7631
 20046  002584                     i2l7607:
 20047                           
 20048                           ; BSR set to: 0
 20049  002584  05F7               	decf	_commandReceive3& (0+255),w,b
 20050  002586  A4D8               	btfss	status,2,c
 20051  002588  D030               	goto	i2l7621
 20052                           
 20053                           ; BSR set to: 0
 20054                           ;eusart1.c: 524: if (eusart1RxBuffer[eusart1RxHead-1] == '3') {
 20055  00258A  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 20056  00258C  243B               	addwf	_eusart1RxHead,w,c	;volatile
 20057  00258E  6ED9               	movwf	fsr2l,c
 20058  002590  6ADA               	clrf	fsr2h,c
 20059  002592  0E00               	movlw	high (_eusart1RxBuffer+65535)
 20060  002594  22DA               	addwfc	fsr2h,f,c
 20061  002596  0E33               	movlw	51
 20062  002598  18DE               	xorwf	postinc2,w,c
 20063  00259A  A4D8               	btfss	status,2,c
 20064  00259C  D004               	goto	i2l7613
 20065                           
 20066                           ; BSR set to: 0
 20067                           ;eusart1.c: 525: sensorsRead = 1;
 20068  00259E  0E01               	movlw	1
 20069  0025A0  0101               	movlb	1	; () banked
 20070  0025A2  6F4A               	movwf	_sensorsRead& (0+255),b
 20071                           
 20072                           ;eusart1.c: 527: } else if (eusart1RxBuffer[eusart1RxHead-1] == '4') {
 20073  0025A4  D01E               	goto	i2l367
 20074  0025A6                     i2l7613:
 20075                           
 20076                           ; BSR set to: 0
 20077  0025A6  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 20078  0025A8  243B               	addwf	_eusart1RxHead,w,c	;volatile
 20079  0025AA  6ED9               	movwf	fsr2l,c
 20080  0025AC  6ADA               	clrf	fsr2h,c
 20081  0025AE  0E00               	movlw	high (_eusart1RxBuffer+65535)
 20082  0025B0  22DA               	addwfc	fsr2h,f,c
 20083  0025B2  0E34               	movlw	52
 20084  0025B4  18DE               	xorwf	postinc2,w,c
 20085  0025B6  A4D8               	btfss	status,2,c
 20086  0025B8  D005               	goto	i2l7617
 20087                           
 20088                           ; BSR set to: 0
 20089                           ;eusart1.c: 529: sensorsRead = 1;
 20090  0025BA  0E01               	movlw	1
 20091  0025BC  0101               	movlb	1	; () banked
 20092  0025BE  6F4A               	movwf	_sensorsRead& (0+255),b
 20093                           
 20094                           ;eusart1.c: 530: autoMode = 1;
 20095  0025C0  0E01               	movlw	1
 20096  0025C2  D00E               	goto	L15
 20097  0025C4                     i2l7617:
 20098                           
 20099                           ; BSR set to: 0
 20100  0025C4  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 20101  0025C6  243B               	addwf	_eusart1RxHead,w,c	;volatile
 20102  0025C8  6ED9               	movwf	fsr2l,c
 20103  0025CA  6ADA               	clrf	fsr2h,c
 20104  0025CC  0E00               	movlw	high (_eusart1RxBuffer+65535)
 20105  0025CE  22DA               	addwfc	fsr2h,f,c
 20106  0025D0  0E32               	movlw	50
 20107  0025D2  18DE               	xorwf	postinc2,w,c
 20108  0025D4  A4D8               	btfss	status,2,c
 20109  0025D6  D005               	goto	i2l367
 20110                           
 20111                           ; BSR set to: 0
 20112                           ;eusart1.c: 533: sensorsRead = 1;
 20113  0025D8  0E01               	movlw	1
 20114  0025DA  0101               	movlb	1	; () banked
 20115  0025DC  6F4A               	movwf	_sensorsRead& (0+255),b
 20116                           
 20117                           ;eusart1.c: 534: autoMode = 0;
 20118  0025DE  0E00               	movlw	0
 20119  0025E0                     L15:
 20120  0025E0  6F49               	movwf	_autoMode& (0+255),b
 20121  0025E2                     i2l367:
 20122                           
 20123                           ;eusart1.c: 535: };eusart1.c: 537: commandReceive3 = 0;
 20124  0025E2  0E00               	movlw	0
 20125  0025E4  0100               	movlb	0	; () banked
 20126  0025E6                     L13:
 20127  0025E6  6FF7               	movwf	_commandReceive3& (0+255),b
 20128                           
 20129                           ;eusart1.c: 539: } else if (commandReceive4 == 1){
 20130  0025E8  D023               	goto	i2l7631
 20131  0025EA                     i2l7621:
 20132                           
 20133                           ; BSR set to: 0
 20134  0025EA  05F6               	decf	_commandReceive4& (0+255),w,b
 20135  0025EC  A4D8               	btfss	status,2,c
 20136  0025EE  D018               	goto	i2l7629
 20137                           
 20138                           ; BSR set to: 0
 20139                           ;eusart1.c: 540: if (eusart1RxBuffer[eusart1RxHead-1] == '0') {
 20140  0025F0  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 20141  0025F2  243B               	addwf	_eusart1RxHead,w,c	;volatile
 20142  0025F4  6ED9               	movwf	fsr2l,c
 20143  0025F6  6ADA               	clrf	fsr2h,c
 20144  0025F8  0E00               	movlw	high (_eusart1RxBuffer+65535)
 20145  0025FA  22DA               	addwfc	fsr2h,f,c
 20146  0025FC  0E30               	movlw	48
 20147  0025FE  18DE               	xorwf	postinc2,w,c
 20148  002600  A4D8               	btfss	status,2,c
 20149  002602  D002               	goto	i2l7625
 20150                           
 20151                           ; BSR set to: 0
 20152                           
 20153                           ;eusart1.c: 542: do { LATAbits.LATA0 = 0; } while(0);
 20154  002604  9089               	bcf	3977,0,c	;volatile
 20155  002606  D012               	goto	L16
 20156  002608                     i2l7625:
 20157                           
 20158                           ; BSR set to: 0
 20159  002608  0E2B               	movlw	low (_eusart1RxBuffer+65535)
 20160  00260A  243B               	addwf	_eusart1RxHead,w,c	;volatile
 20161  00260C  6ED9               	movwf	fsr2l,c
 20162  00260E  6ADA               	clrf	fsr2h,c
 20163  002610  0E00               	movlw	high (_eusart1RxBuffer+65535)
 20164  002612  22DA               	addwfc	fsr2h,f,c
 20165  002614  0E31               	movlw	49
 20166  002616  18DE               	xorwf	postinc2,w,c
 20167  002618  A4D8               	btfss	status,2,c
 20168  00261A  D008               	goto	L16
 20169                           
 20170                           ; BSR set to: 0
 20171                           
 20172                           ;eusart1.c: 546: do { LATAbits.LATA0 = 1; } while(0);
 20173  00261C  8089               	bsf	3977,0,c	;volatile
 20174  00261E  D006               	goto	L16
 20175  002620                     i2l7629:
 20176                           
 20177                           ; BSR set to: 0
 20178                           ;eusart1.c: 553: commandReceive = 0;
 20179  002620  0E00               	movlw	0
 20180  002622  6FF9               	movwf	_commandReceive& (0+255),b
 20181                           
 20182                           ;eusart1.c: 554: commandReceive2 = 0;
 20183  002624  0E00               	movlw	0
 20184  002626  6FF8               	movwf	_commandReceive2& (0+255),b
 20185                           
 20186                           ;eusart1.c: 555: commandReceive3 = 0;
 20187  002628  0E00               	movlw	0
 20188  00262A  6FF7               	movwf	_commandReceive3& (0+255),b
 20189  00262C                     L16:
 20190                           
 20191                           ;eusart1.c: 556: commandReceive4 = 0;
 20192  00262C  0E00               	movlw	0
 20193  00262E                     L14:
 20194  00262E  6FF6               	movwf	_commandReceive4& (0+255),b
 20195  002630                     i2l7631:
 20196                           
 20197                           ;eusart1.c: 557: };eusart1.c: 558: };eusart1.c: 561: if(sizeof(eusart1RxBuffer) <= eusar
      +                          t1RxHead)
 20198  002630  0E07               	movlw	7
 20199  002632  643B               	cpfsgt	_eusart1RxHead,c	;volatile
 20200  002634  D002               	goto	i2l7635
 20201                           
 20202                           ;eusart1.c: 562: {;eusart1.c: 563: eusart1RxHead = 0;
 20203  002636  0E00               	movlw	0
 20204  002638  6E3B               	movwf	_eusart1RxHead,c	;volatile
 20205  00263A                     i2l7635:
 20206                           
 20207                           ;eusart1.c: 564: };eusart1.c: 565: eusart1RxCount++;
 20208  00263A  0100               	movlb	0	; () banked
 20209  00263C  2BFD               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20210                           
 20211                           ; BSR set to: 0
 20212  00263E  0012               	return		;funcret
 20213  002640                     __end_of_EUSART1_RxDataHandler:
 20214                           	opt callstack 0
 20215                           
 20216 ;; *************** function i2_PWM5_LoadDutyValue *****************
 20217 ;; Defined at:
 20218 ;;		line 82 in file "mcc_generated_files/pwm5.c"
 20219 ;; Parameters:    Size  Location     Type
 20220 ;;  dutyValue       2    0[COMRAM] unsigned int 
 20221 ;; Auto vars:     Size  Location     Type
 20222 ;;		None
 20223 ;; Return value:  Size  Location     Type
 20224 ;;                  1    wreg      void 
 20225 ;; Registers used:
 20226 ;;		wreg, status,2, status,0
 20227 ;; Tracked objects:
 20228 ;;		On entry : 0/0
 20229 ;;		On exit  : 0/0
 20230 ;;		Unchanged: 0/0
 20231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20232 ;;      Params:         2       0       0       0       0       0       0
 20233 ;;      Locals:         0       0       0       0       0       0       0
 20234 ;;      Temps:          2       0       0       0       0       0       0
 20235 ;;      Totals:         4       0       0       0       0       0       0
 20236 ;;Total ram usage:        4 bytes
 20237 ;; Hardware stack levels used:    1
 20238 ;; This function calls:
 20239 ;;		Nothing
 20240 ;; This function is called by:
 20241 ;;		_EUSART1_RxDataHandler
 20242 ;; This function uses a non-reentrant model
 20243 ;;
 20244                           
 20245                           	psect	text109
 20246  0057CE                     __ptext109:
 20247                           	opt callstack 0
 20248  0057CE                     i2_PWM5_LoadDutyValue:
 20249                           	opt callstack 19
 20250                           
 20251                           ;pwm5.c: 85: CCPR5L = ((dutyValue & 0x03FC)>>2);
 20252                           
 20253                           ; BSR set to: 0
 20254                           ;incstack = 0
 20255  0057CE  C001  F003         	movff	i2PWM5_LoadDutyValue@dutyValue,??i2_PWM5_LoadDutyValue
 20256  0057D2  C002  F004         	movff	i2PWM5_LoadDutyValue@dutyValue+1,??i2_PWM5_LoadDutyValue+1
 20257  0057D6  90D8               	bcf	status,0,c
 20258  0057D8  3204               	rrcf	??i2_PWM5_LoadDutyValue+1,f,c
 20259  0057DA  3203               	rrcf	??i2_PWM5_LoadDutyValue,f,c
 20260  0057DC  90D8               	bcf	status,0,c
 20261  0057DE  3204               	rrcf	??i2_PWM5_LoadDutyValue+1,f,c
 20262  0057E0  3203               	rrcf	??i2_PWM5_LoadDutyValue,f,c
 20263  0057E2  5003               	movf	??i2_PWM5_LoadDutyValue,w,c
 20264  0057E4  010F               	movlb	15	; () banked
 20265  0057E6  6F55               	movwf	85,b	;volatile
 20266                           
 20267                           ;pwm5.c: 88: CCP5CON = ((uint8_t)(CCP5CON & 0xCF) | ((dutyValue & 0x0003)<<4));
 20268  0057E8  C001  F003         	movff	i2PWM5_LoadDutyValue@dutyValue,??i2_PWM5_LoadDutyValue
 20269  0057EC  0E03               	movlw	3
 20270  0057EE  1603               	andwf	??i2_PWM5_LoadDutyValue,f,c
 20271  0057F0  3A03               	swapf	??i2_PWM5_LoadDutyValue,f,c
 20272  0057F2  0EF0               	movlw	240
 20273  0057F4  1603               	andwf	??i2_PWM5_LoadDutyValue,f,c
 20274  0057F6  5154               	movf	84,w,b	;volatile
 20275  0057F8  0BCF               	andlw	207
 20276  0057FA  1003               	iorwf	??i2_PWM5_LoadDutyValue,w,c
 20277  0057FC  6F54               	movwf	84,b	;volatile
 20278                           
 20279                           ; BSR set to: 15
 20280  0057FE  0012               	return		;funcret
 20281  005800                     __end_ofi2_PWM5_LoadDutyValue:
 20282                           	opt callstack 0
 20283                           
 20284 ;; *************** function __step_ *****************
 20285 ;; Defined at:
 20286 ;;		line 108 in file "mcc_generated_files/eusart1.c"
 20287 ;; Parameters:    Size  Location     Type
 20288 ;;  stepDirectio    2    0[COMRAM] int 
 20289 ;; Auto vars:     Size  Location     Type
 20290 ;;		None
 20291 ;; Return value:  Size  Location     Type
 20292 ;;                  1    wreg      void 
 20293 ;; Registers used:
 20294 ;;		wreg, status,2, status,0
 20295 ;; Tracked objects:
 20296 ;;		On entry : 0/0
 20297 ;;		On exit  : 0/0
 20298 ;;		Unchanged: 0/0
 20299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20300 ;;      Params:         2       0       0       0       0       0       0
 20301 ;;      Locals:         0       0       0       0       0       0       0
 20302 ;;      Temps:          0       0       0       0       0       0       0
 20303 ;;      Totals:         2       0       0       0       0       0       0
 20304 ;;Total ram usage:        2 bytes
 20305 ;; Hardware stack levels used:    1
 20306 ;; This function calls:
 20307 ;;		Nothing
 20308 ;; This function is called by:
 20309 ;;		_EUSART1_RxDataHandler
 20310 ;; This function uses a non-reentrant model
 20311 ;;
 20312                           
 20313                           	psect	text110
 20314  005226                     __ptext110:
 20315                           	opt callstack 0
 20316  005226                     __step_:
 20317                           	opt callstack 19
 20318                           
 20319                           ;eusart1.c: 110: if (step == 0){
 20320                           
 20321                           ; BSR set to: 15
 20322                           ;incstack = 0
 20323  005226  5034               	movf	_step,w,c
 20324  005228  1035               	iorwf	_step+1,w,c
 20325  00522A  A4D8               	btfss	status,2,c
 20326  00522C  D007               	goto	i2l6755
 20327                           
 20328                           ;eusart1.c: 111: do { LATDbits.LATD4 = 0; } while(0);
 20329  00522E  988C               	bcf	3980,4,c	;volatile
 20330                           
 20331                           ;eusart1.c: 112: do { LATDbits.LATD5 = 1; } while(0);
 20332  005230  8A8C               	bsf	3980,5,c	;volatile
 20333                           
 20334                           ;eusart1.c: 113: do { LATDbits.LATD6 = 1; } while(0);
 20335  005232  8C8C               	bsf	3980,6,c	;volatile
 20336  005234                     i2l154:
 20337  005234  8E8C               	bsf	3980,7,c	;volatile
 20338  005236                     i2l6753:
 20339                           
 20340                           ;eusart1.c: 116: step++;
 20341  005236  4A34               	infsnz	_step,f,c
 20342  005238  2A35               	incf	_step+1,f,c
 20343                           
 20344                           ;eusart1.c: 118: }
 20345  00523A  0012               	return	
 20346  00523C                     i2l6755:
 20347                           
 20348                           ;eusart1.c: 120: else if (step == 1){
 20349  00523C  0434               	decf	_step,w,c
 20350  00523E  1035               	iorwf	_step+1,w,c
 20351  005240  A4D8               	btfss	status,2,c
 20352  005242  D005               	goto	i2l6759
 20353                           
 20354                           ;eusart1.c: 121: do { LATDbits.LATD4 = 1; } while(0);
 20355  005244  888C               	bsf	3980,4,c	;volatile
 20356                           
 20357                           ;eusart1.c: 122: do { LATDbits.LATD7 = 1; } while(0);
 20358  005246  8E8C               	bsf	3980,7,c	;volatile
 20359                           
 20360                           ;eusart1.c: 123: do { LATDbits.LATD6 = 1; } while(0);
 20361  005248  8C8C               	bsf	3980,6,c	;volatile
 20362                           
 20363                           ;eusart1.c: 124: do { LATDbits.LATD5 = 0; } while(0);
 20364  00524A  9A8C               	bcf	3980,5,c	;volatile
 20365  00524C  D7F4               	goto	i2l6753
 20366  00524E                     i2l6759:
 20367                           
 20368                           ;eusart1.c: 128: else if (step == 2){
 20369  00524E  0E02               	movlw	2
 20370  005250  1834               	xorwf	_step,w,c
 20371  005252  1035               	iorwf	_step+1,w,c
 20372  005254  A4D8               	btfss	status,2,c
 20373  005256  D004               	goto	i2l6763
 20374                           
 20375                           ;eusart1.c: 129: do { LATDbits.LATD4 = 1; } while(0);
 20376  005258  888C               	bsf	3980,4,c	;volatile
 20377                           
 20378                           ;eusart1.c: 130: do { LATDbits.LATD5 = 1; } while(0);
 20379  00525A  8A8C               	bsf	3980,5,c	;volatile
 20380                           
 20381                           ;eusart1.c: 131: do { LATDbits.LATD6 = 0; } while(0);
 20382  00525C  9C8C               	bcf	3980,6,c	;volatile
 20383                           
 20384                           ;eusart1.c: 132: do { LATDbits.LATD7 = 1; } while(0);
 20385  00525E  D7EA               	goto	i2l154
 20386  005260                     i2l6763:
 20387                           
 20388                           ;eusart1.c: 136: else if (step == 3){
 20389  005260  0E03               	movlw	3
 20390  005262  1834               	xorwf	_step,w,c
 20391  005264  1035               	iorwf	_step+1,w,c
 20392  005266  A4D8               	btfss	status,2,c
 20393  005268  0012               	return	
 20394                           
 20395                           ;eusart1.c: 137: do { LATDbits.LATD4 = 1; } while(0);
 20396  00526A  888C               	bsf	3980,4,c	;volatile
 20397                           
 20398                           ;eusart1.c: 138: do { LATDbits.LATD7 = 0; } while(0);
 20399  00526C  9E8C               	bcf	3980,7,c	;volatile
 20400                           
 20401                           ;eusart1.c: 139: do { LATDbits.LATD6 = 1; } while(0);
 20402  00526E  8C8C               	bsf	3980,6,c	;volatile
 20403                           
 20404                           ;eusart1.c: 140: do { LATDbits.LATD5 = 1; } while(0);
 20405  005270  8A8C               	bsf	3980,5,c	;volatile
 20406                           
 20407                           ;eusart1.c: 141: step=0;
 20408  005272  0E00               	movlw	0
 20409  005274  6E35               	movwf	_step+1,c
 20410  005276  0E00               	movlw	0
 20411  005278  6E34               	movwf	_step,c
 20412  00527A  0012               	return	
 20413  00527C                     __end_of__step_:
 20414                           	opt callstack 0
 20415                           
 20416 ;; *************** function __stepReverse_ *****************
 20417 ;; Defined at:
 20418 ;;		line 145 in file "mcc_generated_files/eusart1.c"
 20419 ;; Parameters:    Size  Location     Type
 20420 ;;  stepDirectio    2    0[COMRAM] int 
 20421 ;; Auto vars:     Size  Location     Type
 20422 ;;		None
 20423 ;; Return value:  Size  Location     Type
 20424 ;;                  1    wreg      void 
 20425 ;; Registers used:
 20426 ;;		wreg, status,2, status,0
 20427 ;; Tracked objects:
 20428 ;;		On entry : 0/0
 20429 ;;		On exit  : 0/0
 20430 ;;		Unchanged: 0/0
 20431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20432 ;;      Params:         2       0       0       0       0       0       0
 20433 ;;      Locals:         0       0       0       0       0       0       0
 20434 ;;      Temps:          0       0       0       0       0       0       0
 20435 ;;      Totals:         2       0       0       0       0       0       0
 20436 ;;Total ram usage:        2 bytes
 20437 ;; Hardware stack levels used:    1
 20438 ;; This function calls:
 20439 ;;		Nothing
 20440 ;; This function is called by:
 20441 ;;		_EUSART1_RxDataHandler
 20442 ;; This function uses a non-reentrant model
 20443 ;;
 20444                           
 20445                           	psect	text111
 20446  005178                     __ptext111:
 20447                           	opt callstack 0
 20448  005178                     __stepReverse_:
 20449                           	opt callstack 19
 20450                           
 20451                           ;eusart1.c: 147: if (step == 0){
 20452                           
 20453                           ;incstack = 0
 20454  005178  5034               	movf	_step,w,c
 20455  00517A  1035               	iorwf	_step+1,w,c
 20456  00517C  A4D8               	btfss	status,2,c
 20457  00517E  D007               	goto	i2l6771
 20458                           
 20459                           ;eusart1.c: 148: do { LATDbits.LATD7 = 0; } while(0);
 20460  005180  9E8C               	bcf	3980,7,c	;volatile
 20461                           
 20462                           ;eusart1.c: 149: do { LATDbits.LATD5 = 1; } while(0);
 20463  005182  8A8C               	bsf	3980,5,c	;volatile
 20464                           
 20465                           ;eusart1.c: 150: do { LATDbits.LATD6 = 1; } while(0);
 20466  005184  8C8C               	bsf	3980,6,c	;volatile
 20467                           
 20468                           ;eusart1.c: 151: do { LATDbits.LATD4 = 1; } while(0);
 20469  005186  888C               	bsf	3980,4,c	;volatile
 20470  005188                     i2l6769:
 20471                           
 20472                           ;eusart1.c: 153: step++;
 20473  005188  4A34               	infsnz	_step,f,c
 20474  00518A  2A35               	incf	_step+1,f,c
 20475                           
 20476                           ;eusart1.c: 155: }
 20477  00518C  0012               	return	
 20478  00518E                     i2l6771:
 20479                           
 20480                           ;eusart1.c: 157: else if (step == 1){
 20481  00518E  0434               	decf	_step,w,c
 20482  005190  1035               	iorwf	_step+1,w,c
 20483  005192  A4D8               	btfss	status,2,c
 20484  005194  D005               	goto	i2l6775
 20485                           
 20486                           ;eusart1.c: 158: do { LATDbits.LATD4 = 1; } while(0);
 20487  005196  888C               	bsf	3980,4,c	;volatile
 20488                           
 20489                           ;eusart1.c: 159: do { LATDbits.LATD7 = 1; } while(0);
 20490  005198  8E8C               	bsf	3980,7,c	;volatile
 20491                           
 20492                           ;eusart1.c: 160: do { LATDbits.LATD5 = 1; } while(0);
 20493  00519A  8A8C               	bsf	3980,5,c	;volatile
 20494                           
 20495                           ;eusart1.c: 161: do { LATDbits.LATD6 = 0; } while(0);
 20496  00519C  9C8C               	bcf	3980,6,c	;volatile
 20497  00519E  D7F4               	goto	i2l6769
 20498  0051A0                     i2l6775:
 20499                           
 20500                           ;eusart1.c: 165: else if (step == 2){
 20501  0051A0  0E02               	movlw	2
 20502  0051A2  1834               	xorwf	_step,w,c
 20503  0051A4  1035               	iorwf	_step+1,w,c
 20504  0051A6  A4D8               	btfss	status,2,c
 20505  0051A8  D005               	goto	i2l6779
 20506                           
 20507                           ;eusart1.c: 166: do { LATDbits.LATD4 = 1; } while(0);
 20508  0051AA  888C               	bsf	3980,4,c	;volatile
 20509                           
 20510                           ;eusart1.c: 167: do { LATDbits.LATD6 = 1; } while(0);
 20511  0051AC  8C8C               	bsf	3980,6,c	;volatile
 20512                           
 20513                           ;eusart1.c: 168: do { LATDbits.LATD5 = 0; } while(0);
 20514  0051AE  9A8C               	bcf	3980,5,c	;volatile
 20515                           
 20516                           ;eusart1.c: 169: do { LATDbits.LATD7 = 1; } while(0);
 20517  0051B0  8E8C               	bsf	3980,7,c	;volatile
 20518  0051B2  D7EA               	goto	i2l6769
 20519  0051B4                     i2l6779:
 20520                           
 20521                           ;eusart1.c: 173: else if (step == 3){
 20522  0051B4  0E03               	movlw	3
 20523  0051B6  1834               	xorwf	_step,w,c
 20524  0051B8  1035               	iorwf	_step+1,w,c
 20525  0051BA  A4D8               	btfss	status,2,c
 20526  0051BC  0012               	return	
 20527                           
 20528                           ;eusart1.c: 174: do { LATDbits.LATD7 = 1; } while(0);
 20529  0051BE  8E8C               	bsf	3980,7,c	;volatile
 20530                           
 20531                           ;eusart1.c: 175: do { LATDbits.LATD4 = 0; } while(0);
 20532  0051C0  988C               	bcf	3980,4,c	;volatile
 20533                           
 20534                           ;eusart1.c: 176: do { LATDbits.LATD6 = 1; } while(0);
 20535  0051C2  8C8C               	bsf	3980,6,c	;volatile
 20536                           
 20537                           ;eusart1.c: 177: do { LATDbits.LATD5 = 1; } while(0);
 20538  0051C4  8A8C               	bsf	3980,5,c	;volatile
 20539                           
 20540                           ;eusart1.c: 178: step=0;
 20541  0051C6  0E00               	movlw	0
 20542  0051C8  6E35               	movwf	_step+1,c
 20543  0051CA  0E00               	movlw	0
 20544  0051CC  6E34               	movwf	_step,c
 20545  0051CE  0012               	return	
 20546  0051D0                     __end_of__stepReverse_:
 20547                           	opt callstack 0
 20548                           
 20549                           	psect	text112
 20550  000000                     __ptext112:
 20551                           	opt callstack 0
 20552                           
 20553                           	psect	rparam
 20554  0000                     
 20555                           	psect	temp
 20556  000045                     btemp:
 20557                           	opt callstack 0
 20558  000045                     	ds	1
 20559  0000                     int$flags	set	btemp
 20560  0000                     wtemp8	set	btemp+1
 20561  0000                     ttemp5	set	btemp+1
 20562  0000                     ttemp6	set	btemp+4
 20563  0000                     ttemp7	set	btemp+8
 20564                           tosu	equ	0xFFF
 20565                           tosh	equ	0xFFE
 20566                           tosl	equ	0xFFD
 20567                           stkptr	equ	0xFFC
 20568                           pclatu	equ	0xFFB
 20569                           pclath	equ	0xFFA
 20570                           pcl	equ	0xFF9
 20571                           tblptru	equ	0xFF8
 20572                           tblptrh	equ	0xFF7
 20573                           tblptrl	equ	0xFF6
 20574                           tablat	equ	0xFF5
 20575                           prodh	equ	0xFF4
 20576                           prodl	equ	0xFF3
 20577                           indf0	equ	0xFEF
 20578                           postinc0	equ	0xFEE
 20579                           postdec0	equ	0xFED
 20580                           preinc0	equ	0xFEC
 20581                           plusw0	equ	0xFEB
 20582                           fsr0h	equ	0xFEA
 20583                           fsr0l	equ	0xFE9
 20584                           wreg	equ	0xFE8
 20585                           indf1	equ	0xFE7
 20586                           postinc1	equ	0xFE6
 20587                           postdec1	equ	0xFE5
 20588                           preinc1	equ	0xFE4
 20589                           plusw1	equ	0xFE3
 20590                           fsr1h	equ	0xFE2
 20591                           fsr1l	equ	0xFE1
 20592                           bsr	equ	0xFE0
 20593                           indf2	equ	0xFDF
 20594                           postinc2	equ	0xFDE
 20595                           postdec2	equ	0xFDD
 20596                           preinc2	equ	0xFDC
 20597                           plusw2	equ	0xFDB
 20598                           fsr2h	equ	0xFDA
 20599                           fsr2l	equ	0xFD9
 20600                           status	equ	0xFD8


Data Sizes:
    Strings     293
    Constant    175
    Data        89
    BSS         221
    Persistent  15
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      68
    BANK0           160    123     160
    BANK1           256     26     136
    BANK2           256      0     153
    BANK3           256    146     146
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E5843 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    i2c2_tr_queue.pTrFlag	PTR enum E5843 size(2) Largest target is 0

    i2c2_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> exp@coeff(CODE[30]), log@coeff(CODE[27]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 30
		 -> valDistance(BANK2[10]), printAuto@valTemp(BANK3[3]), printAuto@val(BANK3[30]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 16
		 -> printAuto@str_2672(BANK3[15]), printAuto@str_2667(BANK3[15]), printAuto@str(BANK3[15]), printAuto@strTemp(BANK3[16]), 
		 -> printAuto@strLux(BANK3[13]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 16
		 -> printAuto@str_2672(BANK3[15]), printAuto@str_2667(BANK3[15]), printAuto@str(BANK3[15]), printAuto@strTemp(BANK3[16]), 
		 -> printAuto@strLux(BANK3[13]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_27(CODE[5]), STR_24(CODE[5]), STR_22(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 30
		 -> valDistance(BANK2[10]), printAuto@valTemp(BANK3[3]), printAuto@val(BANK3[30]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 30
		 -> valDistance(BANK2[10]), printAuto@valTemp(BANK3[3]), printAuto@val(BANK3[30]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_36(CODE[21]), STR_35(CODE[14]), STR_34(CODE[11]), STR_33(CODE[21]), 
		 -> STR_32(CODE[14]), STR_31(CODE[21]), STR_30(CODE[14]), STR_29(CODE[5]), 
		 -> STR_9(CODE[34]), STR_8(CODE[18]), STR_7(CODE[21]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 30
		 -> valDistance(BANK2[10]), printAuto@valTemp(BANK3[3]), printAuto@val(BANK3[30]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK1[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_36(CODE[21]), STR_35(CODE[14]), STR_34(CODE[11]), STR_33(CODE[21]), 
		 -> STR_32(CODE[14]), STR_31(CODE[21]), STR_30(CODE[14]), STR_29(CODE[5]), 
		 -> STR_27(CODE[5]), STR_24(CODE[5]), STR_22(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_9(CODE[34]), STR_8(CODE[18]), STR_7(CODE[21]), 

    S3010__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S3010__prbuf$ptr	PTR unsigned char  size(2) Largest target is 30
		 -> valDistance(BANK2[10]), printAuto@valTemp(BANK3[3]), printAuto@val(BANK3[30]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 30
		 -> valDistance(BANK2[10]), printAuto@valTemp(BANK3[3]), printAuto@val(BANK3[30]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK1[4]), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR3_DefaultInterruptHandler(), 

    LCD_send_string@str	PTR unsigned char  size(2) Largest target is 26
		 -> STR_28(CODE[17]), printAuto@str_2672(BANK3[15]), STR_26(CODE[15]), STR_25(CODE[16]), 
		 -> printAuto@str_2667(BANK3[15]), STR_23(CODE[17]), printAuto@str(BANK3[15]), STR_21(CODE[8]), 
		 -> STR_20(CODE[8]), STR_19(CODE[8]), STR_18(CODE[8]), printAuto@strTemp(BANK3[16]), 
		 -> printAuto@strLux(BANK3[13]), STR_15(CODE[8]), STR_14(CODE[8]), STR_13(CODE[8]), 
		 -> STR_12(CODE[8]), STR_11(CODE[12]), STR_10(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[12]), STR_4(CODE[7]), STR_3(CODE[15]), STR_2(CODE[26]), 
		 -> STR_1(CODE[13]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 16
		 -> printAuto@str_2672(BANK3[15]), printAuto@str_2667(BANK3[15]), printAuto@str(BANK3[15]), printAuto@strTemp(BANK3[16]), 
		 -> printAuto@strLux(BANK3[13]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c2_object.pTrTail.pTrFlag	PTR enum E5843 size(2) Largest target is 0

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    F5958.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F5953.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c2_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 
		 -> NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E5843 size(2) Largest target is 0

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c2_current.pTrFlag	PTR enum E5843 size(2) Largest target is 0

    p_i2c2_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    p_i2c2_current	PTR volatile struct . size(2) Largest target is 7
		 -> i2c2_tr_queue(BANK1[5]), i2c1_tr_queue(BANK1[5]), NULL(NULL[0]), 

    i2c2_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c2_tr_queue(BANK1[5]), i2c1_tr_queue(BANK1[5]), 

    i2c2_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c2_tr_queue(BANK1[5]), i2c1_tr_queue(BANK1[5]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E5843 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    F5958.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F5953.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 
		 -> NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E5843 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    S1104$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    S1116$pTrFlag	PTR enum E5843 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E5843 size(2) Largest target is 0

    S1116$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C2_MasterRead@trBlock(BANK2[5]), I2C2_MasterWrite@trBlock(BANK1[5]), I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    p_i2c1_current	PTR volatile struct . size(2) Largest target is 7
		 -> i2c2_tr_queue(BANK1[5]), i2c1_tr_queue(BANK1[5]), NULL(NULL[0]), 

    S1127$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c2_tr_queue(BANK1[5]), i2c1_tr_queue(BANK1[5]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c2_tr_queue(BANK1[5]), i2c1_tr_queue(BANK1[5]), 

    S1127$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c2_tr_queue(BANK1[5]), i2c1_tr_queue(BANK1[5]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c2_tr_queue(BANK1[5]), i2c1_tr_queue(BANK1[5]), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultErrorHandler(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMRAM

    _eval_poly->___wmul
    ___ftdiv->___wmul
    ___awtoft->___ftpack
    _dcMotor->_PWM5_LoadDutyValue
    _LCD_send_string->___wmul
    _LCD_send_data->_I2C_select
    _LCD_select_line->_LCD_send_cmd
    _LCD_clear->_LCD_send_cmd
    ___lwtoft->___ftpack
    __doprnt->___wmul
    ___awdiv->___awmod
    _putch->_EUSART1_Write
    _fround->___wmul
    ___wmul->___lwdiv
    ___lwdiv->___lwmod
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___ftadd->___wmul
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _LCD_init->_LCD_send_cmd
    _LCD_send_cmd->_I2C_select
    _LCD_backlight->_I2C_select
    _I2C_stop->_I2C_wait
    _I2C_start->_I2C_wait
    _I2C_select->_I2C_write
    _I2C_write->_I2C_wait

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR3_ISR->_TMR3_WriteTimer
    _I2C2_ISR->_I2C2_Stop
    _I2C1_ISR->_I2C1_Stop
    _EUSART1_Receive_ISR->_EUSART1_RxDataHandler
    _EUSART1_DefaultErrorHandler->_EUSART1_RxDataHandler
    _EUSART1_RxDataHandler->i2_PWM5_LoadDutyValue

Critical Paths under _main in BANK0

    _main->_initialiseTCP
    _main->_sendData
    _printOn->_azoTouchPollManual
    _azoTouchPollManual->_LCD_send_string
    _printAuto->_sendData
    _sprintf->__doprnt
    _sendData->_printf
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___ftmul
    ___ftdiv->___ftsub
    _azoTouchPollAuto->_LCD_send_string
    _initialiseTCP->_printf
    _printf->__doprnt
    __doprnt->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftdiv
    ___fttol->_scale
    ___ftsub->___ftadd

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printAuto
    _printAuto->_sendData
    _sendData->_printf
    _initialiseTCP->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_printAuto

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  705267
                                             22 BANK1      4     4      0
                     _ADC_Initialize
             _EUSART1_GetSensorsBool
                    _I2C2_Initialize
                      _LCD_backlight
                          _LCD_clear
                           _LCD_init
                    _LCD_send_string
                 _PWM5_LoadDutyValue
                  _SYSTEM_Initialize
                     _TMR3_StopTimer
                            ___fttol
                            _dcMotor
                            _i2cRead
                      _initialiseTCP
                          _printAuto
                            _printOn
                             _printf
                           _sendData
 ---------------------------------------------------------------------------------
 (1) _printOn                                              2     2      0   23982
                                             18 BANK0      2     2      0
                          _LCD_clear
                    _LCD_send_string
                 _azoTouchPollManual
 ---------------------------------------------------------------------------------
 (2) _azoTouchPollManual                                   6     6      0   13461
                                             12 BANK0      6     6      0
                          _LCD_clear
                    _LCD_send_string
                 __stepMotorReverse_
                        __stepMotor_
                            _dcMotor
                            _i2cRead
 ---------------------------------------------------------------------------------
 (3) __stepMotor_                                          2     0      2      90
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) __stepMotorReverse_                                   2     0      2      90
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printAuto                                          148   148      0  422679
                                             20 BANK1      2     2      0
                                              0 BANK3    146   146      0
                  _ADC_GetConversion
            _EUSART1_GetAutoModeBool
             _EUSART1_GetSensorsBool
                          _LCD_clear
                    _LCD_send_string
                 _PWM5_LoadDutyValue
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lwtoft
                   _azoTouchPollAuto
                            _dcMotor
                                _log
                                _pow
                           _sendData
                         _sendPulse1
                         _sendPulse2
                         _sendPulse3
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4    1043
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             13     6      7   78965
                                            105 BANK0     13     6      7
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _sendPulse3                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendPulse2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendPulse1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sendData                                            16     2     14   82284
                                            121 BANK0      2     2      0
                                              6 BANK1     14     0     14
          _EUSART1_ToggleSensorsBool
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_ToggleSensorsBool                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6  141363
                                             97 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   44412
                                             60 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   75974
                                             88 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     539
                                             60 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   17284
                                             80 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     682
                                             25 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3787
                                             70 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   20945
                                             48 BANK0     12     5      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    7833
                                             18 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___ftsub (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    4076
                                             33 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _dcMotor                                              2     0      2    1991
                                             29 COMRAM     2     0      2
                 _PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (4) _PWM5_LoadDutyValue                                   4     2      2    1057
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _azoTouchPollAuto                                     2     2      0   11154
                                             12 BANK0      2     2      0
                          _LCD_clear
                    _LCD_send_string
                            _i2cRead
 ---------------------------------------------------------------------------------
 (3) _i2cRead                                              4     0      4     633
                                             25 COMRAM     4     0      4
                   _i2cRepeatedStart
                           _i2cStart
                            _i2cStop
 ---------------------------------------------------------------------------------
 (4) _i2cStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2cStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2cRepeatedStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LCD_send_string                                     12     9      3    9665
                                              0 BANK0     12     9      3
                    _LCD_select_line
                      _LCD_send_data
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _LCD_send_data                                        3     3      0     856
                                             29 COMRAM     3     3      0
                         _I2C_select
                          _I2C_start
                           _I2C_stop
                          _I2C_write
 ---------------------------------------------------------------------------------
 (4) _LCD_select_line                                      1     1      0     887
                                             32 COMRAM     1     1      0
                       _LCD_send_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_clear                                            2     2      0     856
                                             32 COMRAM     2     2      0
                       _LCD_send_cmd
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3884
                                             33 COMRAM     3     0      3
                  _ADC_GetConversion (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _EUSART1_GetSensorsBool                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_GetAutoModeBool                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             25 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _initialiseTCP                                        2     2      0   78979
                                            121 BANK0      2     2      0
         _EUSART1_GetUnitTestCounter
                    _TMR3_StartTimer
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              22     6     16   78979
                                            105 BANK0     16     0     16
                                              0 BANK1      6     6      0
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             41    35      6   77637
                                             70 BANK0     35    29      6
                   Absolute function *
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch *
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                                7     4      3   14408
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1513
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1705
                                             31 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             26 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Write                                        1     1      0      62
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              10     7      3   14676
                                             48 BANK0     10     7      3
                            ___ftadd (ARG)
                            ___ftmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2212
                                             37 COMRAM     6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     772
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     781
                                             30 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6   10561
                                             33 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     634
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     853
                                             25 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    3775
                                             33 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     772
                                             25 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     601
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4    1541
                                             55 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8694
                                             12 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    7378
                                              0 BANK0     12     6      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3493
                                             25 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     425
                                             25 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    3438
                                             25 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR3_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_GetUnitTestCounter                           2     0      2       0
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR3_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     726
                     _ADC_Initialize
                 _EUSART1_Initialize
                    _I2C1_Initialize
                    _I2C2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM5_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0     121
           _TMR3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     605
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             5     3      2    1129
                                             32 COMRAM     5     3      2
                       _LCD_send_cmd
 ---------------------------------------------------------------------------------
 (5) _LCD_send_cmd                                         3     3      0     856
                                             29 COMRAM     3     3      0
                         _I2C_select
                          _I2C_start
                           _I2C_stop
                          _I2C_write
 ---------------------------------------------------------------------------------
 (1) _LCD_backlight                                        3     3      0     732
                                             29 COMRAM     3     3      0
                         _I2C_select
                          _I2C_start
                           _I2C_stop
                          _I2C_write
 ---------------------------------------------------------------------------------
 (5) _I2C_stop                                             0     0      0       0
                           _I2C_wait
 ---------------------------------------------------------------------------------
 (5) _I2C_start                                            0     0      0       0
                           _I2C_wait
 ---------------------------------------------------------------------------------
 (5) _I2C_select                                           2     1      1     633
                                             27 COMRAM     2     1      1
                          _I2C_write
 ---------------------------------------------------------------------------------
 (5) _I2C_write                                            1     1      0      31
                                             26 COMRAM     1     1      0
                           _I2C_wait
 ---------------------------------------------------------------------------------
 (6) _I2C_wait                                             1     1      0       0
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           4     4      0    2584
                                             21 COMRAM     4     4      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
               _I2C1_BusCollisionISR
                           _I2C1_ISR
               _I2C2_BusCollisionISR
                           _I2C2_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR3_ISR                                            0     0      0     240
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
                    _TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (11) _TMR3_WriteTimer                                     2     0      2     240
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) _TMR3_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C2_ISR                                            2     2      0      22
                                              3 COMRAM     2     2      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (11) _I2C2_Stop                                           3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) _I2C2_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C2_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C1_ISR                                            2     2      0      22
                                              3 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (11) _I2C1_Stop                                           3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) _I2C1_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0    2300
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART1_DefaultOverrunErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_DefaultFramingErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_DefaultErrorHandler                         0     0      0    1150
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART1_RxDataHandler                              17    17      0    1150
                                              4 COMRAM    17    17      0
                      __stepReverse_
                             __step_
               i2_PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (12) i2_PWM5_LoadDutyValue                                4     2      2     174
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (12) __step_                                              2     0      2     304
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (12) __stepReverse_                                       2     0      2     304
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART1_GetSensorsBool
   _I2C2_Initialize
   _LCD_backlight
     _I2C_select
       _I2C_write
         _I2C_wait
     _I2C_start
       _I2C_wait
     _I2C_stop
       _I2C_wait
     _I2C_write
       _I2C_wait
   _LCD_clear
     _LCD_send_cmd
       _I2C_select
         _I2C_write
           _I2C_wait
       _I2C_start
         _I2C_wait
       _I2C_stop
         _I2C_wait
       _I2C_write
         _I2C_wait
   _LCD_init
     _LCD_send_cmd
       _I2C_select
         _I2C_write
           _I2C_wait
       _I2C_start
         _I2C_wait
       _I2C_stop
         _I2C_wait
       _I2C_write
         _I2C_wait
   _LCD_send_string
     _LCD_select_line
       _LCD_send_cmd
         _I2C_select
           _I2C_write
             _I2C_wait
         _I2C_start
           _I2C_wait
         _I2C_stop
           _I2C_wait
         _I2C_write
           _I2C_wait
     _LCD_send_data
       _I2C_select
         _I2C_write
           _I2C_wait
       _I2C_start
         _I2C_wait
       _I2C_stop
         _I2C_wait
       _I2C_write
         _I2C_wait
     ___wmul
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
   _PWM5_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _I2C1_Initialize
     _I2C2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM5_Initialize
     _TMR2_Initialize
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
   _TMR3_StopTimer
   ___fttol
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       _frexp (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
   _dcMotor
     _PWM5_LoadDutyValue
   _i2cRead
     _i2cRepeatedStart
     _i2cStart
     _i2cStop
   _initialiseTCP
     _EUSART1_GetUnitTestCounter
     _TMR3_StartTimer
     _printf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftneg *
         ___ftsub *
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
         ___lldiv *
         ___llmod *
         ___lltoft *
           ___ftpack
         ___wmul *
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         _isdigit *
         _putch *
           _EUSART1_Write
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
   _printAuto
     _ADC_GetConversion
     _EUSART1_GetAutoModeBool
     _EUSART1_GetSensorsBool
     _LCD_clear
       _LCD_send_cmd
         _I2C_select
           _I2C_write
             _I2C_wait
         _I2C_start
           _I2C_wait
         _I2C_stop
           _I2C_wait
         _I2C_write
           _I2C_wait
     _LCD_send_string
       _LCD_select_line
         _LCD_send_cmd
           _I2C_select
             _I2C_write
               _I2C_wait
           _I2C_start
             _I2C_wait
           _I2C_stop
             _I2C_wait
           _I2C_write
             _I2C_wait
       _LCD_send_data
         _I2C_select
           _I2C_write
             _I2C_wait
         _I2C_start
           _I2C_wait
         _I2C_stop
           _I2C_wait
         _I2C_write
           _I2C_wait
       ___wmul
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _PWM5_LoadDutyValue
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___wmul (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       _frexp (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
     ___lwtoft
       _ADC_GetConversion (ARG)
       ___ftpack (ARG)
     _azoTouchPollAuto
       _LCD_clear
         _LCD_send_cmd
           _I2C_select
             _I2C_write
               _I2C_wait
           _I2C_start
             _I2C_wait
           _I2C_stop
             _I2C_wait
           _I2C_write
             _I2C_wait
       _LCD_send_string
         _LCD_select_line
           _LCD_send_cmd
             _I2C_select
               _I2C_write
                 _I2C_wait
             _I2C_start
               _I2C_wait
             _I2C_stop
               _I2C_wait
             _I2C_write
               _I2C_wait
         _LCD_send_data
           _I2C_select
             _I2C_write
               _I2C_wait
           _I2C_start
             _I2C_wait
           _I2C_stop
             _I2C_wait
           _I2C_write
             _I2C_wait
         ___wmul
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       _i2cRead
         _i2cRepeatedStart
         _i2cStart
         _i2cStop
     _dcMotor
       _PWM5_LoadDutyValue
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftsub (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                       ___wmul (ARG)
                         ___lwdiv (ARG)
                           ___lwmod (ARG)
                         ___lwmod (ARG)
                       _frexp (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                       ___wmul (ARG)
                         ___lwdiv (ARG)
                           ___lwmod (ARG)
                         ___lwmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftsub (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwdiv (ARG)
                           ___lwmod (ARG)
                         ___lwmod (ARG)
                         ___wmul (ARG)
                           ___lwdiv (ARG)
                             ___lwmod (ARG)
                           ___lwmod (ARG)
                         _frexp (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftsub (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                       ___wmul (ARG)
                         ___lwdiv (ARG)
                           ___lwmod (ARG)
                         ___lwmod (ARG)
                       _frexp (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           _frexp (ARG)
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         _frexp (ARG)
     _sendData
       _EUSART1_ToggleSensorsBool
       _printf
         __doprnt
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftge *
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftneg *
           ___ftsub *
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftsub (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                       ___wmul (ARG)
                         ___lwdiv (ARG)
                           ___lwmod (ARG)
                         ___lwmod (ARG)
                       _frexp (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
           ___lldiv *
           ___llmod *
           ___lltoft *
             ___ftpack
           ___wmul *
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           _isdigit *
           _putch *
             _EUSART1_Write
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
     _sendPulse1
     _sendPulse2
     _sendPulse3
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftneg *
         ___ftsub *
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
         ___lldiv *
         ___llmod *
         ___lltoft *
           ___ftpack
         ___wmul *
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         _isdigit *
         _putch *
           _EUSART1_Write
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
     _strcat
   _printOn
     _LCD_clear
       _LCD_send_cmd
         _I2C_select
           _I2C_write
             _I2C_wait
         _I2C_start
           _I2C_wait
         _I2C_stop
           _I2C_wait
         _I2C_write
           _I2C_wait
     _LCD_send_string
       _LCD_select_line
         _LCD_send_cmd
           _I2C_select
             _I2C_write
               _I2C_wait
           _I2C_start
             _I2C_wait
           _I2C_stop
             _I2C_wait
           _I2C_write
             _I2C_wait
       _LCD_send_data
         _I2C_select
           _I2C_write
             _I2C_wait
         _I2C_start
           _I2C_wait
         _I2C_stop
           _I2C_wait
         _I2C_write
           _I2C_wait
       ___wmul
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _azoTouchPollManual
       _LCD_clear
         _LCD_send_cmd
           _I2C_select
             _I2C_write
               _I2C_wait
           _I2C_start
             _I2C_wait
           _I2C_stop
             _I2C_wait
           _I2C_write
             _I2C_wait
       _LCD_send_string
         _LCD_select_line
           _LCD_send_cmd
             _I2C_select
               _I2C_write
                 _I2C_wait
             _I2C_start
               _I2C_wait
             _I2C_stop
               _I2C_wait
             _I2C_write
               _I2C_wait
         _LCD_send_data
           _I2C_select
             _I2C_write
               _I2C_wait
           _I2C_start
             _I2C_wait
           _I2C_stop
             _I2C_wait
           _I2C_write
             _I2C_wait
         ___wmul
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       __stepMotorReverse_
       __stepMotor_
       _dcMotor
         _PWM5_LoadDutyValue
       _i2cRead
         _i2cRepeatedStart
         _i2cStart
         _i2cStop
   _printf
     __doprnt
       Absolute function(Fake) *
       ___awdiv *
         ___awmod (ARG)
       ___ftadd *
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftge *
       ___ftmul *
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _frexp (ARG)
       ___ftneg *
       ___ftsub *
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol *
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
       ___lldiv *
       ___llmod *
       ___lltoft *
         ___ftpack
       ___wmul *
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       __div_to_l_ *
       __tdiv_to_l_ *
       _fround *
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       _isdigit *
       _putch *
         _EUSART1_Write
       _scale *
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
   _sendData
     _EUSART1_ToggleSensorsBool
     _printf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           _frexp (ARG)
         ___ftneg *
         ___ftsub *
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftsub (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       ___lwdiv (ARG)
                         ___lwmod (ARG)
                       ___lwmod (ARG)
                     _frexp (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
         ___lldiv *
         ___llmod *
         ___lltoft *
           ___ftpack
         ___wmul *
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         _isdigit *
         _putch *
           _EUSART1_Write
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwdiv (ARG)
                     ___lwmod (ARG)
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     ___lwdiv (ARG)
                       ___lwmod (ARG)
                     ___lwmod (ARG)
                   _frexp (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             _frexp (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
         __stepReverse_
         __step_
         i2_PWM5_LoadDutyValue
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
       __stepReverse_
       __step_
       i2_PWM5_LoadDutyValue
   _EUSART1_Transmit_ISR *
   _I2C1_BusCollisionISR *
   _I2C1_ISR *
     _I2C1_FunctionComplete
     _I2C1_Stop
   _I2C2_BusCollisionISR *
   _I2C2_ISR *
     _I2C2_FunctionComplete
     _I2C2_Stop
   _TMR3_ISR *
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *
     _TMR3_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     92      92      11       57.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      99       8       59.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100     1A      88       6       53.1%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     7B      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      44       1       72.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     297       9        0.0%
DATA                 0      0     297      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Nov 17 22:00:28 2019

                                  ___altoft@exp 00AE                        _eusart1TxBufferRemaining 0183  
                                             _A 0185                                               _B 024D  
                                             _C 024A                                   ___altoft@sign 00AF  
                                            l32 5818                                    ___awdiv@sign 0025  
                           ___wmul@multiplicand 0028                             printAuto@adcValTemp 036B  
                                  printAuto@val 034A                                    __CFG_CP0$OFF 000000  
                                  printAuto@str 0310                                    __CFG_CP1$OFF 000000  
                            __size_of_I2C_start 0008                                    __CFG_CP2$OFF 000000  
                                  __CFG_CP3$OFF 000000                                    ___ftadd@exp1 006B  
                                  ___ftadd@exp2 006A                              __size_of_I2C_write 000C  
                                   __CFG_LVP$ON 000000                                    ___ftadd@sign 0069  
                                           l256 56DA                                    __CFG_CPB$OFF 000000  
                                           _PR2 000FBB                                    __CFG_CPD$OFF 000000  
                         i2cRead@registerAdress 001C                       printAuto@finalTemperature 038F  
                                           _exp 37BE                                             _log 3F6E  
                                           _val 0250                                             _pow 3B5E  
                                  ___awmod@sign 001F                                 _TMR2_Initialize 5A68  
                                           tosl 000FFD                                             wreg 000FE8  
                                    _TXSTA1bits 000FAC                               sendData@distanceC 0170  
                             sendData@distanceL 0173                               sendData@distanceR 0176  
                           __size_of_I2C_select 000E                                   printAuto@v_o1 0386  
                                  ___ftdiv@cntr 007B                                __end_of_I2C1_ISR 37BE  
                              __end_of_I2C2_ISR 3570                                    ___ftdiv@sign 0080  
                                          l1112 4A02                                            l2110 3AEC  
                                          l1150 0C5C                                            l2121 4436  
                                          l1137 0BDA                                            l1129 04D4  
                                          l1147 0C4E                                            l1244 4656  
                                          l1236 462C                                            l1164 0E3E  
                                          l2205 4FF6                                            l1181 105E  
                                          l1167 0E4C                                            l2160 5982  
                                          l2128 4118                                            l1184 106C  
                                          l2129 4140                                            l1089 3E3C  
                               _timer3ReloadVal 0181                                            l1277 51DE  
                                          l1702 1AD4                                            l1482 2922  
                                          l2276 52C4                                            l2286 554A  
                                          l1495 29B8                                            l2546 387C  
                                          l2547 39A6                                            l2492 3CD0  
                                          l2557 453C                                            l1790 4CD2  
                                          l2487 3B98                                            ?_exp 00B8  
                                          ?_log 009C                                            l9401 4A30  
                                          l9411 4A8C                                            l9403 4A4E  
                                          l9501 3A94                                            l9407 4A64  
                                          l9511 3AC8                                            l9409 4A82  
                                          l9441 56F8                                            l9601 4C20  
                                          l9443 56FA                                            l9427 56C8  
                                          l9611 4C40                                            l9517 3B08  
                                          l9509 3ABE                                            l9527 3B38  
                                          l9543 41E8                                            l9615 4C4A  
                                          l9631 4F46                                            l9561 422A  
                                          l9537 41C0                                            l9641 4F68  
                                          l9475 3A2E                                            l9571 4252  
                                          l9619 4C58                                            l9651 4F8A  
                                          l9635 4F52                                            l9469 3A06  
                                          l9901 4368                                            l9557 421A  
                                          l9733 3082                                            l9725 2FB0  
                                          ?_pow 00C1                                            l9399 4A26  
                                          l9911 4C90                                            l9567 4242  
                                          l9655 4F98                                            l9647 4F80  
                                          l9639 4F60                                            l9497 3A80  
                                          l9921 4CC4                                            l9841 417E  
                                          l9833 416A                                            l9665 5292  
                                          l9593 4C02                                            l9753 2C82  
                                          l9499 3A8A                                            l9667 529A  
                                          l9587 4BF2                                            l9771 2E38  
                                          l9747 2BF0                                            l9909 4C84  
                                          l9829 415A                                            l9677 52BA  
                                          l9693 5540                                            l9685 5520  
                                          l9765 2DA6                                            l9757 2CA6  
                                          l9933 4D08                                            l9839 4172  
                                          l9687 5528                                            l9783 59A6  
                                          l9599 4C18                                            l9935 4D14  
                                          STR_1 7F9B                                            STR_2 7EFC  
                                          l9953 4EE0                                            l9945 556C  
                                          l9849 42AA                                            l9793 40C4  
                                          STR_3 7F7E                                            STR_4 7FE9  
                                          l9963 4F2E                                            STR_5 7FA8  
                                          STR_6 7FBF                                            l9957 4F02  
                                          l9893 4354                                            l9877 4328  
                                          l9869 42F8                                            STR_7 7F16  
                                          STR_8 7F2B                                            STR_9 7EDA  
                                          l9977 4728                                            l9889 4344  
                                          l9995 477E                                            l9899 435C  
                                          l9999 478E                                  printAuto@F6413 023D  
                                printAuto@F6421 0200                                  printAuto@F6430 022E  
                                printAuto@F6434 021F                                  printAuto@F6439 0210  
                                          _LATA 000F89                                            _LATB 000F8A  
                                          _LATC 000F8B                                            _LATD 000F8C  
                                          _LATE 000F8D                                            _TMR1 000FCE  
                                          _TMR2 000FBC                                            _TMR3 000FB2  
                                          _WPUB 000F61                                   _EUSART1_Write 56C6  
                                          _isOn 00EC                                            _main 30C2  
                                  ___ftpack@arg 001A                                    ___ftpack@exp 001D  
                                          _time 0135                                            fsr0h 000FEA  
                                          fsr1h 000FE2                                            indf0 000FEF  
                                          fsr2h 000FDA                                            fsr0l 000FE9  
                                          indf1 000FE7                                            indf2 000FDF  
                                          fsr1l 000FE1                                            fsr2l 000FD9  
                                          _step 0034                                            btemp 0045  
                                 __CFG_BORV$190 000000                                            exp@x 00B8  
                                          log@x 009C                          __size_of_LCD_send_data 004C  
                                          pow@x 00C1                                            pow@y 00C4  
                                          prodh 000FF4                                            prodl 000FF3  
                              __end_of_I2C_wait 5A3E                                            start 00A4  
                              __end_of_I2C_stop 5AFE                                   __CFG_IESO$OFF 000000  
                            __size_of_LCD_clear 0026                                 _TMR3_Initialize 5886  
                               _PWM5_Initialize 5A18                                    ___ftmul@cntr 008E  
                                  ___param_bank 000000                                    ___ftmul@sign 008F  
                               __end_of_i2cRead 46FA                      __end_of_PWM5_LoadDutyValue 57CE  
                               __end_of_i2cStop 53FE                                 ??__stepReverse_ 0003  
                                 _LCD_backlight 56FE                                    ___fttol@exp1 00A5  
                                         ??_exp 002C                                           ??_log 002C  
                                  ___fttol@lval 00A1                                           ??_pow 002C  
                                 I2C_write@data 001B                                      _i2c1_state 00F5  
                                    _i2c2_state 00F1                  __size_of_OSCILLATOR_Initialize 000E  
                              __end_of_LCD_init 506C                   __end_of_OSCILLATOR_Initialize 5A84  
                                         l10013 47BE                                           l10005 4796  
                                         l10021 4FB4                                           l10007 47A2  
                                         l10023 4FC0                                           l10201 1466  
                                         l10121 561E                                           l10035 5072  
                                         l10123 5626                                           l10131 563E  
                                         l10051 4B7C                                           l10029 4FE8  
                                         l10037 507E                                           l10301 1850  
                                         l10141 128C                                           l10125 562E  
                                         l10303 1858                                           l10151 12C4  
                                         l10135 1248                                           l10127 5636  
                                         l10071 58C2                                           l10313 18CE  
                                         l10305 186A                                           l10241 160C  
                                         l10233 15C4                                           l10225 155E  
                                         l10217 14F8                                           l10145 12AC  
                                         l10081 58E8                                           l11033 3D0A  
                                         l10411 1DAE                                           l10403 1D6E  
                                         l10323 1932                                           l10315 18D6  
                                         l10171 1376                                           l10147 12BE  
                                         l10091 53C8                                           l10309 18A4  
                                         l10245 1632                                           l10229 1584  
                                         l10181 13D2                                           l10157 12F4  
                                         l11301 3EA0                                           l10069 58BC  
                                         l11125 4E7A                                           l10431 1E26  
                                         l10423 1DF2                                           l10407 1D8E  
                                         l10343 1A7E                                           l10335 1A0C  
                                         l10327 194E                                           l10255 168A  
                                         l10175 13AE                                           l11311 3EFE  
                                         l10079 58E2                                           l11119 4E76  
                                         l11063 3D74                                           l11055 3D4E  
                                         l11039 3D0E                                           l10425 1DFA  
                                         l10417 1DD0                                           l10337 1A38  
                                         l10281 176E                                           l10265 16F4  
                                         l10193 1414                                           l10185 13D6  
                                         l10177 13C4                                           l10097 53E4  
                                         l10089 53C2                                           l10601 486A  
                                         l11153 3BA8                                           l11065 3D82  
                                         l10443 1EA2                                           l10371 1B9C  
                                         l10363 1B20                                           l10355 1AD8  
                                         l10347 1AA8                                           l10339 1A44  
                                         l10259 16F0                                           l10187 13FE  
                                         l10099 53EA                                           l11139 4EBA  
                                         l10515 4410                                           l11171 3C4A  
                                         l11075 3D9E                                           l11331 4980  
                                         l10461 1F5C                                           l10453 1F10  
                                         l10429 1E1E                                           l10381 1C86  
                                         l10349 1AB0                                           l10293 17EC  
                                         l10277 1754                                           l11501 0B22  
                                         l11341 49BE                                           l11333 499C  
                                         l10439 1E78                                           l10455 1F1A  
                                         l10383 1CD4                                           l10367 1B4A  
                                         l10543 458C                                           l11167 3C28  
                                         l11159 3BC0                                           l11095 3DF0  
                                         l10473 1FE4                                           l10465 1F86  
                                         l10449 1EE6                                           l10393 1D44  
                                         l10385 1CE0                                           l10297 1826  
                                         l10289 17C0                                           l10705 2A2C  
                                         l10625 2642                                           l10537 56A2  
                                         l10545 460C                                           l10561 44A6  
                                         l11193 54DA                                           l11409 04D6  
                                         l10801 51E6                                           l11089 3DE6  
                                         l10475 2000                                           l10395 1D4C  
                                         l10379 1C5A                                           l11291 3E4E  
                                         l10707 2A32                                           l10643 271E  
                                         l10715 2AAA                                           l11195 54DE  
                                         l11515 0B90                                           l11419 053E  
                                         l11277 570E                                           l10389 1D1A  
                                         l10397 1D56                                           l10477 200E  
                                         l10645 2722                                           l10565 44C0  
                                         l10557 4498                                           l11197 54EE  
                                         l10821 50F0                                           l10805 51F8  
                                         l11349 49E0                                           l11295 3E68  
                                         l10663 282C                                           l10735 4664  
                                         l10727 463A                                           l10495 43D2  
                                         l11199 54F6                                           l11623 0FB2  
                                         l11535 0C42                                           l11367 0106  
                                         l10815 50D8                                           l10681 2958  
                                         l10673 292C                                           l10737 466A  
                                         l10729 4640                                           l10489 43AA  
                                         l10585 4834                                           l10577 47EA  
                                         l10841 3FB2                                           l11537 0C4A  
                                         l10825 5104                                           l10817 50DE  
                                         l10809 520A                                           l10691 29A0  
                                         l10675 2938                                           l10667 2892  
                                         l10659 27E4                                           l10763 46D8  
                                         l10755 46B2                                           l10747 468E  
                                         l10835 3F8E                                           l11643 105A  
                                         l11635 1022                                           l11619 0F9E  
                                         l11627 0FBC                                           l10765 46DE  
                                         l10757 46B8                                           l10749 4694  
                                         l10597 485C                                           l11573 0DC2  
                                         l11485 0A98                                           l10679 2944  
                                         l10783 514A                                           l10871 384C  
                                         l11487 0AB4                                           l11743 3178  
                                         l10689 2996                                           l10865 3812  
                                         l11585 0E32                                           l11569 0DAE  
                                         l11577 0DCC                                           l10787 5160  
                                         l10779 5134                                           l10859 37D8  
                                         l11675 11BE                                           l11683 11DC  
                                         l11587 0E3A                                           l10893 397C  
                                         l11765 3222                                           l11679 11D2  
                                         l10799 51E0                                           l11777 3266  
                                         l11795 32C2                                           l11789 32A6  
                         _eusart1RxStatusBuffer 0100                                           ?_main 0001  
                               __end_of___awdiv 4C62                               __end_of_I2C1_Stop 561A  
                               __end_of___ftadd 3B5E                                           STR_10 7FBF  
                                         STR_11 7FA8                                           STR_20 7FD9  
                                         STR_12 7FC9                                           STR_21 7FE1  
                                         STR_13 7FD1                                           STR_22 7FFA  
                                         STR_14 7FD9                                           STR_30 7F8D  
                                         STR_31 7F16                                           STR_15 7FE1  
                                         STR_23 7F4E                                           STR_32 7F8D  
                                         STR_24 7FFA                                           STR_16 7FF5  
                                         STR_33 7F16                                           STR_17 7FF5  
                                         STR_25 7F5F                                           STR_18 7FC9  
                                         STR_34 7FB4                                           STR_26 7F6F  
                                         STR_35 7F8D                                           STR_19 7FD1  
                                         STR_27 7FFA                                           STR_36 7F16  
                                         STR_28 7F3D                                 __end_of___awmod 4FA2  
                                         STR_29 7FF0                               __end_of_I2C2_Stop 55D8  
                               __end_of___ftdiv 4468                                 __end_of___ftneg 5990  
                               __end_of___lldiv 4CE4                                           u11040 436E  
                                         u10250 4A18                                           u11210 47A8  
                                         u10420 3A20                                           u11060 4C94  
                                         u11300 58D2                                 __end_of___ftmul 428C  
                                         u12110 1F96                                           u10351 39C6  
                                         u11151 470C                                           u10520 3AD0  
                                         u11160 4716                                           u11240 4FC4  
                                         u11320 58F8                                           u10361 39DA  
                                         u10290 4A96                                           u10450 3A5E  
                                         u11170 4746                                           u11410 1352  
                                         u12108 1F46                                           u11340 53D8  
                               ___awdiv@divisor 0022                                           u10390 39F8  
                                         u10710 4F6C                                           u12150 202A  
                                         u12038 1E62                                           u13030 3856  
                                         u11175 473E                                           u12080 1F22  
                                         u11520 1596                                           u12400 2758  
                                         u12320 267A                                           u11280 4BA4  
                                         u13040 3858                                           u13120 3D6C  
                               __end_of___llmod 5008                                           u10561 41A8  
                                         u12161 4392                                           u10490 3A9C  
                                         u10650 4C24                                           u11530 15D6  
                                         u12250 44B2                                 __end_of___ftsub 5596  
                                         u10900 40B2                                           u12148 1FCE  
                                         u12068 1ED0                                           u12500 28C6  
                                         u12420 2794                                           u12340 26AE  
                               __end_of___fttol 47D0                                           u10581 41D0  
                                         u12181 43BA                                           u10750 529E  
                                         u11710 18E4                                           u12430 279A  
                                         u13150 3DD2                                           u10911 40D4  
                                         u12407 274E                                           u12327 2670  
                                         u14007 3D3E                                           u11800 1ABE  
                                         u11560 160C                                           u11480 149E  
                                         u12600 2A0A                                           u12520 2904  
                                         u12360 26E2                                           u11288 4BA6  
                                         u12280 480A                                           _T2CON 000FBA  
                                         u14017 3DA6                                           u11810 1ACE  
                                         u12530 290E                                           u12450 27D8  
                                         u13250 3C0E                                           u13170 3E24  
                                         u12507 28BC                                           u12427 278A  
                                         u12347 26A4                                           u14107 0F8E  
                                         u13411 045A                                           u14027 3DF8  
                                         u10780 552C                                           u11708 188E  
                                         u12700 2ACA                                           u12620 2A20  
                                         u12380 2716                                           u11485 1494  
                                         u14117 104A                                           u14037 0498  
                                         u11590 172A                                           u11398 1276  
                                         u12550 2978                                           u12470 2812  
                                         u12607 2A00                                           u14207 29A8  
                                         u12527 28FA                                           u12367 26D8  
                                         u14127 1154                                           u14047 09D0  
                                         u12640 2A52                                           u12288 480E  
                                         _T3CON 000FB1                                           u14217 5912  
                                         u12457 27CE                                           u14137 11AE  
                                         u13601 0D06                                           u14057 0A14  
                                         u10970 4184                                           u11658 17AA  
                                         u12570 29C4                                           u12490 2876  
                                         u12810 46A4                                           u10891 40A8  
                                         u14227 3E90                                           u12707 2AC0  
                                         u12387 270C                                 __end_of_dcMotor 5178  
                                         u14147 5A42                                           u14067 0AA4  
                                         u10980 4298                                           u11748 191C  
                                         u12660 2A78                                           u12580 29E4  
                                         u14237 3EAC                                           u12557 296E  
                                         u12477 2808                                           u14157 5A50  
                                         u14077 0D44                                           u13461 09BC  
                                         u11678 1810                                           u12670 2A7E  
                                         u12830 46C8                                           u13710 0FC4  
                                         u13630 0DD4                                           u14247 3ED4  
                                         u12647 2A48                                           u14167 5A5E  
                                         u14087 0D9E                                           u11848 1B0A  
                                         u11768 19F4                                           u12680 2A9E  
                                         u12760 4650                                           u14257 3F18  
                                         u12497 286C                                           u14177 4DF0  
                                         u14097 0F34                                           u12850 46EE  
                                         u14267 3F3E                                           u12667 2A6E  
                                         u12587 29DA                                           u14187 4EAA  
                                         u11868 1C42                                           u14277 5050  
                                         u14197 298E                                           u11798 1A68  
                                         u12790 467A                                           u13750 1074  
                                         u13670 0E54                                           u13590 0C64  
                                         u12687 2A94                                           u13761 1116  
                                         u13681 0EF6                                           u11898 1D04  
                                         u13790 11E4                                           u13927 30E8  
                                         u13937 312C                                           u13947 316A  
                                         u13957 31A2                                  __CFG_DEBUG$OFF 000000  
                                         u13967 3214                                           u13977 3252  
                                         u13987 3294                                           u13997 498C  
                               __end_of___lwdiv 52CE                  __size_of_I2C2_FunctionComplete 001C  
                               __end_of___lwmod 5554                                           _RCEN1 007E2B  
                                         i2l154 5234                                           i2l325 2302  
                                         i2l610 35AA                                           i2l268 5858  
                                         i2l621 3642                                           i2l613 360A  
                                         i2l461 0042                                           i2l622 3652  
                                         i2l367 25E2                                           i2l463 004E  
                                         i2l640 3724                                           i2l632 36C8  
                                         i2l616 3614                                           i2l465 0066  
                                         i2l457 002A                                           i2l626 36BA  
                                         i2l466 0090                                           i2l467 0086  
                                         i2l459 0036                                           i2l644 3758  
                                         i2l636 36FA                                           i2l639 3712  
                                         i2l760 335C                                           i2l771 33F4  
                                         i2l763 33BC                                           i2l772 3404  
                                         i2l790 34D6                                           i2l782 347A  
                                         i2l766 33C6                                           i2l776 346C  
                                         i2l794 350A                                           i2l786 34AC  
                               ___awdiv@counter 0024                                           i2l789 34C4  
                 __end_of_I2C2_FunctionComplete 59E6                                           _TMR3H 000FB3  
                                         _TMR3L 000FB2                                 __end_of__doprnt 2034  
                                         _TRISA 000F92                                           _TRISB 000F93  
                                         _TRISC 000F94                                           _TRISD 000F95  
                                         _TRISE 000F96                    __end_of_I2C1_BusCollisionISR 5B36  
                                 __CFG_WRT0$OFF 000000                                   __CFG_WRT1$OFF 000000  
                                 __CFG_WRT2$OFF 000000               __size_of_TMR3_SetInterruptHandler 000A  
                                 __CFG_WRT3$OFF 000000                                    ___lltoft@exp 002A  
                               LCD_init@address 0025                            _EUSART1_Transmit_ISR 5830  
                     ?_TMR3_SetInterruptHandler 001A                                  __CFG_EBTR0$OFF 000000  
                                __CFG_FCMEN$OFF 000000                                  __CFG_EBTR1$OFF 000000  
                                __CFG_EBTR2$OFF 000000                                  __CFG_EBTR3$OFF 000000  
                             ??_I2C1_Initialize 001A                                   __CFG_WRTB$OFF 000000  
                              __end_of_TMR3_ISR 53B6                                   __CFG_WRTC$OFF 000000  
                                 __CFG_WRTD$OFF 000000                                  __CFG_EBTRB$OFF 000000  
                                 ___awtoft@sign 0025                  ??_TMR3_DefaultInterruptHandler 0001  
                               __end_of_dpowers 7EA1                                           _floor 4468  
                                         _ldexp 47D0                                           _frexp 4B54  
                                         _errno 0131                                           _scale 2AE4  
                               __end_of_isdigit 59AE                              __CFG_MCLRE$EXTMCLR 000000  
                                 ___ftpack@sign 001E                                   ?_LCD_send_cmd 0001  
                                         _putch 5A9E                                  ?_EUSART1_Write 0001  
                                         pclath 000FFA                                           tablat 000FF5  
                                         pow@yi 00CE                                 __end_of_printOn 4A08  
                                         plusw1 000FE3                                           plusw2 000FDB  
                       ?_EUSART1_GetSensorsBool 0001                                   _touchBytesAzo 00EA  
                                         ttemp5 0046                                           ttemp6 0049  
                                         ttemp7 004D                                           status 000FD8  
                             __end_of_I2C_start 5B06                                           wtemp8 0046  
                               __end_of_sprintf 54D0                               __end_of_I2C_write 5A9E  
                                __CFG_HFOFST$ON 000000      __end_of_EUSART1_DefaultFramingErrorHandler 5B40  
   __size_of_EUSART1_DefaultFramingErrorHandler 0002            ??_EUSART1_DefaultFramingErrorHandler 0001  
           ?_EUSART1_DefaultFramingErrorHandler 0001              _EUSART1_DefaultFramingErrorHandler 5B3E  
                                __CFG_PBADEN$ON 000000                                     exp@exponent 00BE  
                                   ldexp@newexp 009F                               ??_I2C2_Initialize 001A  
                               __initialization 48A2                       __size_of_i2cRepeatedStart 0026  
                                ?_LCD_backlight 0001                                     log@exponent 009F  
                    __end_of_EUSART1_Initialize 4DD6                                    __end_of_main 3322  
                              __end_of_i2cStart 58D6                               ?_azoTouchPollAuto 0001  
                               printAuto@strLux 033D                         __end_of_TMR2_Initialize 5A76  
              __size_of_EUSART1_GetAutoModeBool 0006                     ?_INTERRUPT_InterruptManager 0001  
                            ??_azoTouchPollAuto 006C                                     _i2c1_object 010F  
                                        ??_main 017B                                   ___fttol@sign1 00A0  
                                   _i2c2_object 0108                                 _TMR3_StartTimer 5B22  
                                 _LCD_send_data 531E                                   __activetblptr 000002  
                         _TMR3_InterruptHandler 017F                            __size_of__tdiv_to_l_ 00FE  
                         ?_EUSART1_Transmit_ISR 0001                               __end_of_LCD_clear 5922  
                                        _ADCON0 000FC2                                          _ADCON1 000FC1  
                                        _ADCON2 000FC0                                          _ACKEN1 007E2C  
                                        _ACKDT1 007E2D                                  ??_LCD_send_cmd 001E  
                                        ?_floor 00B0                                          ?_ldexp 009C  
                                        ?_frexp 001A                                __end_of___altoft 4D5E  
                              ___llmod@dividend 001A                                          ?_scale 0090  
                                        _ADRESH 000FC4                                          _ADRESL 000FC3  
                                        _CCPR4H 000F59                                          _CCPR5H 000F56  
                                        _CCPR4L 000F58                                          _CCPR5L 000F55  
                              ___awdiv@dividend 0020                                __end_of___awtoft 56C6  
                                        _ANSELA 000F38                                          ?_putch 0001  
                                        _ANSELB 000F39                                          _ANSELC 000F3A  
                                        _ANSELD 000F3B                                          _ANSELE 000F3C  
                              __end_of___ftpack 4AB6                                          _T3GCON 000FB4  
                __end_of_EUSART1_GetSensorsBool 5B0C                                __end_of___lltoft 50C8  
                  __end_of_I2C2_BusCollisionISR 5B32                         __end_of_PWM5_Initialize 5A2C  
                       __end_of_TMR3_Initialize 58B0                                  __CFG_WDTEN$OFF 000000  
                                        i2l7501 237A                                          i2l7413 21A0  
                                        i2l7405 2178                                          i2l7415 21AA  
                                        i2l7351 206E                                          i2l7433 21FE  
                                        i2l7441 222E                                          i2l8057 59FC  
                                        i2l8049 5612                                          i2l8073 59E0  
                                        i2l8065 55D0                                          i2l7355 2086  
                                        i2l7613 25A6                                          i2l7621 25EA  
                                        i2l7533 2416                                          i2l7541 2448  
                                        i2l7517 23C8                                          i2l7525 23FA  
                                        i2l7509 23AC                                          i2l7605 257C  
                                        i2l7461 22B0                                          i2l7437 2216  
                                        i2l7429 21E6                                          i2l7373 20D4  
                                        i2l7357 208C                                          i2l7607 2584  
                                        i2l7455 2286                                          i2l7383 2104  
                                        i2l7391 2124                                          i2l7367 20BA  
                                        i2l7375 20DA                                          i2l7631 2630  
                                        i2l7359 2092                                          i2l8327 5854  
                                        i2l8407 367C                                          i2l8511 33AC  
                                        i2l6753 5236                                          i2l7625 2608  
                                        i2l7617 25C4                                          i2l7561 24B4  
                                        i2l7545 2464                                          i2l7449 225C  
                                        i2l6771 518E                                          i2l6763 5260  
                                        i2l6755 523C                                          i2l7635 263A  
                                        i2l7467 22DA                                          i2l7475 230A  
                                        i2l8347 4B4E                                          i2l8435 36DA  
                                        i2l8611 3514                                          i2l8523 33D6  
                                        i2l8515 33BE                                          i2l7629 2620  
                                        i2l7581 2510                                          i2l7565 24C4  
                                        i2l7573 24E4                                          i2l7549 2478  
                                        i2l7557 2498                                          i2l7485 232C  
                                        i2l7493 235E                                          i2l7389 211E  
                                        i2l8461 3734                                          i2l8445 36FE  
                                        i2l8613 351C                                          i2l6775 51A0  
                                        i2l6759 524E                                          i2l7399 2154  
                                        i2l8375 35FA                                          i2l8543 342E  
                                        i2l8287 59C0                                          i2l8631 5396  
                                        i2l6769 5188                                          i2l7593 254C  
                                        i2l7577 2500                                          i2l8473 375E  
                                        i2l8457 372C                                          i2l8393 363C  
                                        i2l8609 3510                                          i2l8529 33EE  
                                        i2l6779 51B4                                          i2l8475 3762  
                                        i2l8387 3624                                          i2l8379 360C  
                                        i2l8483 3776                                          i2l8571 348C  
                                        i2l8619 3528                                          i2l7597 255C  
                                        i2l7589 2530                                          i2l8477 376A  
                                        i2l8581 34B0                                          i2l8593 34DE  
                                        i2l8597 34E6                                          _RCREG1 000FAE  
                              __end_of___lwtoft 596C                                          _RCSTA1 000FAB  
                                        _OSCCON 000FD3                                          _SPBRG1 000FAF  
                                        _TMR1IF 007CF0                                          _TMR1ON 007E68  
                                        _TXREG1 000FAD                                       ??_i2cRead 001E  
                                        _TXSTA1 000FAC                                       ??_i2cStop 001A  
                               _TMR3_WriteTimer 59AE                                    ??_I2C_select 001D  
                           LCD_send_cmd@command 001E                            __size_of__stepMotor_ 0056  
                                  __doprnt$4004 00B2                                  __CFG_XINST$OFF 000000  
                              __end_of__powers_ 7E52                                    _CCPTMRS1bits 000F48  
                                  __LCD_address 0039                                  _p_i2c1_current 0141  
                                        ___ftge 4EBE                     ?_EUSART1_GetUnitTestCounter 001A  
                                        ___wmul 5922                                       ??___awdiv 0024  
                                     ??___ftadd 0066                                  _p_i2c2_current 013B  
                                __CFG_STVREN$ON 000000                                       ??___awmod 001E  
                                     ??___ftdiv 0078                                       ??___ftneg 001D  
                                     ??___lldiv 0022                                       ??___ftmul 0087  
                                     ??___llmod 0022                                       ??___ftsub 002C  
                                     ??___fttol 009B                                       ??_dcMotor 0020  
                                     ??___lwdiv 0023                                       ??___lwmod 001E  
                                        _isAuto 00ED                                          __step_ 5226  
                      ?_EUSART1_SetErrorHandler 001A                                          _guiLux 00E4  
                                     ??__doprnt 00AC                                          _fround 2E5C  
                                     ?_I2C1_ISR 0001                                       ?_I2C2_ISR 0001  
                                        clear_0 491E                                          clear_1 492A  
                                        clear_2 4936                                          clear_3 4942  
                              ___awdiv@quotient 0026                                 ___awmod@divisor 001C  
                                        _luxVal 011C                                    __doprnt@flag 00BB  
                      I2C2_Stop@completion_code 0003                                 ___awmod@counter 001E  
                            __stepMotorReverse_ 50C8                                          _printf 5654  
                                  __doprnt@eexp 00B9                                    __doprnt@fval 00C3  
                                ?_LCD_send_data 0001                ??_EUSART1_SetOverrunErrorHandler 001C  
               ?_EUSART1_SetOverrunErrorHandler 001A                                __end_of_sendData 4E4A  
                                  __doprnt@prec 00C6                                          _strcat 54D0  
                                        floor@i 00B3                                          floor@x 00B0  
                         ___ftmul@f3_as_product 008B                                    __pdataCOMRAM 0042  
                                     ??_isdigit 001A                                    __mediumconst 7E2A  
                                     ?_I2C_wait 0001                                          tblptrh 000FF7  
                                        tblptrl 000FF6                                          tblptru 000FF8  
                        __size_of_initialiseTCP 012E                                       ?_I2C_stop 0001  
                           ?__stepMotorReverse_ 001A                        __size_of_LCD_select_line 003A  
                      ADC_GetConversion@channel 001E                                       ??_printOn 0072  
                            __end_of_I2C_select 5A92                                 ??_EUSART1_Write 001A  
      TMR3_SetInterruptHandler@InterruptHandler 001A                                       ??_sprintf 002C  
                               _eusart1RxBuffer 002C                        __size_of_LCD_send_string 04A4  
                 __size_of_INTERRUPT_Initialize 0004                                 _eusart1TxBuffer 0278  
                              __end_ofexp@coeff 7EBF                               _SYSTEM_Initialize 585C  
                              __end_oflog@coeff 7EDA                                      __accesstop 0060  
                       __end_of__initialization 4948                                      ___altoft@c 00A6  
                                    ___ftadd@f1 0060                                      ___ftadd@f2 0063  
                                    ___ftge@ff1 001A                                      ___ftge@ff2 001D  
                                     ?_LCD_init 0021                              ?_SYSTEM_Initialize 0001  
                    __end_of_azoTouchPollManual 3E40                                    eval_poly@res 0099  
                                 ___rparam_used 000001                                      ___ftdiv@f1 0072  
                                    ___ftdiv@f2 0075                                      ___ftdiv@f3 007C  
                               ??_LCD_backlight 001E                                      ___ftneg@f1 001A  
                                _i2c1_trb_count 00F4                                      ___awtoft@c 0022  
                                  LCD_init@cols 0021                  __size_of_EUSART1_RxDataHandler 060C  
                 __end_of_EUSART1_RxDataHandler 2640                                      ___ftmul@f1 0081  
                                    ___ftmul@f2 0084                                    LCD_init@rows 0022  
                          ??__stepMotorReverse_ 001C                           _I2C1_FunctionComplete 59E6  
                          _I2C1_BusCollisionISR 5B32                                      ___ftsub@f1 006C  
                                    ___ftsub@f2 006F                                printAuto@nearFan 038C  
                                    ___fttol@f1 0097                                  __pcstackCOMRAM 0001  
                                  __pidataBANK0 5B39                                    __pidataBANK1 5B1E  
                                  __pidataBANK2 52CE                             ??_SYSTEM_Initialize 001C  
                       __end_of_TMR3_StartTimer 5B26                              _LCD_backlight$2792 001F  
                                    ___lltoft@c 0022                                       ?_TMR3_ISR 0001  
                              printAuto@valTemp 0380                                   __end_of_floor 454A  
                                 __end_of_ldexp 48A2                                   __end_of_frexp 4BDE  
                                 __end_of_scale 2E5C                                printAuto@tempLux 0368  
                                _i2c2_trb_count 00F0                                   __end_of_putch 5AA8  
                               _unitTestCounter 0036                                      ??_I2C1_ISR 0004  
                                    ??_I2C2_ISR 0004                                ?_TMR2_Initialize 0001  
                              printAuto@strTemp 0300                                      ___lwtoft@c 0022  
                        ??_EUSART1_Transmit_ISR 0001                                      __div_to_l_ 428C  
                 __size_ofi2_PWM5_LoadDutyValue 0032                     __end_of_EUSART1_Receive_ISR 4B54  
                                    ??_I2C_wait 001A                                      ??_I2C_stop 001B  
                             LCD_send_data@data 001E                                      __doprnt@ap 00AA  
                                    __doprnt@pb 00A6                                 __div_to_l_@exp1 0025  
                                       ??_floor 002C                                         ??_ldexp 00A1  
                               __div_to_l_@cntr 0024                                         ??_frexp 001F  
                                       ??_scale 002C                       __end_of_SYSTEM_Initialize 5886  
                               __div_to_l_@quot 0020                         __end_of_TMR3_WriteTimer 59CA  
                                       ??_putch 001B                                   _eusart1RxHead 003B  
                                 _eusart1TxHead 003D                                   _eusart1RxTail 003A  
                                    __pbssBANK0 00DB                                      __pbssBANK1 0100  
                                    __pbssBANK2 0250                                   _eusart1TxTail 003C  
             _EUSART1_TxDefaultInterruptHandler 0297                                       ?_i2cStart 0001  
                                   sendData@lux 016E                              __size_of_eval_poly 00DA  
               ??_EUSART1_SetRxInterruptHandler 001C                                ?_PWM5_Initialize 0001  
                              ?_TMR3_Initialize 0001                                 __CFG_PLLCFG$OFF 000000  
                                    ??_LCD_init 0023                                   __div_to_l_@f1 001A  
                                 __div_to_l_@f2 001D                            LCD_send_string@delay 0067  
                         ?_I2C1_BusCollisionISR 0001                                   _initialiseTCP 3E40  
               __end_of_EUSART1_SetErrorHandler 5AEE                              __CFG_CCP2MX$PORTC1 000000  
                              _i2cRepeatedStart 58D6                                         ?___ftge 001A  
              __end_of_TMR3_SetInterruptHandler 5ABC                                         ?___wmul 0026  
                                    ??_TMR3_ISR 0003                         _EUSART1_GetAutoModeBool 5B0C  
                            __CFG_CCP3MX$PORTB5 000000                            __end_of_LCD_send_cmd 5446  
                                       ?__step_ 0001                                 _I2C1_Initialize 5768  
                               ??_LCD_send_data 001E                                         _CCP4CON 000F57  
                                       _CCP5CON 000F54                                       ?___altoft 00A6  
                                       ?_fround 0090                                       ?___awtoft 0022  
                                     ?___ftpack 001A                            _I2C2_BusCollisionISR 5B2E  
                                       ?_printf 00C9                                       ?___lltoft 0022  
                       __size_of_ADC_Initialize 0016                                         ?_strcat 001A  
        __end_of_EUSART1_SetFramingErrorHandler 5AE4         __size_of_EUSART1_SetFramingErrorHandler 000A  
                _EUSART1_SetFramingErrorHandler 5ADA                                       ?___lwtoft 0022  
                          __step_@stepDirection 0001                        LCD_send_cmd@nibble_lower 001F  
                      LCD_send_cmd@nibble_upper 0020                              __size_of_printAuto 119C  
                  ?_EUSART1_DefaultErrorHandler 0001                              _PWM5_LoadDutyValue 579C  
             I2C2_ISR@i2c_10bit_address_restart 00EE                                         _OSCCON2 000FD2  
                                     _I2C1_Stop 55D8                                       _I2C2_Stop 5596  
                                       _OSCTUNE 000F9B                                         _SPBRGH1 000FB0  
                                       _SSP1ADD 000FC8                                         _SSP2ADD 000F6E  
                                       _SSP1BUF 000FC9                                         _SSP2BUF 000F6F  
                               _I2C2_Initialize 5734                             ?_PWM5_LoadDutyValue 001A  
                                    ??_i2cStart 001A              __size_of_EUSART1_ToggleSensorsBool 0008  
                        I2C2_MasterRead@trBlock 028A                               ??_LCD_select_line 0021  
                    ?_EUSART1_ToggleSensorsBool 0001                         __size_of_TMR3_StopTimer 0004  
                                       _i2cRead 4624                                         _i2cStop 53B6  
                                     ?_sendData 016B                               ??_LCD_send_string 0063  
                               __CFG_PWRTEN$OFF 000000                                  ?_initialiseTCP 0001  
                        ?_I2C1_FunctionComplete 0001                               __end_of__npowers_ 7E79  
                                       __Hparam 0000                                      _scale$4003 0093  
                                       __Lparam 0000                                       _I2C_start 5AFE  
                                     _I2C_write 5A92                              _p_i2c1_trb_current 0143  
                               __size_of___ftge 0074                                         ___awdiv 4BDE  
                                       ___ftadd 39B4                                         ___awmod 4F32  
                              ?_TMR3_StartTimer 0001                                         ___ftdiv 4380  
                                       ___ftneg 596C                                         ___lldiv 4C62  
                               __size_of___wmul 0026                                         ___ftmul 4196  
                                       ___llmod 4FA2                                         ___ftsub 5554  
                                       ___fttol 46FA                                         _dcMotor 5120  
                                       ___lwdiv 527C                                         _atCheck 00FC  
                                       ___lwmod 5512                            ??_PWM5_LoadDutyValue 001C  
                           LCD_select_line@line 0021                           __end_of__stepReverse_ 51D0  
                               __size_of__step_ 0056                                      ??___altoft 00AA  
                                       __doprnt 1244                           ?_I2C2_BusCollisionISR 0001  
                                       __pcinit 48A2                                      ??___awtoft 0025  
                                    ??___ftpack 001F                               __end_of_eval_poly 4624  
                               __size_of_fround 0266                                         __ramtop 0600  
                                    ??___lltoft 0026                                         __ptext0 30C2  
                                       __ptext1 4956                                         __ptext2 3CDE  
                                       __ptext3 51D0                                         __ptext4 50C8  
                                       __ptext5 00A8                                         __ptext6 54D0  
                                       __ptext7 548C                                         __ptext8 5A3E  
                                       __ptext9 5A4C                                 __size_of_printf 003A  
                                    ??___lwtoft 0025                                 __size_of_strcat 0042  
                                   ?__div_to_l_ 001A                                         _guiTemp 00E7  
                                       _dpowers 7E79                           _OSCILLATOR_Initialize 5A76  
                                     _T2CONbits 000FBA                                    __size_of_exp 01F6  
                                  __size_of_log 012A                                         _isdigit 5990  
                                  __size_of_pow 0180                                       _T3CONbits 000FB1  
                              ___awmod@dividend 001A                                         _valTemp 026E  
                            _EUSART1_Initialize 4D5E                        ??_PIN_MANAGER_Initialize 001A  
                                    ?_I2C1_Stop 0001                                      ?_I2C2_Stop 0001  
                         _I2C2_FunctionComplete 59CA                                         _printOn 4956  
                 ??_EUSART1_DefaultErrorHandler 0016                                         _timeout 0042  
                     __size_of_azoTouchPollAuto 0074                      __size_of_SYSTEM_Initialize 002A  
                                       _sprintf 548C                            I2C1_ISR@pi2c_buf_ptr 013F  
                                 __doprnt@width 00C1                                       _LCD_clear 58FC  
                          end_of_initialization 4948                                ?_TMR3_WriteTimer 0001  
                                       exp@sign 00C0                             ?_EUSART1_Initialize 0001  
                                    _sendPulse1 5A5A                                      _sendPulse2 5A4C  
                                    _sendPulse3 5A3E                                   __Lmediumconst 7E2A  
                   _EUSART1_OverrunErrorHandler 0291               __end_of_EUSART1_ToggleSensorsBool 5AF6  
                                     i2u1430_47 23CE                                       i2u1431_47 241C  
                                     i2u1432_47 247E                                       i2u1433_47 24CA  
                                     i2u1434_47 2516                                       i2u1435_47 2562  
                                     i2u1428_47 2332                                       i2u1429_47 2380  
                        ??_I2C1_BusCollisionISR 0001                                      ??_sendData 00D9  
                       __end_of_I2C1_Initialize 579C                                 ___lldiv@divisor 001E  
         __end_of_EUSART1_SetRxInterruptHandler 5AD0          __size_of_EUSART1_SetRxInterruptHandler 000A  
                 _EUSART1_SetRxInterruptHandler 5AC6                                         pow@sign 00CD  
                             __end_of_printAuto 1244                                 ___lldiv@counter 0026  
                     ??_EUSART1_GetAutoModeBool 001A                                      ?_I2C_start 0001  
                                    ?_I2C_write 0001                              _p_i2c2_trb_current 013D  
                                       printf@f 00C9                                         postdec1 000FE5  
                                       postdec2 000FDD                          I2C2_ISR@i2c_bytes_left 00EF  
                                       postinc0 000FEE                                         postinc2 000FDE  
                                __tdiv_to_l_@f1 001A                                  __tdiv_to_l_@f2 001D  
                          ??_EUSART1_Initialize 001C                   i2PWM5_LoadDutyValue@dutyValue 0001  
                                 ??__tdiv_to_l_ 0020                             azoTouchPollManual@i 006E  
                                     _PORTBbits 000F81                        _TMR3_SetInterruptHandler 5AB2  
                             __size_of_I2C1_ISR 024E                               __size_of_I2C2_ISR 024E  
                       __end_of_I2C2_Initialize 5768                __size_of_EUSART1_SetErrorHandler 000A  
                                   printAuto@R1 0389                             EUSART1_Write@txData 001A  
                             __size_of_I2C_wait 0012                               __size_of_I2C_stop 0008  
                                    ?_LCD_clear 0001               I2C1_ISR@i2c_10bit_address_restart 00F2  
                                   _adcValLight 012E                                   ??__stepMotor_ 001C  
                                   ___ftdiv@exp 007F                                 ??_initialiseTCP 00D9  
                      azoTouchPollManual@i_2622 0070                                       __LCD_cols 0038  
                         __size_of_LCD_send_cmd 0048                             __size_of__div_to_l_ 00F4  
                                     __LCD_rows 0147            __size_of_EUSART1_DefaultErrorHandler 0006  
                                    _voltageVal 012B                               __size_of_LCD_init 0064  
                                   ___ftmul@exp 008A                                    _guiDistanceC 00DE  
                                  _guiDistanceL 00E1                                    _guiDistanceR 00DB  
                  __end_of_INTERRUPT_Initialize 5B2E                          ??_I2C2_BusCollisionISR 0001  
                                __end_of___ftge 4F32                                  __end_of___wmul 5948  
                       I2C1_MasterWrite@trBlock 015B                                   __pidataCOMRAM 5B36  
                                __end_of__step_ 527C                        I2C1_Stop@completion_code 0003  
                            _azoTouchPollManual 3CDE                               __size_of_TMR3_ISR 004C  
                                _ADC_Initialize 5A02                          ?_OSCILLATOR_Initialize 0001  
                                __end_of_fround 30C2                                      floor@expon 00B6  
                             printAuto@str_2672 032E                               printAuto@str_2667 031F  
                                __end_of_printf 568E                      EUSART1_RxDataHandler@i_530 0008  
                    EUSART1_RxDataHandler@i_531 000A                      EUSART1_RxDataHandler@i_532 000C  
                    EUSART1_RxDataHandler@i_534 000E                      EUSART1_RxDataHandler@i_535 0010  
                    EUSART1_RxDataHandler@i_536 0012                      EUSART1_RxDataHandler@i_537 0014  
                                __end_of_strcat 5512                          ?_I2C2_FunctionComplete 0001  
                           start_initialization 48A2                                      eval_poly@d 0093  
                                    eval_poly@n 0095                                      eval_poly@x 0090  
                                   ??_I2C1_Stop 0001                             ?_azoTouchPollManual 0001  
                                   ??_I2C2_Stop 0001                                      ldexp@value 009C  
               __size_of_PIN_MANAGER_Initialize 0046                             __end_of__tdiv_to_l_ 4196  
                      __end_of_i2cRepeatedStart 58FC                                     __end_of_exp 39B4  
                                   __end_of_log 4098                                     __end_of_pow 3CDE  
 EUSART1_SetRxInterruptHandler@interruptHandler 001A   EUSART1_SetTxInterruptHandler@interruptHandler 001A  
                                   putch@txData 001B                                    _LCD_send_cmd 53FE  
                         __end_of_EUSART1_Write 56FE                                     ?_sendPulse1 0001  
                                   ?_sendPulse2 0001                                     ?_sendPulse3 0001  
                                    frexp@value 001A                                 _stepperPosition 0137  
                                _TMR3_StopTimer 5B26                                 ___llmod@divisor 001E  
                             __size_of_i2cStart 0026                                 ___llmod@counter 0022  
                  __end_ofi2_PWM5_LoadDutyValue 5800                                ?_I2C1_Initialize 0001  
                          ??_azoTouchPollManual 006C                                     ??_I2C_start 001B  
                                   ??_I2C_write 001B                           __end_of_LCD_backlight 5734  
                   __size_of__stepMotorReverse_ 0058                             __end_of__stepMotor_ 5226  
                                      ??___ftge 0020                                        ??___wmul 002A  
                          I2C2_ISR@pi2c_buf_ptr 0139                           _EUSART1_RxDataHandler 2034  
                                 dcMotor@speeed 001E                  ?_EUSART1_SetRxInterruptHandler 001A  
                        __end_of_ADC_Initialize 5A18                                     __doprnt@val 00B5  
                                      ??__step_ 0003                                     __pdataBANK0 00FE  
                                   __pdataBANK1 0184                                     __pdataBANK2 0200  
                                      ??_fround 002C                                        ??_printf 002C  
                                      ??_strcat 001E                                  _eusart1RxCount 00FD  
                             __size_of___altoft 007A                                      fround@prec 0099  
                             __size_of___awtoft 0038                               __size_of___ftpack 00AE  
                                  sendData@temp 016B                     PWM5_LoadDutyValue@dutyValue 001A  
                             __size_of___lltoft 005C                                     __pbssCOMRAM 002C  
                      ??_EUSART1_GetSensorsBool 001A                                 _LCD_select_line 561A  
                              ?_I2C2_Initialize 0001               _EUSART1_RxDefaultInterruptHandler 0295  
                             __size_of___lwtoft 0024                   __size_of_EUSART1_Transmit_ISR 002C  
                                 __pcstackBANK0 0060                                   __pcstackBANK1 0165  
                                 __pcstackBANK3 0300                        __size_of_TMR2_Initialize 000E  
                                 _i2c1_tr_queue 0160                                 _LCD_send_string 2640  
                              _azoTouchPollAuto 4E4A                                    _isdigit$3515 001B  
                                   ??_LCD_clear 0021                                   _i2c2_tr_queue 0151  
                        __end_of_TMR3_StopTimer 5B2A                                  _temperatureVal 0116  
               ??_EUSART1_SetTxInterruptHandler 001C                ??_EUSART1_SetFramingErrorHandler 001C  
               ?_EUSART1_SetFramingErrorHandler 001A                         ??_I2C1_FunctionComplete 0001  
                  __size_of_EUSART1_Receive_ISR 009E                                       __doprnt@c 00C8  
                                     __doprnt@f 00A8                                 LCD_backlight@on 001E  
                   ??_EUSART1_ToggleSensorsBool 001A                                        ?_i2cRead 001A  
                                      ?_i2cStop 0001                                       __pnvBANK1 017F  
                                     __pnvBANK2 028F                                       _main$3992 017D  
                              ___lwdiv@dividend 001F                          _PIN_MANAGER_Initialize 5446  
                           LCD_send_string@line 0062                        __size_of_PWM5_Initialize 0014  
                      __size_of_TMR3_Initialize 002A                           LCD_send_string@prefix 0069  
                             __size_of_sendData 0074                                       __pintcode 0008  
                                 __pmediumconst 7E2A                                        ?___awdiv 0020  
                                     __ptext100 55D8                                       __ptext101 59E6  
                                     __ptext110 5226                                       __ptext102 5B32  
                                     __ptext111 5178                                       __ptext103 5830  
                                     __ptext112 0000                                       __ptext104 4AB6  
                                     __ptext105 5B12                                       __ptext106 5B3E  
                                     __ptext107 5B18                                       __ptext108 2034  
                                     __ptext109 57CE                                        ?___ftadd 0060  
                                      ?___awmod 001A                                        ?___ftdiv 0072  
                                      ?___ftneg 001A                                        ?___lldiv 001A  
                                      ?___ftmul 0081                                        ?___llmod 001A  
                                      ?___ftsub 006C                                       __npowers_ 7E52  
                                      ?___fttol 0097                                        ?_dcMotor 001E  
                                      ?___lwdiv 001F                                        ?___lwmod 001A  
                               ?_ADC_Initialize 0001                                        ?__doprnt 00A6  
                                     _ipSetFlag 0145                                        _I2C1_ISR 3570  
                                      _I2C2_ISR 3322                    ??_INTERRUPT_InterruptManager 0016  
                              __CFG_PRICLKEN$ON 000000                                     __tdiv_to_l_ 4098  
                         __end_of_LCD_send_data 536A                             __size_of_sendPulse1 000E  
                           __size_of_sendPulse2 000E                             __size_of_sendPulse3 000E  
                                  ??__div_to_l_ 0020                                        _BAUDCON1 000FB8  
    __end_of_EUSART1_DefaultOverrunErrorHandler 5B18     __size_of_EUSART1_DefaultOverrunErrorHandler 0006  
          ??_EUSART1_DefaultOverrunErrorHandler 0001             ?_EUSART1_DefaultOverrunErrorHandler 0001  
            _EUSART1_DefaultOverrunErrorHandler 5B12                                        ?_isdigit 0001  
                                     _eval_poly 454A                            _EUSART1_ErrorHandler 028F  
                                      _I2C_wait 5A2C                                        _I2C_stop 5AF6  
                       _EUSART1_SetErrorHandler 5AE4                                        ?_printOn 0001  
                              ___lwdiv@quotient 0024                                        ?_sprintf 00C9  
                                __size_of_floor 00E2                                  __size_of_ldexp 00D2  
                                __size_of_frexp 008A                                LCD_send_string@i 006A  
                                __size_of_scale 0378                                  __size_of_putch 000A  
                        EUSART1_RxDataHandler@i 0006                               i2cRead@i2cAddress 001A  
                          _INTERRUPT_Initialize 5B2A                                 ?_TMR3_StopTimer 0001  
                        I2C1_MasterRead@trBlock 0156                                  ___wmul@product 002A  
                                      _LATAbits 000F89                                     __stepMotor_ 51D0  
       EUSART1_SetErrorHandler@interruptHandler 001A                                        _LATBbits 000F8A  
                                      _LATDbits 000F8C                                        _LCD_init 5008  
                                      _PIE1bits 000F9D                                        _PIE2bits 000FA0  
                                      _PIE3bits 000FA3             __size_of_INTERRUPT_InterruptManager 009C  
                                      _PIR1bits 000F9E                              __end_of__div_to_l_ 4380  
                                      _PIR2bits 000FA1                                        _PIR3bits 000FA4  
                    ??_TMR3_SetInterruptHandler 001C                                        i2u770_40 23F8  
                                      i2u772_40 2446                                        i2u774_40 2476  
                                      i2u766_40 235C                                        i2u768_40 23AA  
                                      i2u927_48 53A2                          ?_EUSART1_RxDataHandler 0001  
                                      i2u894_48 4ADE                                        i2u894_49 4AF4  
                                      _RCONbits 000FD0                                        i2u896_48 4B0C  
                                      i2u896_49 4B22                                        i2u898_48 4B38  
                                      i2u995_48 0058                                __CFG_WDTPS$32768 000000  
                                      i2u998_48 0070                                        _SSP1CON1 000FC6  
                                      _SSP1CON2 000FC5                                        _SSP1CON3 000FCB  
                                      _SSP2CON1 000F6C                                        _SSP2CON3 000F69  
                                      _TMR3_ISR 536A                    ??_EUSART1_GetUnitTestCounter 001C  
                                _printAuto$4000 0383                                        _SSP1STAT 000FC7  
                                      _SSP2STAT 000F6D                                       _printAuto 00A8  
                                _printAuto$3993 038D                                  _printAuto$3994 036E  
                                _printAuto$3995 0371                                  _printAuto$3996 0374  
                                _printAuto$3997 0377                                  _printAuto$3998 037A  
                                _printAuto$3999 037D                         __end_of_LCD_select_line 5654  
                   __size_of_PWM5_LoadDutyValue 0032                       _EUSART1_ToggleSensorsBool 5AEE  
                                    _ADCON0bits 000FC2                               ___wmul@multiplier 0026  
                       __end_of_LCD_send_string 2AE4                                       _stepperCW 0184  
                               _commandReceive2 00F8                                 _commandReceive3 00F7  
                               _commandReceive4 00F6                        __size_of_TMR3_StartTimer 0004  
                                    ?_eval_poly 0090                            i2_PWM5_LoadDutyValue 57CE  
               __size_of_EUSART1_GetSensorsBool 0006                                     _INTCON2bits 000FF1  
                                     copy_data0 48B6                                       copy_data1 48D6  
                         ?_INTERRUPT_Initialize 0001                                        _i2cStart 58B0  
                        __size_of__stepReverse_ 0058                               ??_TMR2_Initialize 001A  
           __size_of_EUSART1_GetUnitTestCounter 000A                                       frexp@eptr 001D  
                              __size_of_i2cRead 00D6                                      _I2C_select 5A84  
         __end_of_EUSART1_SetTxInterruptHandler 5AC6          __size_of_EUSART1_SetTxInterruptHandler 000A  
                              __size_of_i2cStop 0048                   _EUSART1_SetTxInterruptHandler 5ABC  
                                      __Hrparam 0000                        __size_of_TMR3_WriteTimer 001C  
                 __size_of_I2C1_BusCollisionISR 0004                                        __Lrparam 0000  
                             _ADC_GetConversion 5800                                  __LCD_backlight 0044  
                            __CFG_BOREN$SBORDIS 000000                          I2C1_ISR@i2c_bytes_left 00F3  
                                   _manualSpeed 00FE                               __CFG_P2BMX$PORTD2 000000  
                       ??_OSCILLATOR_Initialize 001A                                      ?_printAuto 0001  
                            ?_ADC_GetConversion 001A                                __size_of___awdiv 0084  
                              __size_of___ftadd 01AA                                __size_of___awmod 0070  
                              __size_of___ftdiv 00E8                                __size_of___ftneg 0024  
                              __size_of___lldiv 0082                                        ___altoft 4CE4  
                              __size_of___ftmul 00F6                                __size_of___llmod 0066  
                              __size_of___ftsub 0042                                __size_of___fttol 00D6  
                              __size_of_dcMotor 0058                     __size_of_EUSART1_Initialize 0078  
                              __size_of___lwdiv 0052                                __size_of___lwmod 0042  
                             I2C_select@address 001D                                        ___awtoft 568E  
                                      ___ftpack 4A08                         ??_I2C2_FunctionComplete 0001  
                                   _fround$4001 0096                                     _fround$4002 0093  
                              __size_of__doprnt 0DF0                                        ___lltoft 506C  
                             ??_TMR3_Initialize 001C                               ??_PWM5_Initialize 001A  
                                      ___lwtoft 5948                       ??_EUSART1_SetErrorHandler 001C  
           __end_of_EUSART1_DefaultErrorHandler 5B1E                     _EUSART1_DefaultErrorHandler 5B18  
                           ??_ADC_GetConversion 001C                                        _exp$4008 00BB  
                                      _checkTCP 0148                           ?i2_PWM5_LoadDutyValue 0001  
                                    strcat@from 001C                                __size_of_isdigit 001E  
                            LCD_send_string@col 0066                                 ___lwdiv@divisor 0021  
                            LCD_send_string@str 0060                             I2C1_ISR@i2c_address 0040  
                               ___lwdiv@counter 0023                                        __ptext10 5A5A  
                                      __ptext11 4DD6                                        __ptext20 454A  
                                      __ptext12 5AEE                                        __ptext21 4380  
                                      __ptext13 3B5E                                        __ptext30 2640  
                                      __ptext22 568E                                        __ptext14 3F6E  
                                      __ptext31 531E                                        __ptext23 5120  
                                      __ptext15 37BE                                        __ptext40 1244  
                                      __ptext32 561A                                        __ptext24 579C  
                                      __ptext16 47D0                                        __ptext41 2AE4  
                                      __ptext33 58FC                                        __ptext25 4E4A  
                                      __ptext17 4468                                        __ptext50 527C  
                                      __ptext42 4F32                                        __ptext34 5948  
                                      __ptext26 4624                                        __ptext18 4B54  
                                      __ptext51 4196                                        __ptext43 4BDE  
                                      __ptext35 5B06                                        __ptext27 53B6  
                                      __ptext19 4CE4                                        __ptext60 4A08  
                                      __ptext52 4098                                        __ptext44 5A9E  
                                      __ptext36 5B0C                                        __ptext28 58B0  
                                      __ptext61 596C                                        __ptext53 428C  
                                      __ptext45 56C6                                        __ptext37 5800  
                                      __ptext29 58D6                                        __ptext70 5A18  
                                      __ptext62 4EBE                                        __ptext54 506C  
                                      __ptext46 5990                                        __ptext38 3E40  
                                      __ptext71 5446                                        __ptext63 5B22  
                                      __ptext55 4FA2                                        __ptext47 2E5C  
                                      __ptext39 5654                                        __ptext80 5ADA  
                                      __ptext72 5A76                                        __ptext64 5AA8  
                                      __ptext56 4C62                                        __ptext48 5922  
                                      __ptext81 5AE4                                        __ptext73 5B2A  
                                      __ptext65 5B26                                        __ptext57 46FA  
                                      __ptext49 5512                                        __ptext90 5A2C  
                                      __ptext82 5A02                                        __ptext74 5734  
                                      __ptext66 585C                                        __ptext58 5554  
                                      __ptext83 5008                                        __ptext75 5768  
                                      __ptext67 5886                                        __ptext59 39B4  
                                      __ptext92 536A                                        __ptext84 53FE  
                                      __ptext76 4D5E                                        __ptext68 5AB2  
                                      __ptext93 59AE                                        __ptext85 56FE  
                                      __ptext77 5ABC                                        __ptext69 5A68  
                                      __ptext94 5B3C                                        __ptext86 5AF6  
                                      __ptext78 5AC6                                        __ptext95 3322  
                                      __ptext87 5AFE                                        __ptext79 5AD0  
                                      __ptext96 5596                                        __ptext88 5A84  
                                      __ptext97 59CA                                        __ptext89 5A92  
                                      __ptext98 5B2E                                        __ptext99 3570  
                             ?_i2cRepeatedStart 0001                       LCD_send_data@nibble_lower 001F  
                                  _SSP1CON1bits 000FC6                                    _SSP1CON2bits 000FC5  
                                      _finalLux 0125                                        __powers_ 7E2B  
                     LCD_send_data@nibble_upper 0020                                __size_of_printOn 00B2  
                                      _distance 0122                                    _SSP2CON1bits 000F6C  
                                      _pow$4006 00C7                                        _pow$4007 00CA  
                                  _SSP2CON2bits 000F6B                                __size_of_sprintf 0044  
                                    _T3GCONbits 000FB4                                        _autoMode 0149  
                            ??_i2cRepeatedStart 001A                                    ??_sendPulse1 001A  
                                  ??_sendPulse2 001A                                    ??_sendPulse3 001A  
                       TMR3_WriteTimer@timerVal 0001                __stepMotorReverse_@stepDirection 001A  
                      ?_EUSART1_GetAutoModeBool 0001                                   __size_of_main 0260  
                                      _sendData 4DD6                       __end_of_ADC_GetConversion 5830  
                         __end_of_initialiseTCP 3F6E                          _EUSART1_GetSensorsBool 5B06  
                                   _valDistance 0280  EUSART1_SetOverrunErrorHandler@interruptHandler 001A  
                                      _muxSetup 00FB                        __end_of_azoTouchPollAuto 4EBE  
                                      int$flags 0045              __end_of_INTERRUPT_InterruptManager 00A4  
                    _INTERRUPT_InterruptManager 0008                                  _commandReceive 00F9  
                       I2C2_MasterWrite@trBlock 014C                                ?_LCD_select_line 0001  
                                 __stepReverse_ 5178                                     _tmr3Counter 0133  
                                __doprnt@tmpval 00BD            __end_of_TMR3_DefaultInterruptHandler 5B3E  
         __size_of_TMR3_DefaultInterruptHandler 0002                    _TMR3_DefaultInterruptHandler 5B3C  
                 __size_of_I2C2_BusCollisionISR 0004                     _EUSART1_FramingErrorHandler 0293  
                           _EUSART1_Receive_ISR 4AB6                                    _SSP2STATbits 000F6D  
                   __stepReverse_@stepDirection 0001                                        exp@coeff 7EA1  
                                      log@coeff 7EBF                                ?_LCD_send_string 0060  
                            __end_of_sendPulse1 5A68                              __end_of_sendPulse2 5A5A  
                            __end_of_sendPulse3 5A4C                                      _INTCONbits 000FF2  
                                   ??_eval_poly 0097                                        isdigit@c 001C  
                        ??_INTERRUPT_Initialize 001A                                        scale@scl 0096  
                             ??_TMR3_StartTimer 001A                                        intlevel2 0000  
                                     sprintf@ap 00D0                                       sprintf@pb 00D2  
                              __tdiv_to_l_@exp1 0028                                __tdiv_to_l_@cntr 0027  
                                     sprintf@wh 00C9                                __tdiv_to_l_@quot 0023  
                          ?_EUSART1_Receive_ISR 0001                                ___lwmod@dividend 001A  
                           I2C2_ISR@i2c_address 003E                                ___lldiv@dividend 001A  
                       ?_PIN_MANAGER_Initialize 0001                  __size_of_I2C1_FunctionComplete 001C  
        __end_of_EUSART1_SetOverrunErrorHandler 5ADA         __size_of_EUSART1_SetOverrunErrorHandler 000A  
                _EUSART1_SetOverrunErrorHandler 5AD0                                      _RCSTA1bits 000FAB  
                 __end_of_I2C1_FunctionComplete 5A02                      __end_of__stepMotorReverse_ 5120  
                  __end_of_EUSART1_Transmit_ISR 585C                                     ?_I2C_select 001C  
                              ??_ADC_Initialize 001A                     __size_of_azoTouchPollManual 0162  
            __end_of_EUSART1_GetUnitTestCounter 5AB2                      _EUSART1_GetUnitTestCounter 5AA8  
                                      printf@ap 0165                                        printf@pb 0167  
EUSART1_SetFramingErrorHandler@interruptHandler 001A                                     ??_printAuto 0179  
                ?_EUSART1_SetTxInterruptHandler 001A                                  ?__stepReverse_ 0001  
                             ??_TMR3_WriteTimer 0003                        __size_of_I2C1_Initialize 0034  
                                   _resistorVal 0128                          __size_of_EUSART1_Write 0038  
                            _eusart1RxLastError 014B                                    ?__tdiv_to_l_ 001A  
                        ??i2_PWM5_LoadDutyValue 0003                                        sprintf@f 00CB  
                                      strcat@cp 001E                   ?_TMR3_DefaultInterruptHandler 0001  
                                      strcat@to 001A                                     _sensorsRead 014A  
                              ___lldiv@quotient 0022                                 ___lwmod@divisor 001C  
                               ___lwmod@counter 001E                                ??_TMR3_StopTimer 001A  
                             __CFG_T3CMX$PORTC0 000000                                     _serverSetup 00FA  
               __end_of_EUSART1_GetAutoModeBool 5B12                          __size_of_LCD_backlight 0036  
                                I2C_select@mode 001C                           ??_EUSART1_Receive_ISR 0016  
                __end_of_PIN_MANAGER_Initialize 548C                        __size_of_I2C2_Initialize 0034  
                     __stepMotor_@stepDirection 001A                              __size_of_I2C1_Stop 0042  
                            __size_of_I2C2_Stop 0042                                    ?__stepMotor_ 001A  
                             __CFG_FOSC$INTIO67 000000                         ??_EUSART1_RxDataHandler 0005  
                    __size_of_ADC_GetConversion 0030  
